"""remove old prepro

Revision ID: b1b3562f9a29
Revises: 410d3301fdb2
Create Date: 2025-08-19 08:50:00.167521

"""

from typing import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b1b3562f9a29"
down_revision: str | None = "410d3301fdb2"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_sourcedocumentlink_id", table_name="sourcedocumentlink")
    op.drop_index(
        "ix_sourcedocumentlink_linked_source_document_filename",
        table_name="sourcedocumentlink",
    )
    op.drop_index(
        "ix_sourcedocumentlink_linked_source_document_id",
        table_name="sourcedocumentlink",
    )
    op.drop_index(
        "ix_sourcedocumentlink_parent_source_document_id",
        table_name="sourcedocumentlink",
    )
    op.drop_table("sourcedocumentlink")
    op.drop_index(
        "ix_preprocessingjobpayload_prepro_job_id", table_name="preprocessingjobpayload"
    )
    op.drop_index(
        "ix_preprocessingjobpayload_status", table_name="preprocessingjobpayload"
    )
    op.drop_table("preprocessingjobpayload")
    op.drop_index("ix_preprocessingjob_project_id", table_name="preprocessingjob")
    op.drop_index("ix_preprocessingjob_status", table_name="preprocessingjob")
    op.drop_table("preprocessingjob")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "preprocessingjob",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "created",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
            name="preprocessingjob_project_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="preprocessingjob_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_preprocessingjob_status", "preprocessingjob", ["status"], unique=False
    )
    op.create_index(
        "ix_preprocessingjob_project_id",
        "preprocessingjob",
        ["project_id"],
        unique=False,
    )
    op.create_table(
        "preprocessingjobpayload",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("filename", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("mime_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("doc_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "current_pipeline_step", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("error_message", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("prepro_job_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "source_document_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["prepro_job_id"],
            ["preprocessingjob.id"],
            name="preprocessingjobpayload_prepro_job_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
            name="preprocessingjobpayload_project_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["source_document_id"],
            ["sourcedocument.id"],
            name="preprocessingjobpayload_source_document_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="preprocessingjobpayload_pkey"),
    )
    op.create_index(
        "ix_preprocessingjobpayload_status",
        "preprocessingjobpayload",
        ["status"],
        unique=False,
    )
    op.create_index(
        "ix_preprocessingjobpayload_prepro_job_id",
        "preprocessingjobpayload",
        ["prepro_job_id"],
        unique=False,
    )
    op.create_table(
        "sourcedocumentlink",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "parent_source_document_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "linked_source_document_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "linked_source_document_filename",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["linked_source_document_id"],
            ["sourcedocument.id"],
            name="sourcedocumentlink_linked_source_document_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["parent_source_document_id"],
            ["sourcedocument.id"],
            name="sourcedocumentlink_parent_source_document_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="sourcedocumentlink_pkey"),
    )
    op.create_index(
        "ix_sourcedocumentlink_parent_source_document_id",
        "sourcedocumentlink",
        ["parent_source_document_id"],
        unique=False,
    )
    op.create_index(
        "ix_sourcedocumentlink_linked_source_document_id",
        "sourcedocumentlink",
        ["linked_source_document_id"],
        unique=False,
    )
    op.create_index(
        "ix_sourcedocumentlink_linked_source_document_filename",
        "sourcedocumentlink",
        ["linked_source_document_filename"],
        unique=False,
    )
    op.create_index(
        "ix_sourcedocumentlink_id", "sourcedocumentlink", ["id"], unique=False
    )
    # ### end Alembic commands ###
