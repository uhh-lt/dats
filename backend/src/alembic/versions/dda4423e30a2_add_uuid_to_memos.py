"""add uuid to memos

Revision ID: dda4423e30a2
Revises: 8546861caf7f
Create Date: 2025-04-16 08:16:47.986651

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "dda4423e30a2"
down_revision: Union[str, None] = "8546861caf7f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # add the column, nullable
    op.add_column("memo", sa.Column("uuid", sa.String(), nullable=True))

    # update the table to set the uuid
    conn = op.get_bind()

    # First, ensure the uuid-ossp extension is installed
    conn.execute(sa.text('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"'))

    # Get all project IDs
    project_rows = conn.execute(
        sa.text("SELECT id FROM project ORDER BY id")
    ).fetchall()
    project_ids = [row[0] for row in project_rows]

    print(f"Found {len(project_ids)} projects to process")

    # Process each project separately
    for project_id in project_ids:
        print(f"Processing project ID: {project_id}")

        # Memos for this project
        conn.execute(
            sa.text("""
            UPDATE memo
            SET uuid = uuid_generate_v4()::text
            WHERE project_id = :project_id
            """),
            {"project_id": project_id},
        )

        # Print counts for this project
        memo_count = conn.execute(
            sa.text("""
            SELECT COUNT(*)
            FROM memo
            WHERE project_id = :project_id
        """),
            {"project_id": project_id},
        ).scalar()

        print(f"  Project {project_id} updated:")
        print(f"  - Memos: {memo_count}")

    # change the column to non-nullable
    op.alter_column("memo", "uuid", nullable=False)

    # create the index and constraint
    op.create_unique_constraint(
        "UC_memo_uuid_unique_per_project", "memo", ["project_id", "uuid"]
    )
    op.create_index(op.f("ix_memo_uuid"), "memo", ["uuid"], unique=False)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_memo_uuid"), table_name="memo")
    op.drop_constraint("UC_memo_uuid_unique_per_project", "memo", type_="unique")
    op.drop_column("memo", "uuid")
    # ### end Alembic commands ###
