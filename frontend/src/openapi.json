{
  "openapi": "3.0.2",
  "info": {
    "title": "D-WISE Tool Suite Backend API",
    "description": "The REST API for the D-WISE Tool Suite Backend.",
    "version": "beta_mwp_1"
  },
  "paths": {
    "/heartbeat": {
      "get": {
        "tags": ["general"],
        "summary": "Heartbeat",
        "operationId": "heartbeat",
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }
        }
      }
    },
    "/": {
      "get": {
        "tags": ["general"],
        "summary": "Root To Docs",
        "description": "Redirection to /docs",
        "operationId": "root_to_docs",
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }
        }
      }
    },
    "/user": {
      "get": {
        "tags": ["user"],
        "summary": "Returns all Users",
        "description": "Returns all Users that exist in the system",
        "operationId": "get_all",
        "parameters": [
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response User-Get All",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Registers a new User",
        "description": "Registers a new User and returns it with the generated ID.",
        "operationId": "register",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": ["user"],
        "summary": "Returns the JWT access token for the provided user login data",
        "description": "Returns the JWT access token for the provided user login data if the login was successful. This is usually only called from an OAuth2 client!",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": { "schema": { "$ref": "#/components/schemas/Body_user-login" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserAuthorizationHeaderData" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "tags": ["user"],
        "summary": "Returns the current user",
        "description": "Returns the current (logged in) user",
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/user/{user_id}": {
      "get": {
        "tags": ["user"],
        "summary": "Returns the User",
        "description": "Returns the User with the given ID if it exists",
        "operationId": "get_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Removes the User",
        "description": "Removes the User with the given ID if it exists",
        "operationId": "delete_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["user"],
        "summary": "Updates the User",
        "description": "Updates the User with the given ID if it exists",
        "operationId": "update_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserUpdate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/{user_id}/project": {
      "get": {
        "tags": ["user"],
        "summary": "Returns all Projects of the User",
        "description": "Returns all Projects of the User with the given ID",
        "operationId": "get_user_projects",
        "parameters": [
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response User-Get User Projects",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ProjectRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/{user_id}/code": {
      "get": {
        "tags": ["user"],
        "summary": "Returns all Codes of the User",
        "description": "Returns all Codes of the User with the given ID",
        "operationId": "get_user_codes",
        "parameters": [
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response User-Get User Codes",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/{user_id}/memo": {
      "get": {
        "tags": ["user"],
        "summary": "Returns all Memos of the User",
        "description": "Returns all Memos of the User with the given ID",
        "operationId": "get_user_memos",
        "parameters": [
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response User-Get User Memos",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/{user_id}/adocs": {
      "get": {
        "tags": ["user"],
        "summary": "Returns all Adocs of the User",
        "description": "Returns all Adocs of the User with the given ID",
        "operationId": "get_user_adocs",
        "parameters": [
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response User-Get User Adocs",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AnnotationDocumentRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/{user_id}/recent_activity": {
      "get": {
        "tags": ["user"],
        "summary": "Returns sdoc ids of sdocs the User recently modified (annotated)",
        "description": "Returns the top k sdoc ids that the User recently modified (annotated)",
        "operationId": "recent_activity",
        "parameters": [
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" },
          { "required": true, "schema": { "title": "K", "type": "integer" }, "name": "k", "in": "query" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response User-Recent Activity",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AnnotationDocumentRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Projects of the current user",
        "description": "Returns all Projects of the current user",
        "operationId": "read_all",
        "parameters": [
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Read All",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ProjectRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["project"],
        "summary": "Creates a new Project",
        "description": "Creates a new Project.",
        "operationId": "create_new_project",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}": {
      "get": {
        "tags": ["project"],
        "summary": "Returns the Project with the given ID",
        "description": "Returns the Project with the given ID if it exists",
        "operationId": "read_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes the Project",
        "description": "Removes the Project with the given ID.",
        "operationId": "delete_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["project"],
        "summary": "Updates the Project",
        "description": "Updates the Project with the given ID.",
        "operationId": "update_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectUpdate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/sdoc": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all SourceDocuments of the Project.",
        "description": "Returns all SourceDocuments of the Project with the given ID.",
        "operationId": "get_project_sdocs",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          {
            "required": false,
            "schema": { "title": "Only Finished", "type": "boolean", "default": true },
            "name": "only_finished",
            "in": "query"
          },
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedSourceDocumentReads" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["project"],
        "summary": "Uploads one or multiple SourceDocument to the Project",
        "description": "Uploads one or multiple SourceDocument to the Project with the given ID if it exists",
        "operationId": "upload_project_sdoc",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": { "schema": { "$ref": "#/components/schemas/Body_project-upload_project_sdoc" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "title": "Response Project-Upload Project Sdoc", "type": "string" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all SourceDocuments of the Project",
        "description": "Removes all SourceDocuments of the Project with the given ID if it exists",
        "operationId": "delete_project_sdocs",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Delete Project Sdocs",
                  "type": "array",
                  "items": { "type": "integer" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/{user_id}": {
      "delete": {
        "tags": ["project"],
        "summary": "Dissociates the Users with the Project",
        "description": "Dissociates the Users with the Project with the given ID if it exists",
        "operationId": "dissociate_user_from_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["project"],
        "summary": "Associates the User with the Project",
        "description": "Associates an existing User to the Project with the given ID if it exists",
        "operationId": "associate_user_to_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Users of the Project",
        "description": "Returns all Users of the Project with the given ID",
        "operationId": "get_project_users",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Get Project Users",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/code": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Codes of the Project",
        "description": "Returns all Codes of the Project with the given ID",
        "operationId": "get_project_codes",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Get Project Codes",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all Codes of the Project",
        "description": "Removes all Codes of the Project with the given ID if it exists",
        "operationId": "delete_project_codes",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Delete Project Codes",
                  "type": "array",
                  "items": { "type": "integer" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/tag": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all DocumentTags of the Project",
        "description": "Returns all DocumentTags of the Project with the given ID",
        "operationId": "get_project_tags",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Get Project Tags",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DocumentTagRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all DocumentTags of the Project",
        "description": "Removes all DocumentTags of the Project with the given ID if it exists",
        "operationId": "delete_project_tags",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Delete Project Tags",
                  "type": "array",
                  "items": { "type": "integer" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/{user_id}/code": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Codes of the Project from a User",
        "description": "Returns all Codes of the Project from a User",
        "operationId": "get_user_codes_of_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Get User Codes Of Project",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all Codes of the Project from a User",
        "description": "Removes all Codes of the Project from a User. Returns the number of removed Codes.",
        "operationId": "remove_user_codes_of_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "title": "Response Project-Remove User Codes Of Project", "type": "integer" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/{user_id}/memo": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Memos of the Project from a User",
        "description": "Returns all Memos of the Project from a User",
        "operationId": "get_user_memos_of_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" },
          {
            "description": "If true only starred Memos are returned",
            "required": false,
            "schema": {
              "title": "Only Starred",
              "type": "boolean",
              "description": "If true only starred Memos are returned",
              "default": false
            },
            "name": "only_starred",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Get User Memos Of Project",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all Memos of the Project from a User",
        "description": "Removes all Memos of the Project from a User. Returns the number of removed Memos.",
        "operationId": "remove_user_memos_of_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Remove User Memos Of Project",
                  "type": "array",
                  "items": { "type": "integer" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/{user_id}/action": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Actions of the Project from a User",
        "description": "Returns all Actions of the Project from a User",
        "operationId": "get_user_actions_of_project",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Get User Actions Of Project",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ActionRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/actions": {
      "post": {
        "tags": ["project"],
        "summary": "Returns all Actions",
        "description": "Returns all Actions of the Project",
        "operationId": "query_actions_of_project",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ActionQueryParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Query Actions Of Project",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ActionRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/memo": {
      "get": {
        "tags": ["project"],
        "summary": "Returns the Memo of the current User for the Project.",
        "description": "Returns the Memo of the current User for the Project with the given ID.",
        "operationId": "get_memos",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Project-Get Memos",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["project"],
        "summary": "Adds a Memo of the current User to the Project.",
        "description": "Adds a Memo of the current User to the Project with the given ID if it exists",
        "operationId": "add_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/memo/{user_id}": {
      "get": {
        "tags": ["project"],
        "summary": "Returns the Memo attached to the Project of the User with the given ID",
        "description": "Returns the Memo attached to the Project with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/resolve_filename/{filename}": {
      "get": {
        "tags": ["project"],
        "summary": "Returns the Id of the SourceDocument identified by project_id and filename if it exists",
        "description": "Returns the Id of the SourceDocument identified by project_id and filename if it exists",
        "operationId": "resolve_filename",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" },
          { "required": true, "schema": { "title": "Filename", "type": "string" }, "name": "filename", "in": "path" },
          {
            "required": false,
            "schema": { "title": "Only Finished", "type": "boolean", "default": true },
            "name": "only_finished",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "title": "Response Project-Resolve Filename", "type": "integer" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the SourceDocument",
        "description": "Returns the SourceDocument with the given ID if it exists",
        "operationId": "get_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": false,
            "schema": { "title": "Only If Finished", "type": "boolean", "default": true },
            "name": "only_if_finished",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sourceDocument"],
        "summary": "Removes the SourceDocument",
        "description": "Removes the SourceDocument with the given ID if it exists",
        "operationId": "delete_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/content": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the (textual) content of the SourceDocument",
        "description": "Returns the (textual) content of the SourceDocument if it exists. If the SourceDocument is not a text file, there is no content but an URL to the file content.",
        "operationId": "get_content",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": false,
            "schema": { "title": "Only Finished", "type": "boolean", "default": true },
            "name": "only_finished",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentContent" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/html": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the (html) content of the SourceDocument",
        "description": "Returns the (html) content of the SourceDocument if it exists. If the SourceDocument is not a text file, there is no content but an URL to the file content.",
        "operationId": "get_html",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": false,
            "schema": { "title": "Only Finished", "type": "boolean", "default": true },
            "name": "only_finished",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentHTML" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/tokens": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the textual tokens of the SourceDocument if it is a text document.",
        "description": "Returns the textual tokens of the SourceDocument if it is a text document.",
        "operationId": "get_tokens",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": false,
            "schema": { "title": "Only Finished", "type": "boolean", "default": true },
            "name": "only_finished",
            "in": "query"
          },
          {
            "description": "If True include the character offsets.",
            "required": false,
            "schema": {
              "title": "Include Character Offsets",
              "type": "boolean",
              "description": "If True include the character offsets.",
              "default": false
            },
            "name": "character_offsets",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentTokens" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/sentences": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the sentences of the SourceDocument if it is a text document.",
        "description": "Returns the sentences of the SourceDocument if it is a text document.",
        "operationId": "get_sentences",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": false,
            "schema": { "title": "Only Finished", "type": "boolean", "default": true },
            "name": "only_finished",
            "in": "query"
          },
          {
            "description": "If True include the character offsets.",
            "required": false,
            "schema": {
              "title": "Include Sentence Offsets",
              "type": "boolean",
              "description": "If True include the character offsets.",
              "default": false
            },
            "name": "sentence_offsets",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentSentences" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/keywords": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the keywords of the SourceDocument if it is a text document.",
        "description": "Returns the keywords of the SourceDocument if it is a text document.",
        "operationId": "get_keywords",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": false,
            "schema": { "title": "Only Finished", "type": "boolean", "default": true },
            "name": "only_finished",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentKeywords" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["sourceDocument"],
        "summary": "Updates the keywords of the SourceDocument.",
        "description": "Updates the keywords of the SourceDocument.",
        "operationId": "update_keywords",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentKeywords" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentKeywords" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/linked_sdocs": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the ids of SourceDocuments linked to the SourceDocument with the given id.",
        "description": "Returns the ids of SourceDocuments linked to the SourceDocument with the given id.",
        "operationId": "get_linked_sdocs",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Sourcedocument-Get Linked Sdocs",
                  "type": "array",
                  "items": { "type": "integer" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/url": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the URL to the original file of the SourceDocument",
        "description": "Returns the URL to the original file of the SourceDocument with the given ID if it exists.",
        "operationId": "get_file_url",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": false,
            "schema": { "title": "Relative", "type": "boolean", "default": true },
            "name": "relative",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "title": "Webp", "type": "boolean", "default": false },
            "name": "webp",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "title": "Thumbnail", "type": "boolean", "default": false },
            "name": "thumbnail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "title": "Response Sourcedocument-Get File Url", "type": "string" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/metadata": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all SourceDocumentMetadata",
        "description": "Returns all SourceDocumentMetadata of the SourceDocument with the given ID if it exists",
        "operationId": "get_all_metadata",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": false,
            "schema": {
              "title": "Exclude Csv",
              "type": "string",
              "default": "word_level_transcriptions,word_frequencies"
            },
            "name": "exclude_csv",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Sourcedocument-Get All Metadata",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/metadata/{metadata_key}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the SourceDocumentMetadata with the given Key",
        "description": "Returns the SourceDocumentMetadata with the given Key if it exists.",
        "operationId": "read_metadata_by_key",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": true,
            "schema": { "title": "Metadata Key", "type": "string" },
            "name": "metadata_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/metadata/{metadata_id}": {
      "patch": {
        "tags": ["sourceDocument"],
        "summary": "Updates the SourceDocumentMetadata",
        "description": "Updates the SourceDocumentMetadata with the given ID if it exists.",
        "operationId": "update_metadata_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          {
            "required": true,
            "schema": { "title": "Metadata Id", "type": "integer" },
            "name": "metadata_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/adoc/{user_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the AnnotationDocument for the SourceDocument of the User",
        "description": "Returns the AnnotationDocument for the SourceDocument of the User.",
        "operationId": "get_adoc_of_user",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/adoc": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all AnnotationDocuments for the SourceDocument",
        "description": "Returns all AnnotationDocuments for the SourceDocument.",
        "operationId": "get_all_adocs",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Sourcedocument-Get All Adocs",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AnnotationDocumentRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sourceDocument"],
        "summary": "Removes all AnnotationDocuments for the SourceDocument",
        "description": "Removes all AnnotationDocuments for the SourceDocument.",
        "operationId": "remove_all_adocs",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Sourcedocument-Remove All Adocs",
                  "type": "array",
                  "items": { "type": "integer" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/tags": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all DocumentTags linked with the SourceDocument",
        "description": "Returns all DocumentTags linked with the SourceDocument.",
        "operationId": "get_all_tags",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Sourcedocument-Get All Tags",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DocumentTagRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sourceDocument"],
        "summary": "Unlinks all DocumentTags with the SourceDocument",
        "description": "Unlinks all DocumentTags of the SourceDocument.",
        "operationId": "unlinks_all_tags",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/tag/{tag_id}": {
      "delete": {
        "tags": ["sourceDocument"],
        "summary": "Unlinks the DocumentTag from the SourceDocument",
        "description": "Unlinks the DocumentTags from the SourceDocument.",
        "operationId": "unlink_tag",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          { "required": true, "schema": { "title": "Tag Id", "type": "integer" }, "name": "tag_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["sourceDocument"],
        "summary": "Links a DocumentTag with the SourceDocument",
        "description": "Links a DocumentTag with the SourceDocument with the given ID if it exists",
        "operationId": "link_tag",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          { "required": true, "schema": { "title": "Tag Id", "type": "integer" }, "name": "tag_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/memo": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all Memo attached to the SourceDocument",
        "description": "Returns all Memo attached to the SourceDocument with the given ID if it exists.",
        "operationId": "get_memos",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Sourcedocument-Get Memos",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["sourceDocument"],
        "summary": "Adds a Memo to the SourceDocument",
        "description": "Adds a Memo to the SourceDocument with the given ID if it exists",
        "operationId": "add_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/memo/{user_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the Memo attached to the SourceDocument of the User with the given ID",
        "description": "Returns the Memo attached to the SourceDocument with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/relatedmemos/{user_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the Memo attached to the SourceDocument of the User with the given ID and all memos attached to its annotations.",
        "description": "Returns the Memo attached to the SourceDocument of the User with the given ID and all memos attached to its annotations.",
        "operationId": "get_related_user_memos",
        "parameters": [
          { "required": true, "schema": { "title": "Sdoc Id", "type": "integer" }, "name": "sdoc_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Sourcedocument-Get Related User Memos",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag": {
      "put": {
        "tags": ["documentTag"],
        "summary": "Creates a new DocumentTag",
        "description": "Creates a new DocumentTag and returns it with the generated ID.",
        "operationId": "create_new_doc_tag",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/bulk/link": {
      "patch": {
        "tags": ["documentTag"],
        "summary": "Links multiple DocumentTags with the SourceDocuments",
        "description": "Links multiple DocumentTags with the SourceDocuments and returns the number of new Links",
        "operationId": "link_multiple_tags",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentDocumentTagMultiLink" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "title": "Response Documenttag-Link Multiple Tags", "type": "integer" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/bulk/unlink": {
      "delete": {
        "tags": ["documentTag"],
        "summary": "Unlinks all DocumentTags with the SourceDocuments",
        "description": "Unlinks all DocumentTags with the SourceDocuments and returns the number of removed Links.",
        "operationId": "unlink_multiple_tags",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentDocumentTagMultiLink" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "title": "Response Documenttag-Unlink Multiple Tags", "type": "integer" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/{tag_id}": {
      "get": {
        "tags": ["documentTag"],
        "summary": "Returns the DocumentTag",
        "description": "Returns the DocumentTag with the given ID.",
        "operationId": "get_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Tag Id", "type": "integer" }, "name": "tag_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["documentTag"],
        "summary": "Deletes the DocumentTag",
        "description": "Deletes the DocumentTag with the given ID.",
        "operationId": "delete_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Tag Id", "type": "integer" }, "name": "tag_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["documentTag"],
        "summary": "Updates the DocumentTag",
        "description": "Updates the DocumentTag with the given ID.",
        "operationId": "update_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Tag Id", "type": "integer" }, "name": "tag_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagUpdate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/{tag_id}/memo": {
      "get": {
        "tags": ["documentTag"],
        "summary": "Returns the Memo attached to the DocumentTag",
        "description": "Returns the Memo attached to the DocumentTag with the given ID if it exists.",
        "operationId": "get_memos",
        "parameters": [
          { "required": true, "schema": { "title": "Tag Id", "type": "integer" }, "name": "tag_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Documenttag-Get Memos",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["documentTag"],
        "summary": "Adds a Memo to the DocumentTag",
        "description": "Adds a Memo to the DocumentTag with the given ID if it exists",
        "operationId": "add_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Tag Id", "type": "integer" }, "name": "tag_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/{tag_id}/memo/{user_id}": {
      "get": {
        "tags": ["documentTag"],
        "summary": "Returns the Memo attached to the SpanAnnotation of the User with the given ID",
        "description": "Returns the Memo attached to the SpanAnnotation with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Tag Id", "type": "integer" }, "name": "tag_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/adoc": {
      "put": {
        "tags": ["annotationDocument"],
        "summary": "Creates an AnnotationDocument",
        "description": "Creates an AnnotationDocument",
        "operationId": "create",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/adoc/{adoc_id}": {
      "get": {
        "tags": ["annotationDocument"],
        "summary": "Returns the AnnotationDocument",
        "description": "Returns the AnnotationDocument with the given ID if it exists",
        "operationId": "get_by_adoc_id",
        "parameters": [
          { "required": true, "schema": { "title": "Adoc Id", "type": "integer" }, "name": "adoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["annotationDocument"],
        "summary": "Removes the AnnotationDocument",
        "description": "Removes the AnnotationDocument with the given ID if it exists",
        "operationId": "delete_by_adoc_id",
        "parameters": [
          { "required": true, "schema": { "title": "Adoc Id", "type": "integer" }, "name": "adoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/adoc/{adoc_id}/span_annotations": {
      "get": {
        "tags": ["annotationDocument"],
        "summary": "Returns all SpanAnnotations in the AnnotationDocument",
        "description": "Returns all SpanAnnotations in the AnnotationDocument with the given ID if it exists",
        "operationId": "get_all_span_annotations",
        "parameters": [
          { "required": true, "schema": { "title": "Adoc Id", "type": "integer" }, "name": "adoc_id", "in": "path" },
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
            "required": false,
            "schema": {
              "title": "Resolve Code",
              "type": "boolean",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "name": "resolve",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Annotationdocument-Get All Span Annotations",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/components/schemas/SpanAnnotationRead" },
                      { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                    ]
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["annotationDocument"],
        "summary": "Removes all SpanAnnotations in the AnnotationDocument",
        "description": "Removes all SpanAnnotations in the AnnotationDocument with the given ID if it exists",
        "operationId": "delete_all_span_annotations",
        "parameters": [
          { "required": true, "schema": { "title": "Adoc Id", "type": "integer" }, "name": "adoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Annotationdocument-Delete All Span Annotations",
                  "type": "array",
                  "items": { "type": "integer" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/adoc/{adoc_id}/bbox_annotations": {
      "get": {
        "tags": ["annotationDocument"],
        "summary": "Returns all BBoxAnnotations in the AnnotationDocument",
        "description": "Returns all BBoxAnnotations in the AnnotationDocument with the given ID if it exists",
        "operationId": "get_all_bbox_annotations",
        "parameters": [
          { "required": true, "schema": { "title": "Adoc Id", "type": "integer" }, "name": "adoc_id", "in": "path" },
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
            "required": false,
            "schema": {
              "title": "Resolve Code",
              "type": "boolean",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "name": "resolve",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Annotationdocument-Get All Bbox Annotations",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                      { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                    ]
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["annotationDocument"],
        "summary": "Removes all BBoxAnnotations in the AnnotationDocument",
        "description": "Removes all BBoxAnnotations in the AnnotationDocument with the given ID if it exists",
        "operationId": "delete_all_bbox_annotations",
        "parameters": [
          { "required": true, "schema": { "title": "Adoc Id", "type": "integer" }, "name": "adoc_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Annotationdocument-Delete All Bbox Annotations",
                  "type": "array",
                  "items": { "type": "integer" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/adoc/{adoc_id}/span_groups": {
      "get": {
        "tags": ["annotationDocument"],
        "summary": "Returns all SpanGroups in the AnnotationDocument",
        "description": "Returns all SpanGroups in the AnnotationDocument with the given ID if it exists",
        "operationId": "get_all_span_groups",
        "parameters": [
          { "required": true, "schema": { "title": "Adoc Id", "type": "integer" }, "name": "adoc_id", "in": "path" },
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Annotationdocument-Get All Span Groups",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanGroupRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span": {
      "put": {
        "tags": ["spanAnnotation"],
        "summary": "Creates a SpanAnnotation",
        "description": "Creates a SpanAnnotation",
        "operationId": "add_span_annotation",
        "parameters": [
          {
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
            "required": false,
            "schema": {
              "title": "Resolve Code",
              "type": "boolean",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "name": "resolve",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Spanannotation-Add Span Annotation",
                  "anyOf": [
                    { "$ref": "#/components/schemas/SpanAnnotationRead" },
                    { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the SpanAnnotation",
        "description": "Returns the SpanAnnotation with the given ID.",
        "operationId": "get_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" },
          {
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
            "required": false,
            "schema": {
              "title": "Resolve Code",
              "type": "boolean",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "name": "resolve",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Spanannotation-Get By Id",
                  "anyOf": [
                    { "$ref": "#/components/schemas/SpanAnnotationRead" },
                    { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanAnnotation"],
        "summary": "Deletes the SpanAnnotation",
        "description": "Deletes the SpanAnnotation with the given ID.",
        "operationId": "delete_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Spanannotation-Delete By Id",
                  "anyOf": [
                    { "$ref": "#/components/schemas/SpanAnnotationRead" },
                    { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["spanAnnotation"],
        "summary": "Updates the SpanAnnotation",
        "description": "Updates the SpanAnnotation with the given ID.",
        "operationId": "update_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" },
          {
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
            "required": false,
            "schema": {
              "title": "Resolve Code",
              "type": "boolean",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "name": "resolve",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationUpdate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Spanannotation-Update By Id",
                  "anyOf": [
                    { "$ref": "#/components/schemas/SpanAnnotationRead" },
                    { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/code": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the Code of the SpanAnnotation",
        "description": "Returns the Code of the SpanAnnotation with the given ID if it exists.",
        "operationId": "get_code",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/groups": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns all SpanGroups that contain the the SpanAnnotation",
        "description": "Returns all SpanGroups that contain the the SpanAnnotation.",
        "operationId": "get_all_groups",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Spanannotation-Get All Groups",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanGroupRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanAnnotation"],
        "summary": "Removes the SpanAnnotation from all SpanGroups",
        "description": "Removes the SpanAnnotation from all SpanGroups",
        "operationId": "remove_from_all_groups",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/group/{group_id}": {
      "delete": {
        "tags": ["spanAnnotation"],
        "summary": "Removes the SpanAnnotation from the SpanGroup",
        "description": "Removes the SpanAnnotation from the SpanGroup",
        "operationId": "remove_from_group",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" },
          { "required": true, "schema": { "title": "Group Id", "type": "integer" }, "name": "group_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["spanAnnotation"],
        "summary": "Adds the SpanAnnotation to the SpanGroup",
        "description": "Adds the SpanAnnotation to the SpanGroup",
        "operationId": "add_to_group",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" },
          { "required": true, "schema": { "title": "Group Id", "type": "integer" }, "name": "group_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/memo": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the Memo attached to the SpanAnnotation",
        "description": "Returns the Memo attached to the SpanAnnotation with the given ID if it exists.",
        "operationId": "get_memos",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Spanannotation-Get Memos",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["spanAnnotation"],
        "summary": "Adds a Memo to the SpanAnnotation",
        "description": "Adds a Memo to the SpanAnnotation with the given ID if it exists",
        "operationId": "add_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/memo/{user_id}": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the Memo attached to the SpanAnnotation of the User with the given ID",
        "description": "Returns the Memo attached to the SpanAnnotation with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Span Id", "type": "integer" }, "name": "span_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/spangroup": {
      "put": {
        "tags": ["spanGroup"],
        "summary": "Creates a new SpanGroup",
        "description": "Creates a new SpanGroup and returns it with the generated ID.",
        "operationId": "create_new_span_group",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/spangroup/{span_group_id}": {
      "get": {
        "tags": ["spanGroup"],
        "summary": "Returns the SpanGroup",
        "description": "Returns the SpanGroup with the given ID.",
        "operationId": "get_by_id",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Span Group Id", "type": "integer" },
            "name": "span_group_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanGroup"],
        "summary": "Deletes the SpanGroup",
        "description": "Deletes the SpanGroup with the given ID.",
        "operationId": "delete_by_id",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Span Group Id", "type": "integer" },
            "name": "span_group_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["spanGroup"],
        "summary": "Updates the SpanGroup",
        "description": "Updates the SpanGroup with the given ID.",
        "operationId": "update_by_id",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Span Group Id", "type": "integer" },
            "name": "span_group_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupUpdate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/spangroup/{span_group_id}/span_annotations": {
      "get": {
        "tags": ["spanGroup"],
        "summary": "Returns all SpanAnnotations in the SpanGroup",
        "description": "Returns all SpanAnnotations in the SpanGroup with the given ID if it exists",
        "operationId": "get_all_annotations",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Span Group Id", "type": "integer" },
            "name": "span_group_id",
            "in": "path"
          },
          {
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
            "required": false,
            "schema": {
              "title": "Resolve Code",
              "type": "boolean",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "name": "resolve",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Spangroup-Get All Annotations",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/components/schemas/SpanAnnotationRead" },
                      { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                    ]
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox": {
      "put": {
        "tags": ["bboxAnnotation"],
        "summary": "Creates a BBoxAnnotation",
        "description": "Creates a BBoxAnnotation",
        "operationId": "add_bbox_annotation",
        "parameters": [
          {
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
            "required": false,
            "schema": {
              "title": "Resolve Code",
              "type": "boolean",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "name": "resolve",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Bboxannotation-Add Bbox Annotation",
                  "anyOf": [
                    { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                    { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/{bbox_id}": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the BBoxAnnotation",
        "description": "Returns the BBoxAnnotation with the given ID.",
        "operationId": "get_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Bbox Id", "type": "integer" }, "name": "bbox_id", "in": "path" },
          {
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
            "required": false,
            "schema": {
              "title": "Resolve Code",
              "type": "boolean",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "name": "resolve",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Bboxannotation-Get By Id",
                  "anyOf": [
                    { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                    { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["bboxAnnotation"],
        "summary": "Deletes the BBoxAnnotation",
        "description": "Deletes the BBoxAnnotation with the given ID.",
        "operationId": "delete_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Bbox Id", "type": "integer" }, "name": "bbox_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Bboxannotation-Delete By Id",
                  "anyOf": [
                    { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                    { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["bboxAnnotation"],
        "summary": "Updates the BBoxAnnotation",
        "description": "Updates the BBoxAnnotation with the given ID.",
        "operationId": "update_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Bbox Id", "type": "integer" }, "name": "bbox_id", "in": "path" },
          {
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
            "required": false,
            "schema": {
              "title": "Resolve Code",
              "type": "boolean",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "name": "resolve",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationUpdate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Bboxannotation-Update By Id",
                  "anyOf": [
                    { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                    { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/{bbox_id}/code": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the Code of the BBoxAnnotation",
        "description": "Returns the Code of the BBoxAnnotation with the given ID if it exists.",
        "operationId": "get_code",
        "parameters": [
          { "required": true, "schema": { "title": "Bbox Id", "type": "integer" }, "name": "bbox_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/{bbox_id}/memo": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the Memo attached to the BBoxAnnotation",
        "description": "Returns the Memo attached to the BBoxAnnotation with the given ID if it exists.",
        "operationId": "get_memos",
        "parameters": [
          { "required": true, "schema": { "title": "Bbox Id", "type": "integer" }, "name": "bbox_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Bboxannotation-Get Memos",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["bboxAnnotation"],
        "summary": "Adds a Memo to the BBoxAnnotation",
        "description": "Adds a Memo to the BBoxAnnotation with the given ID if it exists",
        "operationId": "add_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Bbox Id", "type": "integer" }, "name": "bbox_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/{bbox_id}/memo/{user_id}": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the Memo attached to the BBoxAnnotation of the User with the given ID",
        "description": "Returns the Memo attached to the BBoxAnnotation with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Bbox Id", "type": "integer" }, "name": "bbox_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code": {
      "put": {
        "tags": ["code"],
        "summary": "Creates a new Code",
        "description": "Creates a new Code and returns it with the generated ID.",
        "operationId": "create_new_code",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code/current/{current_code_id}": {
      "get": {
        "tags": ["code"],
        "summary": "Returns the Code linked by the CurrentCode",
        "description": "Returns the Code linked by the CurrentCode with the given ID.",
        "operationId": "get_code_by_current_code_id",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Current Code Id", "type": "integer" },
            "name": "current_code_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code/{code_id}": {
      "get": {
        "tags": ["code"],
        "summary": "Returns the Code",
        "description": "Returns the Code with the given ID.",
        "operationId": "get_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Code Id", "type": "integer" }, "name": "code_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["code"],
        "summary": "Deletes the Code",
        "description": "Deletes the Code with the given ID.",
        "operationId": "delete_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Code Id", "type": "integer" }, "name": "code_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["code"],
        "summary": "Updates the Code",
        "description": "Updates the Code with the given ID.",
        "operationId": "update_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Code Id", "type": "integer" }, "name": "code_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeUpdate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code/{code_id}/memo": {
      "get": {
        "tags": ["code"],
        "summary": "Returns the Memo attached to the Code",
        "description": "Returns the Memo attached to the Code with the given ID if it exists.",
        "operationId": "get_memos",
        "parameters": [
          { "required": true, "schema": { "title": "Code Id", "type": "integer" }, "name": "code_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Code-Get Memos",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["code"],
        "summary": "Adds a Memo to the Code",
        "description": "Adds a Memo to the Code with the given ID if it exists",
        "operationId": "add_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Code Id", "type": "integer" }, "name": "code_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code/{code_id}/memo/{user_id}": {
      "get": {
        "tags": ["code"],
        "summary": "Returns the Memo attached to the SpanAnnotation of the User with the given ID",
        "description": "Returns the Memo attached to the SpanAnnotation with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "parameters": [
          { "required": true, "schema": { "title": "Code Id", "type": "integer" }, "name": "code_id", "in": "path" },
          { "required": true, "schema": { "title": "User Id", "type": "integer" }, "name": "user_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/memo/{memo_id}": {
      "get": {
        "tags": ["memo"],
        "summary": "Returns the Memo",
        "description": "Returns the Memo with the given ID if it exists",
        "operationId": "get_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Memo Id", "type": "integer" }, "name": "memo_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["memo"],
        "summary": "Removes the Memo",
        "description": "Removes the Memo with the given ID if it exists",
        "operationId": "delete_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Memo Id", "type": "integer" }, "name": "memo_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["memo"],
        "summary": "Updates the Memo",
        "description": "Updates the Memo with the given ID if it exists",
        "operationId": "update_by_id",
        "parameters": [
          { "required": true, "schema": { "title": "Memo Id", "type": "integer" }, "name": "memo_id", "in": "path" }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoUpdate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/sdoc": {
      "post": {
        "tags": ["search"],
        "summary": "Returns all SourceDocument IDs that match the query parameters.",
        "description": "Returns all SourceDocument Ids that match the query parameters.",
        "operationId": "search_sdocs",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SearchSDocsQueryParameters" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "title": "Response Search-Search Sdocs", "type": "array", "items": { "type": "integer" } }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/entity_stats": {
      "post": {
        "tags": ["search"],
        "summary": "Returns SpanEntityStats for the given SourceDocuments.",
        "description": "Returns SpanEntityStats for the given SourceDocuments.",
        "operationId": "search_span_entity_stats",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SearchSDocsQueryParameters" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search-Search Span Entity Stats",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanEntityFrequency" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/code_stats": {
      "post": {
        "tags": ["search"],
        "summary": "Returns SpanEntityStats for the given SourceDocuments.",
        "description": "Returns SpanEntityStats for the given SourceDocuments.",
        "operationId": "search_code_stats",
        "parameters": [
          {
            "required": false,
            "schema": { "title": "Sort By Global", "type": "boolean", "default": false },
            "name": "sort_by_global",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SearchSDocsQueryParameters" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SpanEntityDocumentFrequencyResult" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/keyword_stats": {
      "post": {
        "tags": ["search"],
        "summary": "Returns KeywordStats for the given SourceDocuments.",
        "description": "Returns KeywordStats for the given SourceDocuments.",
        "operationId": "search_keyword_stats",
        "parameters": [
          {
            "required": false,
            "schema": { "title": "Sort By Global", "type": "boolean", "default": false },
            "name": "sort_by_global",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "title": "Top K", "type": "integer", "default": 50 },
            "name": "top_k",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SearchSDocsQueryParameters" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search-Search Keyword Stats",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/KeywordStat" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/tag_stats": {
      "post": {
        "tags": ["search"],
        "summary": "Returns TagStat for the given SourceDocuments.",
        "description": "Returns Stat for the given SourceDocuments.",
        "operationId": "search_tag_stats",
        "parameters": [
          {
            "required": false,
            "schema": { "title": "Sort By Global", "type": "boolean", "default": false },
            "name": "sort_by_global",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SearchSDocsQueryParameters" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search-Search Tag Stats",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TagStat" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/lexical/sdoc/content": {
      "post": {
        "tags": ["search"],
        "summary": "Returns all SourceDocuments where the content matches the query via lexical search",
        "description": "Returns all SourceDocuments where the content matches the query via lexical search",
        "operationId": "search_sdocs_by_content_query",
        "parameters": [
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentContentQuery" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedElasticSearchDocumentHits" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/lexical/sdoc/filename": {
      "post": {
        "tags": ["search"],
        "summary": "Returns all SourceDocuments where the filename matches the query via lexical search",
        "description": "Returns all SourceDocuments where the filename matches the query via lexical search",
        "operationId": "search_sdocs_by_filename_query",
        "parameters": [
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentFilenameQuery" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedElasticSearchDocumentHits" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/lexical/memo/content": {
      "post": {
        "tags": ["search"],
        "summary": "Returns all Memos where the content matches the query via lexical search",
        "description": "Returns all Memos where the content matches the query via lexical search",
        "operationId": "search_memos_by_content_query",
        "parameters": [
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoContentQuery" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedMemoSearchResults" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/lexical/memo/title": {
      "post": {
        "tags": ["search"],
        "summary": "Returns all Memos where the title matches the query via lexical search",
        "description": "Returns all Memos where the title matches the query via lexical search",
        "operationId": "search_memos_by_title_query",
        "parameters": [
          {
            "description": "The number of elements to skip (offset)",
            "required": false,
            "schema": {
              "title": "Skip",
              "maximum": 10000000,
              "minimum": 0,
              "type": "integer",
              "description": "The number of elements to skip (offset)"
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "The maximum number of returned elements",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of returned elements"
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoTitleQuery" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedMemoSearchResults" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/simsearch/sentences": {
      "post": {
        "tags": ["search"],
        "summary": "Returns similar sentences according to a textual or visual query.",
        "description": "Returns similar sentences according to a textual or visual query.",
        "operationId": "find_similar_sentences",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "query" },
          {
            "required": true,
            "schema": { "title": "Query", "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "name": "query",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "title": "Top K", "type": "integer", "default": 10 },
            "name": "top_k",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search-Find Similar Sentences",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SimSearchSentenceHit" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/simsearch/images": {
      "post": {
        "tags": ["search"],
        "summary": "Returns similar images according to a textual or visual query.",
        "description": "Returns similar images according to a textual or visual query.",
        "operationId": "find_similar_images",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "query" },
          {
            "required": true,
            "schema": { "title": "Query", "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "name": "query",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "title": "Top K", "type": "integer", "default": 10 },
            "name": "top_k",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search-Find Similar Images",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SimSearchImageHit" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/metadata": {
      "put": {
        "tags": ["metadata"],
        "summary": "Creates new Metadata",
        "description": "Creates a new Metadata and returns it with the generated ID.",
        "operationId": "create_new_metadata",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/metadata/{metadata_id}": {
      "get": {
        "tags": ["metadata"],
        "summary": "Returns the Metadata",
        "description": "Returns the Metadata with the given ID.",
        "operationId": "get_by_id",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Metadata Id", "type": "integer" },
            "name": "metadata_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["metadata"],
        "summary": "Deletes the Metadata",
        "description": "Deletes the Metadata with the given ID.",
        "operationId": "delete_by_id",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Metadata Id", "type": "integer" },
            "name": "metadata_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["metadata"],
        "summary": "Updates the Metadata",
        "description": "Updates the Metadata with the given ID.",
        "operationId": "update_by_id",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Metadata Id", "type": "integer" },
            "name": "metadata_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataUpdate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/feedback": {
      "get": {
        "tags": ["feedback"],
        "summary": "Returns all Feedback",
        "description": "Returns the Metadata with the given ID.",
        "operationId": "get_all",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Feedback-Get All",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FeedbackRead" }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["feedback"],
        "summary": "Creates new Feedback",
        "description": "Creates a new Feedback and returns it with the generated ID.",
        "operationId": "create_feedback",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeedbackCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeedbackRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/feedback/{feedback_id}": {
      "get": {
        "tags": ["feedback"],
        "summary": "Returns the Feedback",
        "description": "Returns the Feedback with the given ID.",
        "operationId": "get_by_id",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Feedback Id", "type": "string" },
            "name": "feedback_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeedbackRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/frequency_analysis": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns all SourceDocument IDs that match the query parameters.",
        "description": "Returns all SourceDocument Ids that match the query parameters.",
        "operationId": "frequency_analysis",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisQueryParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "title": "Response Analysis-Frequency Analysis", "type": "object" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/prepro/project/{proj_id}/status": {
      "get": {
        "tags": ["prepro"],
        "summary": "Returns the PreProProjectStatus of the Project with the given ID.",
        "description": "Returns the PreProProjectStatus of the Project with the given ID.",
        "operationId": "get_project_prepro_status",
        "parameters": [
          { "required": true, "schema": { "title": "Proj Id", "type": "integer" }, "name": "proj_id", "in": "path" }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PreProProjectStatus" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/export": {
      "post": {
        "tags": ["export"],
        "summary": "Returns the ExportJob for the given Parameters",
        "description": "Returns the ExportJob for the given Parameters",
        "operationId": "start_export_job",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportJobParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/export/{export_job_id}": {
      "get": {
        "tags": ["export"],
        "summary": "Returns the ExportJob for the given ID",
        "description": "Returns the ExportJob for the given ID if it exists",
        "operationId": "get_export_job",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Export Job Id", "type": "string" },
            "name": "export_job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/crawler": {
      "post": {
        "tags": ["crawler"],
        "summary": "Returns the CrawlerJob for the given Parameters",
        "description": "Returns the CrawlerJob for the given Parameters",
        "operationId": "start_crawler_job",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerJobParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/crawler/{crawler_job_id}": {
      "get": {
        "tags": ["crawler"],
        "summary": "Returns the CrawlerJob for the given ID",
        "description": "Returns the CrawlerJob for the given ID if it exists",
        "operationId": "get_crawler_job",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Crawler Job Id", "type": "string" },
            "name": "crawler_job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/crawler/project/{project_id}": {
      "get": {
        "tags": ["crawler"],
        "summary": "Returns all CrawlerJobs for the given project ID",
        "description": "Returns all CrawlerJobs for the given project ID if it exists",
        "operationId": "get_all_crawler_jobs",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Project Id", "type": "integer" },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Crawler-Get All Crawler Jobs",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CrawlerJobRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionQueryParameters": {
        "title": "ActionQueryParameters",
        "required": ["proj_id", "user_ids", "action_types", "action_targets", "timestamp_from", "timestamp_to"],
        "type": "object",
        "properties": {
          "proj_id": { "title": "Proj Id", "type": "integer", "description": "ID of the Project" },
          "user_ids": {
            "title": "User Ids",
            "type": "array",
            "items": { "type": "integer" },
            "description": "IDs of the Users"
          },
          "action_types": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ActionType" },
            "description": "Types of the Actions"
          },
          "action_targets": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ActionTargetObjectType" },
            "description": "Types of the Action Targets"
          },
          "timestamp_from": {
            "title": "Timestamp From",
            "type": "integer",
            "description": "Start date of the Actions"
          },
          "timestamp_to": { "title": "Timestamp To", "type": "integer", "description": "End date of the Actions" }
        }
      },
      "ActionRead": {
        "title": "ActionRead",
        "required": ["action_type", "target_id", "target_type", "id", "user_id", "project_id", "executed"],
        "type": "object",
        "properties": {
          "action_type": {
            "allOf": [{ "$ref": "#/components/schemas/ActionType" }],
            "description": "Type of the Action"
          },
          "target_id": { "title": "Target Id", "type": "integer", "description": "ID of the Target of the Action" },
          "target_type": {
            "allOf": [{ "$ref": "#/components/schemas/ActionTargetObjectType" }],
            "description": "Type of the Target the target_id refers to"
          },
          "before_state": {
            "title": "Before State",
            "type": "string",
            "description": "The before state of the target object in JSON."
          },
          "after_state": {
            "title": "After State",
            "type": "string",
            "description": "The after state of the target object in JSON."
          },
          "id": { "title": "Id", "type": "integer", "description": "ID of the Action" },
          "user_id": { "title": "User Id", "type": "integer", "description": "User the Action belongs to" },
          "project_id": { "title": "Project Id", "type": "integer", "description": "Project the Action belongs to" },
          "executed": {
            "title": "Executed",
            "type": "string",
            "description": "Executed timestamp of the Action",
            "format": "date-time"
          }
        }
      },
      "ActionTargetObjectType": {
        "title": "ActionTargetObjectType",
        "enum": [
          "memo",
          "annotation_document",
          "source_document",
          "code",
          "span_annotation",
          "span_group",
          "bbox_annotation",
          "project",
          "document_tag"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ActionType": {
        "title": "ActionType",
        "enum": ["CREATE", "UPDATE", "DELETE"],
        "type": "string",
        "description": "An enumeration."
      },
      "AnalysisQueryParameters": {
        "title": "AnalysisQueryParameters",
        "required": ["user_ids", "proj_id"],
        "type": "object",
        "properties": {
          "user_ids": {
            "title": "User Ids",
            "type": "array",
            "items": { "type": "integer" },
            "description": "The user ids dictate which codes are analysed."
          },
          "proj_id": { "title": "Proj Id", "type": "integer", "description": "The ID of the Project to analyse." }
        }
      },
      "AnnotationDocumentCreate": {
        "title": "AnnotationDocumentCreate",
        "required": ["source_document_id", "user_id"],
        "type": "object",
        "properties": {
          "source_document_id": {
            "title": "Source Document Id",
            "type": "integer",
            "description": "SourceDocument the AnnotationDocument relates to"
          },
          "user_id": { "title": "User Id", "type": "integer", "description": "User the AnnotationDocument belongs to" }
        }
      },
      "AnnotationDocumentRead": {
        "title": "AnnotationDocumentRead",
        "required": ["source_document_id", "user_id", "id", "created", "updated"],
        "type": "object",
        "properties": {
          "source_document_id": {
            "title": "Source Document Id",
            "type": "integer",
            "description": "SourceDocument the AnnotationDocument relates to"
          },
          "user_id": { "title": "User Id", "type": "integer", "description": "User the AnnotationDocument belongs to" },
          "id": { "title": "Id", "type": "integer", "description": "ID of the AnnotationDocument" },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the AnnotationDocument",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the AnnotationDocument",
            "format": "date-time"
          }
        }
      },
      "AttachedObjectType": {
        "title": "AttachedObjectType",
        "enum": [
          "annotation_document",
          "source_document",
          "code",
          "span_annotation",
          "span_group",
          "bbox_annotation",
          "project",
          "document_tag"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "BBoxAnnotationCreate": {
        "title": "BBoxAnnotationCreate",
        "required": ["x_min", "x_max", "y_min", "y_max", "current_code_id", "annotation_document_id"],
        "type": "object",
        "properties": {
          "x_min": {
            "title": "X Min",
            "type": "integer",
            "description": "Absolute x_min coordinate of the BBoxAnnotation"
          },
          "x_max": {
            "title": "X Max",
            "type": "integer",
            "description": "Absolute x_max coordinate of the BBoxAnnotation"
          },
          "y_min": {
            "title": "Y Min",
            "type": "integer",
            "description": "Absolute y_min coordinate of the BBoxAnnotation"
          },
          "y_max": {
            "title": "Y Max",
            "type": "integer",
            "description": "Absolute y_max coordinate of the BBoxAnnotation"
          },
          "current_code_id": {
            "title": "Current Code Id",
            "type": "integer",
            "description": "CurrentCode the BBoxAnnotation refers to"
          },
          "annotation_document_id": {
            "title": "Annotation Document Id",
            "type": "integer",
            "description": "AnnotationDocument the BBoxAnnotation refers to"
          }
        }
      },
      "BBoxAnnotationRead": {
        "title": "BBoxAnnotationRead",
        "required": [
          "x_min",
          "x_max",
          "y_min",
          "y_max",
          "id",
          "current_code_id",
          "annotation_document_id",
          "created",
          "updated"
        ],
        "type": "object",
        "properties": {
          "x_min": {
            "title": "X Min",
            "type": "integer",
            "description": "Absolute x_min coordinate of the BBoxAnnotation"
          },
          "x_max": {
            "title": "X Max",
            "type": "integer",
            "description": "Absolute x_max coordinate of the BBoxAnnotation"
          },
          "y_min": {
            "title": "Y Min",
            "type": "integer",
            "description": "Absolute y_min coordinate of the BBoxAnnotation"
          },
          "y_max": {
            "title": "Y Max",
            "type": "integer",
            "description": "Absolute y_max coordinate of the BBoxAnnotation"
          },
          "id": { "title": "Id", "type": "integer", "description": "ID of the BBoxAnnotation" },
          "current_code_id": {
            "title": "Current Code Id",
            "type": "integer",
            "description": "CurrentCode the BBoxAnnotation refers to"
          },
          "annotation_document_id": {
            "title": "Annotation Document Id",
            "type": "integer",
            "description": "AnnotationDocument the BBoxAnnotation refers to"
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the BBoxAnnotation",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the BBoxAnnotation",
            "format": "date-time"
          }
        }
      },
      "BBoxAnnotationReadResolvedCode": {
        "title": "BBoxAnnotationReadResolvedCode",
        "required": ["x_min", "x_max", "y_min", "y_max", "id", "code", "annotation_document_id", "created", "updated"],
        "type": "object",
        "properties": {
          "x_min": {
            "title": "X Min",
            "type": "integer",
            "description": "Absolute x_min coordinate of the BBoxAnnotation"
          },
          "x_max": {
            "title": "X Max",
            "type": "integer",
            "description": "Absolute x_max coordinate of the BBoxAnnotation"
          },
          "y_min": {
            "title": "Y Min",
            "type": "integer",
            "description": "Absolute y_min coordinate of the BBoxAnnotation"
          },
          "y_max": {
            "title": "Y Max",
            "type": "integer",
            "description": "Absolute y_max coordinate of the BBoxAnnotation"
          },
          "id": { "title": "Id", "type": "integer", "description": "ID of the BBoxAnnotation" },
          "code": {
            "title": "Code",
            "allOf": [{ "$ref": "#/components/schemas/CodeRead" }],
            "description": "Code the BBoxAnnotation refers to"
          },
          "annotation_document_id": {
            "title": "Annotation Document Id",
            "type": "integer",
            "description": "AnnotationDocument the BBoxAnnotation refers to"
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the BBoxAnnotation",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the BBoxAnnotation",
            "format": "date-time"
          }
        }
      },
      "BBoxAnnotationUpdate": {
        "title": "BBoxAnnotationUpdate",
        "required": ["x_min", "x_max", "y_min", "y_max", "current_code_id"],
        "type": "object",
        "properties": {
          "x_min": {
            "title": "X Min",
            "type": "integer",
            "description": "Absolute x_min coordinate of the BBoxAnnotation"
          },
          "x_max": {
            "title": "X Max",
            "type": "integer",
            "description": "Absolute x_max coordinate of the BBoxAnnotation"
          },
          "y_min": {
            "title": "Y Min",
            "type": "integer",
            "description": "Absolute y_min coordinate of the BBoxAnnotation"
          },
          "y_max": {
            "title": "Y Max",
            "type": "integer",
            "description": "Absolute y_max coordinate of the BBoxAnnotation"
          },
          "current_code_id": {
            "title": "Current Code Id",
            "type": "integer",
            "description": "CurrentCode the BBoxAnnotation refers to"
          }
        }
      },
      "Body_project-upload_project_sdoc": {
        "title": "Body_project-upload_project_sdoc",
        "required": ["doc_files"],
        "type": "object",
        "properties": {
          "doc_files": {
            "title": "Doc Files",
            "type": "array",
            "items": { "type": "string", "format": "binary" },
            "description": "File(s) that get uploaded and represented by the SourceDocument(s)"
          }
        }
      },
      "Body_user-login": {
        "title": "Body_user-login",
        "required": ["username", "password"],
        "type": "object",
        "properties": {
          "grant_type": { "title": "Grant Type", "pattern": "password", "type": "string" },
          "username": { "title": "Username", "type": "string" },
          "password": { "title": "Password", "type": "string" },
          "scope": { "title": "Scope", "type": "string", "default": "" },
          "client_id": { "title": "Client Id", "type": "string" },
          "client_secret": { "title": "Client Secret", "type": "string" }
        }
      },
      "CodeCreate": {
        "title": "CodeCreate",
        "required": ["name", "description", "project_id", "user_id"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string", "description": "Name of the Code" },
          "color": { "title": "Color", "type": "string", "description": "Color of the Code" },
          "description": { "title": "Description", "type": "string", "description": "Description of the Code" },
          "parent_code_id": { "title": "Parent Code Id", "type": "integer", "description": "Parent of the Code" },
          "project_id": { "title": "Project Id", "type": "integer", "description": "Project the Code belongs to" },
          "user_id": { "title": "User Id", "type": "integer", "description": "User the Code belongs to" }
        }
      },
      "CodeRead": {
        "title": "CodeRead",
        "required": ["name", "color", "description", "id", "project_id", "user_id", "created", "updated"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string", "description": "Name of the Code" },
          "color": { "title": "Color", "type": "string", "description": "Color of the Code" },
          "description": { "title": "Description", "type": "string", "description": "Description of the Code" },
          "parent_code_id": { "title": "Parent Code Id", "type": "integer", "description": "Parent of the Code" },
          "id": { "title": "Id", "type": "integer", "description": "ID of the Code" },
          "project_id": { "title": "Project Id", "type": "integer", "description": "Project the Code belongs to" },
          "user_id": { "title": "User Id", "type": "integer", "description": "User the Code belongs to" },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the Code",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the Code",
            "format": "date-time"
          }
        }
      },
      "CodeUpdate": {
        "title": "CodeUpdate",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string", "description": "Name of the Code" },
          "color": { "title": "Color", "type": "string", "description": "Color of the Code" },
          "description": { "title": "Description", "type": "string", "description": "Description of the Code" },
          "parent_code_id": { "title": "Parent Code Id", "type": "integer", "description": "Parent of the Code" }
        }
      },
      "CrawlerJobParameters": {
        "title": "CrawlerJobParameters",
        "required": ["project_id", "urls"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "The ID of the Project to import the crawled data."
          },
          "urls": {
            "title": "Urls",
            "type": "array",
            "items": { "type": "string" },
            "description": "List of URLs to crawl."
          }
        }
      },
      "CrawlerJobRead": {
        "title": "CrawlerJobRead",
        "required": ["id", "parameters", "output_dir", "images_store_path", "created"],
        "type": "object",
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/CrawlerJobStatus" }],
            "description": "Status of the CrawlerJob",
            "default": "INIT"
          },
          "id": { "title": "Id", "type": "string", "description": "ID of the CrawlerJob" },
          "parameters": {
            "title": "Parameters",
            "allOf": [{ "$ref": "#/components/schemas/CrawlerJobParameters" }],
            "description": "The parameters of the export job that defines what to export!"
          },
          "output_dir": {
            "title": "Output Dir",
            "type": "string",
            "description": "Internal temporary output directory for the crawled data."
          },
          "images_store_path": {
            "title": "Images Store Path",
            "type": "string",
            "description": "Internal temporary output directory for the crawled images."
          },
          "crawled_data_zip_path": {
            "title": "Crawled Data Zip Path",
            "type": "string",
            "description": "Path to the ZIP that contains the data of the CrawlerJob"
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the CrawlerJob",
            "format": "date-time"
          }
        }
      },
      "CrawlerJobStatus": {
        "title": "CrawlerJobStatus",
        "enum": ["INIT", "IN PROGRESS", "DONE", "FAILED"],
        "type": "string",
        "description": "An enumeration."
      },
      "DocType": {
        "title": "DocType",
        "enum": ["text", "image", "video", "audio"],
        "type": "string",
        "description": "An enumeration."
      },
      "DocumentTagCreate": {
        "title": "DocumentTagCreate",
        "required": ["title", "project_id"],
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the DocumentTag" },
          "description": { "title": "Description", "type": "string", "description": "Description of the DocumentTag" },
          "color": { "title": "Color", "type": "string", "description": "Color of the Code" },
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "Project the DocumentTag belongs to"
          }
        }
      },
      "DocumentTagRead": {
        "title": "DocumentTagRead",
        "required": ["title", "color", "id", "project_id", "created", "updated"],
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the DocumentTag" },
          "description": { "title": "Description", "type": "string", "description": "Description of the DocumentTag" },
          "color": { "title": "Color", "type": "string", "description": "Color of the Code" },
          "id": { "title": "Id", "type": "integer", "description": "ID of the DocumentTag" },
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "Project the DocumentTag belongs to"
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the DocumentTag",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the DocumentTag",
            "format": "date-time"
          }
        }
      },
      "DocumentTagUpdate": {
        "title": "DocumentTagUpdate",
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the DocumentTag" },
          "description": { "title": "Description", "type": "string", "description": "Description of the DocumentTag" },
          "color": { "title": "Color", "type": "string", "description": "Color of the Code" }
        }
      },
      "ElasticSearchDocumentHit": {
        "title": "ElasticSearchDocumentHit",
        "required": ["sdoc_id", "score"],
        "type": "object",
        "properties": {
          "sdoc_id": {
            "title": "Sdoc Id",
            "type": "integer",
            "description": "The ID of the SourceDocument as it is in the SQL DB"
          },
          "score": {
            "title": "Score",
            "type": "number",
            "description": "The score of the SourceDocument that was found by a ES Query"
          }
        }
      },
      "ExportFormat": {
        "title": "ExportFormat",
        "enum": ["CSV", "JSON"],
        "type": "string",
        "description": "An enumeration."
      },
      "ExportJobParameters": {
        "title": "ExportJobParameters",
        "required": ["export_job_type", "specific_export_job_parameters"],
        "type": "object",
        "properties": {
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          },
          "export_format": {
            "allOf": [{ "$ref": "#/components/schemas/ExportFormat" }],
            "description": "The format of the exported data.",
            "default": "CSV"
          },
          "specific_export_job_parameters": {
            "title": "Specific Export Job Parameters",
            "anyOf": [
              { "$ref": "#/components/schemas/SingleProjectAllDataExportJobParams" },
              { "$ref": "#/components/schemas/SingleProjectAllTagsExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllDataExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllCodesExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllMemosExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserLogbookExportJobParams" },
              { "$ref": "#/components/schemas/SingleDocAllUserAnnotationsExportJobParams" },
              { "$ref": "#/components/schemas/SingleDocSingleUserAnnotationsExportJobParams" }
            ],
            "description": "Specific parameters for the export job w.r.t it's type"
          }
        }
      },
      "ExportJobRead": {
        "title": "ExportJobRead",
        "required": ["id", "parameters", "created"],
        "type": "object",
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobStatus" }],
            "description": "Status of the ExportJob",
            "default": "init"
          },
          "results_url": {
            "title": "Results Url",
            "type": "string",
            "description": "URL to download the results when done."
          },
          "id": { "title": "Id", "type": "string", "description": "ID of the ExportJob" },
          "parameters": {
            "title": "Parameters",
            "allOf": [{ "$ref": "#/components/schemas/ExportJobParameters" }],
            "description": "The parameters of the export job that defines what to export!"
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the ExportJob",
            "format": "date-time"
          }
        }
      },
      "ExportJobStatus": {
        "title": "ExportJobStatus",
        "enum": ["init", "in_progress", "done", "failed"],
        "type": "string",
        "description": "An enumeration."
      },
      "ExportJobType": {
        "title": "ExportJobType",
        "enum": [
          "SINGLE_PROJECT_ALL_DATA",
          "SINGLE_PROJECT_ALL_TAGS",
          "SINGLE_USER_ALL_DATA",
          "SINGLE_USER_ALL_CODES",
          "SINGLE_USER_ALL_MEMOS",
          "SINGLE_USER_LOGBOOK",
          "SINGLE_DOC_ALL_USER_ANNOTATIONS",
          "SINGLE_DOC_SINGLE_USER_ANNOTATIONS"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "FeedbackCreate": {
        "title": "FeedbackCreate",
        "required": ["user_content", "user_id"],
        "type": "object",
        "properties": {
          "user_content": { "title": "User Content", "type": "string", "description": "User message of the Feedback" },
          "user_id": { "title": "User Id", "type": "integer", "description": "User who created the Feedback" }
        }
      },
      "FeedbackRead": {
        "title": "FeedbackRead",
        "required": ["user_content", "id", "user_id", "created"],
        "type": "object",
        "properties": {
          "user_content": { "title": "User Content", "type": "string", "description": "User message of the Feedback" },
          "id": { "title": "Id", "type": "string", "description": "ID of the Feedback" },
          "user_id": { "title": "User Id", "type": "integer", "description": "User who created the Feedback" },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the Feedback",
            "format": "date-time"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": { "title": "Detail", "type": "array", "items": { "$ref": "#/components/schemas/ValidationError" } }
        }
      },
      "KeyValue": {
        "title": "KeyValue",
        "required": ["key", "value"],
        "type": "object",
        "properties": {
          "key": { "title": "Key", "type": "string", "description": "The key of the Metadata" },
          "value": { "title": "Value", "type": "string", "description": "The value of the Metadata" }
        }
      },
      "KeywordStat": {
        "title": "KeywordStat",
        "required": ["keyword", "filtered_count", "global_count"],
        "type": "object",
        "properties": {
          "keyword": { "title": "Keyword", "type": "string", "description": "The counted keyword." },
          "filtered_count": {
            "title": "Filtered Count",
            "type": "integer",
            "description": "Number of occurrences of the keyword in the filtered collection"
          },
          "global_count": {
            "title": "Global Count",
            "type": "integer",
            "description": "Number of occurrences of the keyword in the entire collection"
          }
        }
      },
      "MemoContentQuery": {
        "title": "MemoContentQuery",
        "required": ["proj_id", "user_id", "content_query"],
        "type": "object",
        "properties": {
          "proj_id": {
            "title": "Proj Id",
            "type": "integer",
            "description": "The ID of the Project the Memo have to belong to."
          },
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "The ID of the User the Memo have to belong to."
          },
          "starred": {
            "title": "Starred",
            "type": "boolean",
            "description": "If set (i.e. not NULL / NONE), only returns Memo that have the given starred status"
          },
          "content_query": {
            "title": "Content Query",
            "minLength": 1,
            "type": "string",
            "description": "The query term to search within the content of the Memo"
          }
        }
      },
      "MemoCreate": {
        "title": "MemoCreate",
        "required": ["title", "content", "user_id", "project_id"],
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the Memo" },
          "content": { "title": "Content", "type": "string", "description": "Content of the Memo" },
          "user_id": { "title": "User Id", "type": "integer", "description": "User the Memo belongs to" },
          "project_id": { "title": "Project Id", "type": "integer", "description": "Project the Memo belongs to" },
          "starred": {
            "title": "Starred",
            "type": "boolean",
            "description": "Starred flag of the Memo",
            "default": false
          }
        }
      },
      "MemoRead": {
        "title": "MemoRead",
        "required": [
          "title",
          "content",
          "id",
          "starred",
          "user_id",
          "project_id",
          "created",
          "updated",
          "attached_object_id",
          "attached_object_type"
        ],
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the Memo" },
          "content": { "title": "Content", "type": "string", "description": "Content of the Memo" },
          "id": { "title": "Id", "type": "integer", "description": "ID of the Memo" },
          "starred": { "title": "Starred", "type": "boolean", "description": "Starred flag of the Memo" },
          "user_id": { "title": "User Id", "type": "integer", "description": "User the Memo belongs to" },
          "project_id": { "title": "Project Id", "type": "integer", "description": "Project the Memo belongs to" },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the Memo",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the Memo",
            "format": "date-time"
          },
          "attached_object_id": {
            "title": "Attached Object Id",
            "type": "integer",
            "description": "ID of the Object the Memo is attached to"
          },
          "attached_object_type": {
            "allOf": [{ "$ref": "#/components/schemas/AttachedObjectType" }],
            "description": "Type of the Object the ID refers to"
          }
        }
      },
      "MemoTitleQuery": {
        "title": "MemoTitleQuery",
        "required": ["proj_id", "user_id", "title_query", "prefix"],
        "type": "object",
        "properties": {
          "proj_id": {
            "title": "Proj Id",
            "type": "integer",
            "description": "The ID of the Project the Memo have to belong to."
          },
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "The ID of the User the Memo have to belong to."
          },
          "starred": {
            "title": "Starred",
            "type": "boolean",
            "description": "If set (i.e. not NULL / NONE), only returns Memo that have the given starred status"
          },
          "title_query": {
            "title": "Title Query",
            "minLength": 1,
            "type": "string",
            "description": "The query term to search within the title of the Memo"
          },
          "prefix": {
            "title": "Prefix",
            "type": "boolean",
            "description": "If true, filename prefix search is done. If false exact title is searched."
          }
        }
      },
      "MemoUpdate": {
        "title": "MemoUpdate",
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the Memo" },
          "content": { "title": "Content", "type": "string", "description": "Content of the Memo" },
          "starred": { "title": "Starred", "type": "boolean", "description": "Starred flag of the Memo" }
        }
      },
      "PaginatedElasticSearchDocumentHits": {
        "title": "PaginatedElasticSearchDocumentHits",
        "required": ["has_more", "total", "current_page_offset", "next_page_offset", "hits"],
        "type": "object",
        "properties": {
          "has_more": {
            "title": "Has More",
            "type": "boolean",
            "description": "Flag that indicates whether there are more search results."
          },
          "total": { "title": "Total", "type": "integer", "description": "The total number of results." },
          "current_page_offset": {
            "title": "Current Page Offset",
            "type": "integer",
            "description": "The offset that returns the current results."
          },
          "next_page_offset": {
            "title": "Next Page Offset",
            "type": "integer",
            "description": "The offset that returns the next results."
          },
          "hits": {
            "title": "Hits",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ElasticSearchDocumentHit" },
            "description": "The IDs of SourceDocument search results on the requested page."
          }
        }
      },
      "PaginatedMemoSearchResults": {
        "title": "PaginatedMemoSearchResults",
        "required": ["has_more", "total", "current_page_offset", "next_page_offset", "memos"],
        "type": "object",
        "properties": {
          "has_more": {
            "title": "Has More",
            "type": "boolean",
            "description": "Flag that indicates whether there are more search results."
          },
          "total": { "title": "Total", "type": "integer", "description": "The total number of results." },
          "current_page_offset": {
            "title": "Current Page Offset",
            "type": "integer",
            "description": "The offset that returns the current results."
          },
          "next_page_offset": {
            "title": "Next Page Offset",
            "type": "integer",
            "description": "The offset that returns the next results."
          },
          "memos": {
            "title": "Memos",
            "type": "array",
            "items": { "$ref": "#/components/schemas/MemoRead" },
            "description": "The Memo search results on the requested page."
          }
        }
      },
      "PaginatedSourceDocumentReads": {
        "title": "PaginatedSourceDocumentReads",
        "required": ["has_more", "total", "current_page_offset", "next_page_offset", "sdocs"],
        "type": "object",
        "properties": {
          "has_more": {
            "title": "Has More",
            "type": "boolean",
            "description": "Flag that indicates whether there are more search results."
          },
          "total": { "title": "Total", "type": "integer", "description": "The total number of results." },
          "current_page_offset": {
            "title": "Current Page Offset",
            "type": "integer",
            "description": "The offset that returns the current results."
          },
          "next_page_offset": {
            "title": "Next Page Offset",
            "type": "integer",
            "description": "The offset that returns the next results."
          },
          "sdocs": {
            "title": "Sdocs",
            "type": "array",
            "items": { "$ref": "#/components/schemas/SourceDocumentRead" },
            "description": "The SourceDocuments on this page"
          }
        }
      },
      "PreProProjectStatus": {
        "title": "PreProProjectStatus",
        "required": ["project_id", "in_progress", "num_sdocs_in_progress", "num_sdocs_finished", "num_sdocs_total"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "Project ID this PreProProjectStatus refers to."
          },
          "in_progress": {
            "title": "In Progress",
            "type": "boolean",
            "description": "Flag if Preprocessing is in progress."
          },
          "num_sdocs_in_progress": {
            "title": "Num Sdocs In Progress",
            "type": "integer",
            "description": "Number of SourceDocuments that are getting preprocessed."
          },
          "num_sdocs_finished": {
            "title": "Num Sdocs Finished",
            "type": "integer",
            "description": "Number of SourceDocuments preprocessing has finished."
          },
          "num_sdocs_total": {
            "title": "Num Sdocs Total",
            "type": "integer",
            "description": "Number of total SourceDocuments."
          }
        }
      },
      "ProjectCreate": {
        "title": "ProjectCreate",
        "required": ["title", "description"],
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the Project" },
          "description": { "title": "Description", "type": "string", "description": "Description of the Project" }
        }
      },
      "ProjectRead": {
        "title": "ProjectRead",
        "required": ["title", "description", "id", "created", "updated"],
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the Project" },
          "description": { "title": "Description", "type": "string", "description": "Description of the Project" },
          "id": { "title": "Id", "type": "integer", "description": "ID of the Project" },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the Project",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the Project",
            "format": "date-time"
          }
        }
      },
      "ProjectUpdate": {
        "title": "ProjectUpdate",
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the Project" },
          "description": { "title": "Description", "type": "string", "description": "Description of the Project" }
        }
      },
      "SDocStatus": {
        "title": "SDocStatus",
        "enum": [
          "undefined_or_erroneous",
          "import_text_document",
          "import_image_document",
          "import_audio_document",
          "import_video_document",
          "convert_to_webp_and_generate_thumbnails",
          "convert_mediafile_to_uncompressed_audio",
          "create_sdoc_links_from_audio",
          "generate_word_level_transcriptions",
          "create_transcript_file",
          "create_pptd_from_ppad",
          "create_sdoc_links_from_text",
          "generate_webp_thumbnails_from_video",
          "create_ppad_from_ppvd",
          "clean_html",
          "extract_text_from_html_and_create_source_mapping",
          "detect_language",
          "generate_image_captions",
          "create_pptd_from_caption",
          "generate_span_annotations",
          "generate_bbox_annotations",
          "add_custom_html_tags",
          "create_sdoc_links_from_html",
          "store_metadata_in_db",
          "store_span_annotations_in_db",
          "store_bbox_annotations_in_db",
          "store_document_in_elasticsearch",
          "index_image_document_in_faiss",
          "index_text_document_in_faiss",
          "finished"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchSDocsQueryParameters": {
        "title": "SearchSDocsQueryParameters",
        "required": ["proj_id"],
        "type": "object",
        "properties": {
          "proj_id": {
            "title": "Proj Id",
            "type": "integer",
            "description": "The ID of the Project the SourceDocuments have to belong to."
          },
          "user_ids": {
            "title": "User Ids",
            "uniqueItems": true,
            "type": "array",
            "items": { "type": "integer" },
            "description": "The IDs of the User the SourceDocuments have to belong to.",
            "default": [1]
          },
          "keywords": {
            "title": "Keywords",
            "type": "array",
            "items": { "type": "string" },
            "description": "List of Keywords that have to be present in the SourceDocuments keywords (via Elasticsearch)"
          },
          "search_terms": {
            "title": "Search Terms",
            "type": "array",
            "items": { "type": "string" },
            "description": "List of SearchTerms that have to be present in the SourceDocuments content (via Elasticsearch)"
          },
          "filename": {
            "title": "Filename",
            "type": "string",
            "description": "Filename that have to be present in the SourceDocuments Filename (via Elasticsearch)"
          },
          "span_entities": {
            "title": "Span Entities",
            "type": "array",
            "items": { "$ref": "#/components/schemas/SpanEntity" },
            "description": "List of SpanEntities that have to be present in the SourceDocuments"
          },
          "tag_ids": {
            "title": "Tag Ids",
            "type": "array",
            "items": { "type": "integer" },
            "description": "List of IDs of DocumentTags the SourceDocuments have to be tagged with"
          },
          "metadata": {
            "title": "Metadata",
            "type": "array",
            "items": { "$ref": "#/components/schemas/KeyValue" },
            "description": "List of key value pairs that have to be present in the SourceDocuments metadata have to be"
          },
          "all_tags": {
            "title": "All Tags",
            "type": "boolean",
            "description": "If true return SourceDocuments tagged with all DocumentTags, or anyof the DocumentTags otherwise",
            "default": true
          },
          "doc_types": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DocType" },
            "description": "Only return SourceDocuments with the given DocTypes",
            "default": ["text", "image", "audio", "video"]
          }
        }
      },
      "SimSearchImageHit": {
        "title": "SimSearchImageHit",
        "required": ["sdoc_id", "score"],
        "type": "object",
        "properties": {
          "sdoc_id": {
            "title": "Sdoc Id",
            "type": "integer",
            "description": "The ID of the SourceDocument similar to the query."
          },
          "score": { "title": "Score", "type": "number", "description": "The similarity score." }
        }
      },
      "SimSearchSentenceHit": {
        "title": "SimSearchSentenceHit",
        "required": ["sdoc_id", "score", "sentence_id"],
        "type": "object",
        "properties": {
          "sdoc_id": {
            "title": "Sdoc Id",
            "type": "integer",
            "description": "The ID of the SourceDocument similar to the query."
          },
          "score": { "title": "Score", "type": "number", "description": "The similarity score." },
          "sentence_id": {
            "title": "Sentence Id",
            "type": "integer",
            "description": "The sentence id with respect to the SourceDocument"
          }
        }
      },
      "SingleDocAllUserAnnotationsExportJobParams": {
        "title": "SingleDocAllUserAnnotationsExportJobParams",
        "required": ["project_id", "sdoc_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          },
          "sdoc_id": {
            "title": "Sdoc Id",
            "type": "integer",
            "description": "The ID of the SDocument to get the data from."
          }
        }
      },
      "SingleDocSingleUserAnnotationsExportJobParams": {
        "title": "SingleDocSingleUserAnnotationsExportJobParams",
        "required": ["project_id", "sdoc_id", "user_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          },
          "sdoc_id": {
            "title": "Sdoc Id",
            "type": "integer",
            "description": "The ID of the SDocument to get the data from."
          },
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "The ID of the User to get the data from."
          }
        }
      },
      "SingleProjectAllDataExportJobParams": {
        "title": "SingleProjectAllDataExportJobParams",
        "required": ["project_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          }
        }
      },
      "SingleProjectAllTagsExportJobParams": {
        "title": "SingleProjectAllTagsExportJobParams",
        "required": ["project_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          }
        }
      },
      "SingleUserAllCodesExportJobParams": {
        "title": "SingleUserAllCodesExportJobParams",
        "required": ["project_id", "user_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          },
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "The ID of the User to get the data from."
          }
        }
      },
      "SingleUserAllDataExportJobParams": {
        "title": "SingleUserAllDataExportJobParams",
        "required": ["project_id", "user_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          },
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "The ID of the User to get the data from."
          }
        }
      },
      "SingleUserAllMemosExportJobParams": {
        "title": "SingleUserAllMemosExportJobParams",
        "required": ["project_id", "user_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          },
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "The ID of the User to get the data from."
          }
        }
      },
      "SingleUserLogbookExportJobParams": {
        "title": "SingleUserLogbookExportJobParams",
        "required": ["project_id", "user_id"],
        "type": "object",
        "properties": {
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          },
          "user_id": {
            "title": "User Id",
            "type": "integer",
            "description": "The ID of the User to get the data from."
          }
        }
      },
      "SourceDocumentContent": {
        "title": "SourceDocumentContent",
        "required": ["source_document_id", "content"],
        "type": "object",
        "properties": {
          "source_document_id": {
            "title": "Source Document Id",
            "type": "integer",
            "description": "ID of the SourceDocument the content belongs to."
          },
          "content": {
            "title": "Content",
            "type": "string",
            "description": "The (textual) content of the SourceDocument the content belongs to."
          }
        }
      },
      "SourceDocumentContentQuery": {
        "title": "SourceDocumentContentQuery",
        "required": ["proj_id", "content_query"],
        "type": "object",
        "properties": {
          "proj_id": {
            "title": "Proj Id",
            "type": "integer",
            "description": "The ID of the Project the SourceDocuments have to belong to."
          },
          "content_query": {
            "title": "Content Query",
            "minLength": 1,
            "type": "string",
            "description": "The query term to search within the content of the SourceDocuments"
          }
        }
      },
      "SourceDocumentDocumentTagMultiLink": {
        "title": "SourceDocumentDocumentTagMultiLink",
        "required": ["source_document_ids", "document_tag_ids"],
        "type": "object",
        "properties": {
          "source_document_ids": {
            "title": "Source Document Ids",
            "type": "array",
            "items": { "type": "integer" },
            "description": "List of IDs of SourceDocuments"
          },
          "document_tag_ids": {
            "title": "Document Tag Ids",
            "type": "array",
            "items": { "type": "integer" },
            "description": "List of IDs of DocumentTags"
          }
        }
      },
      "SourceDocumentFilenameQuery": {
        "title": "SourceDocumentFilenameQuery",
        "required": ["proj_id", "filename_query", "prefix"],
        "type": "object",
        "properties": {
          "proj_id": {
            "title": "Proj Id",
            "type": "integer",
            "description": "The ID of the Project the SourceDocuments have to belong to."
          },
          "filename_query": {
            "title": "Filename Query",
            "minLength": 1,
            "type": "string",
            "description": "The query term to search within the filename of the SourceDocuments"
          },
          "prefix": {
            "title": "Prefix",
            "type": "boolean",
            "description": "If true, filename prefix search is done. If false exact filename is searched."
          }
        }
      },
      "SourceDocumentHTML": {
        "title": "SourceDocumentHTML",
        "required": ["source_document_id", "html"],
        "type": "object",
        "properties": {
          "source_document_id": {
            "title": "Source Document Id",
            "type": "integer",
            "description": "ID of the SourceDocument the content belongs to."
          },
          "html": { "title": "Html", "type": "string", "description": "The (html) content of the SourceDocument." }
        }
      },
      "SourceDocumentKeywords": {
        "title": "SourceDocumentKeywords",
        "required": ["source_document_id", "keywords"],
        "type": "object",
        "properties": {
          "source_document_id": {
            "title": "Source Document Id",
            "type": "integer",
            "description": "ID of the SourceDocument the Keywords belong to."
          },
          "keywords": {
            "title": "Keywords",
            "type": "array",
            "items": { "type": "string" },
            "description": "The list of Keywords of the SourceDocument the Keywords belong to."
          }
        }
      },
      "SourceDocumentMetadataCreate": {
        "title": "SourceDocumentMetadataCreate",
        "required": ["key", "value", "source_document_id"],
        "type": "object",
        "properties": {
          "key": { "title": "Key", "type": "string", "description": "Key of the SourceDocumentMetadata" },
          "value": { "title": "Value", "type": "string", "description": "Value of the SourceDocumentMetadata" },
          "source_document_id": {
            "title": "Source Document Id",
            "type": "integer",
            "description": "SourceDocument the SourceDocumentMetadata belongs to"
          },
          "read_only": {
            "title": "Read Only",
            "type": "boolean",
            "description": "Flag that tells if the SourceDocumentMetadata cannot be changed. Used for system generated metadata! Use False for user metadata.",
            "default": false
          }
        }
      },
      "SourceDocumentMetadataRead": {
        "title": "SourceDocumentMetadataRead",
        "required": ["key", "value", "id", "source_document_id"],
        "type": "object",
        "properties": {
          "key": { "title": "Key", "type": "string", "description": "Key of the SourceDocumentMetadata" },
          "value": { "title": "Value", "type": "string", "description": "Value of the SourceDocumentMetadata" },
          "id": { "title": "Id", "type": "integer", "description": "ID of the SourceDocumentMetadata" },
          "read_only": {
            "title": "Read Only",
            "type": "boolean",
            "description": "Flag that tells if the SourceDocumentMetadata cannot be changed. Used for system generated metadata! Use False for user metadata.",
            "default": false
          },
          "source_document_id": {
            "title": "Source Document Id",
            "type": "integer",
            "description": "SourceDocument the SourceDocumentMetadata belongs to"
          }
        }
      },
      "SourceDocumentMetadataUpdate": {
        "title": "SourceDocumentMetadataUpdate",
        "type": "object",
        "properties": {
          "key": { "title": "Key", "type": "string", "description": "Key of the SourceDocumentMetadata" },
          "value": { "title": "Value", "type": "string", "description": "Value of the SourceDocumentMetadata" }
        }
      },
      "SourceDocumentRead": {
        "title": "SourceDocumentRead",
        "required": ["filename", "content", "doctype", "status", "project_id", "id", "created", "updated"],
        "type": "object",
        "properties": {
          "filename": {
            "title": "Filename",
            "maxLength": 230,
            "type": "string",
            "description": "Filename of the SourceDocument"
          },
          "content": { "title": "Content", "type": "string", "description": "Content of the SourceDocument" },
          "doctype": {
            "allOf": [{ "$ref": "#/components/schemas/DocType" }],
            "description": "DOCTYPE of the SourceDocument"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/SDocStatus" }],
            "description": "Status of the SourceDocument"
          },
          "project_id": {
            "title": "Project Id",
            "type": "integer",
            "description": "Project the SourceDocument belongs to"
          },
          "id": { "title": "Id", "type": "integer", "description": "ID of the SourceDocument" },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "The created timestamp of the SourceDocument",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the Memo",
            "format": "date-time"
          }
        }
      },
      "SourceDocumentSentences": {
        "title": "SourceDocumentSentences",
        "required": ["source_document_id", "sentences"],
        "type": "object",
        "properties": {
          "source_document_id": {
            "title": "Source Document Id",
            "type": "integer",
            "description": "ID of the SourceDocument the Sentences belong to."
          },
          "sentences": {
            "title": "Sentences",
            "type": "array",
            "items": { "type": "string" },
            "description": "The Sentences of the SourceDocument the Sentences belong to."
          },
          "sentence_character_offsets": {
            "title": "Sentence Character Offsets",
            "type": "array",
            "items": { "type": "array", "items": [{ "type": "integer" }, { "type": "integer" }] },
            "description": "The list of character offsets of the Sentences"
          }
        }
      },
      "SourceDocumentTokens": {
        "title": "SourceDocumentTokens",
        "required": ["source_document_id", "tokens"],
        "type": "object",
        "properties": {
          "source_document_id": {
            "title": "Source Document Id",
            "type": "integer",
            "description": "ID of the SourceDocument the Tokens belong to."
          },
          "tokens": {
            "title": "Tokens",
            "type": "array",
            "items": { "type": "string" },
            "description": "The (textual) list Tokens of the SourceDocument the Tokens belong to."
          },
          "token_character_offsets": {
            "title": "Token Character Offsets",
            "type": "array",
            "items": { "type": "array", "items": [{ "type": "integer" }, { "type": "integer" }] },
            "description": "The list of character offsets of the Tokens"
          }
        }
      },
      "SpanAnnotationCreate": {
        "title": "SpanAnnotationCreate",
        "required": [
          "begin",
          "end",
          "begin_token",
          "end_token",
          "span_text",
          "current_code_id",
          "annotation_document_id"
        ],
        "type": "object",
        "properties": {
          "begin": { "title": "Begin", "type": "integer", "description": "Begin of the SpanAnnotation in characters" },
          "end": { "title": "End", "type": "integer", "description": "End of the SpanAnnotation in characters" },
          "begin_token": {
            "title": "Begin Token",
            "type": "integer",
            "description": "Begin of the SpanAnnotation in tokens"
          },
          "end_token": {
            "title": "End Token",
            "type": "integer",
            "description": "End of the SpanAnnotation in tokens"
          },
          "span_text": {
            "title": "Span Text",
            "type": "string",
            "description": "The SpanText the SpanAnnotation spans."
          },
          "current_code_id": {
            "title": "Current Code Id",
            "type": "integer",
            "description": "CurrentCode the SpanAnnotation refers to"
          },
          "annotation_document_id": {
            "title": "Annotation Document Id",
            "type": "integer",
            "description": "AnnotationDocument the SpanAnnotation refers to"
          }
        }
      },
      "SpanAnnotationRead": {
        "title": "SpanAnnotationRead",
        "required": [
          "begin",
          "end",
          "begin_token",
          "end_token",
          "id",
          "span_text_id",
          "current_code_id",
          "annotation_document_id",
          "created",
          "updated"
        ],
        "type": "object",
        "properties": {
          "begin": { "title": "Begin", "type": "integer", "description": "Begin of the SpanAnnotation in characters" },
          "end": { "title": "End", "type": "integer", "description": "End of the SpanAnnotation in characters" },
          "begin_token": {
            "title": "Begin Token",
            "type": "integer",
            "description": "Begin of the SpanAnnotation in tokens"
          },
          "end_token": {
            "title": "End Token",
            "type": "integer",
            "description": "End of the SpanAnnotation in tokens"
          },
          "id": { "title": "Id", "type": "integer", "description": "ID of the SpanAnnotation" },
          "span_text_id": {
            "title": "Span Text Id",
            "type": "string",
            "description": "The SpanText the SpanAnnotation spans."
          },
          "current_code_id": {
            "title": "Current Code Id",
            "type": "integer",
            "description": "CurrentCode the SpanAnnotation refers to"
          },
          "annotation_document_id": {
            "title": "Annotation Document Id",
            "type": "integer",
            "description": "AnnotationDocument the SpanAnnotation refers to"
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the SpanAnnotation",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the SpanAnnotation",
            "format": "date-time"
          }
        }
      },
      "SpanAnnotationReadResolved": {
        "title": "SpanAnnotationReadResolved",
        "required": [
          "begin",
          "end",
          "begin_token",
          "end_token",
          "id",
          "span_text",
          "code",
          "annotation_document_id",
          "created",
          "updated"
        ],
        "type": "object",
        "properties": {
          "begin": { "title": "Begin", "type": "integer", "description": "Begin of the SpanAnnotation in characters" },
          "end": { "title": "End", "type": "integer", "description": "End of the SpanAnnotation in characters" },
          "begin_token": {
            "title": "Begin Token",
            "type": "integer",
            "description": "Begin of the SpanAnnotation in tokens"
          },
          "end_token": {
            "title": "End Token",
            "type": "integer",
            "description": "End of the SpanAnnotation in tokens"
          },
          "id": { "title": "Id", "type": "integer", "description": "ID of the SpanAnnotation" },
          "span_text": {
            "title": "Span Text",
            "type": "string",
            "description": "The SpanText the SpanAnnotation spans."
          },
          "code": {
            "title": "Code",
            "allOf": [{ "$ref": "#/components/schemas/CodeRead" }],
            "description": "Code the SpanAnnotation refers to"
          },
          "annotation_document_id": {
            "title": "Annotation Document Id",
            "type": "integer",
            "description": "AnnotationDocument the SpanAnnotation refers to"
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the SpanAnnotation",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the SpanAnnotation",
            "format": "date-time"
          }
        }
      },
      "SpanAnnotationUpdate": {
        "title": "SpanAnnotationUpdate",
        "required": ["current_code_id"],
        "type": "object",
        "properties": {
          "current_code_id": {
            "title": "Current Code Id",
            "type": "integer",
            "description": "CurrentCode the SpanAnnotation refers to"
          }
        }
      },
      "SpanEntity": {
        "title": "SpanEntity",
        "required": ["code_id", "span_text"],
        "type": "object",
        "properties": {
          "code_id": {
            "title": "Code Id",
            "type": "integer",
            "description": "The ID of the Code related to the SpanAnnotation"
          },
          "span_text": {
            "title": "Span Text",
            "type": "string",
            "description": "The SpanText the SpanAnnotation spans"
          }
        }
      },
      "SpanEntityDocumentFrequency": {
        "title": "SpanEntityDocumentFrequency",
        "required": ["code_id", "span_text", "filtered_count", "global_count"],
        "type": "object",
        "properties": {
          "code_id": {
            "title": "Code Id",
            "type": "integer",
            "description": "The ID of the Code related to the SpanAnnotation"
          },
          "span_text": {
            "title": "Span Text",
            "type": "string",
            "description": "The SpanText the SpanAnnotation spans"
          },
          "filtered_count": {
            "title": "Filtered Count",
            "type": "integer",
            "description": "Number of occurrences of the SpanEntity in a collection of SourceDocuments."
          },
          "global_count": {
            "title": "Global Count",
            "type": "integer",
            "description": "Number of occurrences of the SpanEntity in a collection of SourceDocuments."
          }
        }
      },
      "SpanEntityDocumentFrequencyResult": {
        "title": "SpanEntityDocumentFrequencyResult",
        "required": ["stats"],
        "type": "object",
        "properties": {
          "stats": {
            "title": "Stats",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/SpanEntityDocumentFrequency" }
            },
            "description": "Map of Code ID to SpanEntityDocumentFrequency"
          }
        }
      },
      "SpanEntityFrequency": {
        "title": "SpanEntityFrequency",
        "required": ["code_id", "span_text", "sdoc_id", "count"],
        "type": "object",
        "properties": {
          "code_id": {
            "title": "Code Id",
            "type": "integer",
            "description": "The ID of the Code related to the SpanAnnotation"
          },
          "span_text": {
            "title": "Span Text",
            "type": "string",
            "description": "The SpanText the SpanAnnotation spans"
          },
          "sdoc_id": { "title": "Sdoc Id", "type": "integer", "description": "The ID of the SourceDocument." },
          "count": {
            "title": "Count",
            "type": "integer",
            "description": "Number of occurrences of the SpanEntity in the SourceDocument."
          }
        }
      },
      "SpanGroupCreate": {
        "title": "SpanGroupCreate",
        "required": ["name", "annotation_document_id"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string", "description": "Name of the SpanGroup" },
          "annotation_document_id": {
            "title": "Annotation Document Id",
            "type": "integer",
            "description": "The ID of the AnnotationDocument the SpanGroup belongs to"
          }
        }
      },
      "SpanGroupRead": {
        "title": "SpanGroupRead",
        "required": ["name", "id", "annotation_document_id", "created", "updated"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string", "description": "Name of the SpanGroup" },
          "id": { "title": "Id", "type": "integer", "description": "ID of the SpanGroup" },
          "annotation_document_id": {
            "title": "Annotation Document Id",
            "type": "integer",
            "description": "The ID of the AnnotationDocument the SpanGroup belongs to"
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the SpanGroup",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the SpanGroup",
            "format": "date-time"
          }
        }
      },
      "SpanGroupUpdate": {
        "title": "SpanGroupUpdate",
        "type": "object",
        "properties": { "name": { "title": "Name", "type": "string", "description": "Name of the SpanGroup" } }
      },
      "TagStat": {
        "title": "TagStat",
        "required": ["tag", "filtered_count", "global_count"],
        "type": "object",
        "properties": {
          "tag": {
            "title": "Tag",
            "allOf": [{ "$ref": "#/components/schemas/DocumentTagRead" }],
            "description": "The counted document tag."
          },
          "filtered_count": {
            "title": "Filtered Count",
            "type": "integer",
            "description": "Number of occurrences of the document tag in the filtered documents"
          },
          "global_count": {
            "title": "Global Count",
            "type": "integer",
            "description": "Number of occurrences of the document tag in all documents"
          }
        }
      },
      "UserAuthorizationHeaderData": {
        "title": "UserAuthorizationHeaderData",
        "required": ["access_token", "token_type"],
        "type": "object",
        "properties": {
          "access_token": { "title": "Access Token", "type": "string", "description": "Value of the JWT" },
          "token_type": { "title": "Token Type", "type": "string", "description": "Type of the Token" }
        }
      },
      "UserCreate": {
        "title": "UserCreate",
        "required": ["email", "first_name", "last_name", "password"],
        "type": "object",
        "properties": {
          "email": { "title": "Email", "type": "string", "description": "E-Mail of the User", "format": "email" },
          "first_name": { "title": "First Name", "type": "string", "description": "First name of the User" },
          "last_name": { "title": "Last Name", "type": "string", "description": "Last name of the User" },
          "password": { "title": "Password", "type": "string", "description": "Hashed password of the User" }
        }
      },
      "UserRead": {
        "title": "UserRead",
        "required": ["email", "first_name", "last_name", "id", "password", "created", "updated"],
        "type": "object",
        "properties": {
          "email": { "title": "Email", "type": "string", "description": "E-Mail of the User", "format": "email" },
          "first_name": { "title": "First Name", "type": "string", "description": "First name of the User" },
          "last_name": { "title": "Last Name", "type": "string", "description": "Last name of the User" },
          "id": { "title": "Id", "type": "integer", "description": "ID of the User" },
          "password": {
            "title": "Password",
            "type": "string",
            "description": "Hashed password of the User",
            "exclude": true
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "Created timestamp of the User",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "type": "string",
            "description": "Updated timestamp of the User",
            "format": "date-time"
          }
        }
      },
      "UserUpdate": {
        "title": "UserUpdate",
        "type": "object",
        "properties": {
          "email": { "title": "Email", "type": "string", "description": "E-Mail of the User" },
          "first_name": { "title": "First Name", "type": "string", "description": "First name of the User" },
          "last_name": { "title": "Last Name", "type": "string", "description": "Last name of the User" },
          "password": { "title": "Password", "type": "string", "description": "Hashed password of the User" }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] }
          },
          "msg": { "title": "Message", "type": "string" },
          "type": { "title": "Error Type", "type": "string" }
        }
      },
      "SourceDocumentReadAction": {
        "title": "SourceDocumentReadAction",
        "type": "object",
        "properties": {
          "filename": {
            "title": "Filename",
            "description": "Filename of the SourceDocument",
            "maxLength": 230,
            "type": "string"
          },
          "content": { "title": "Content", "description": "Content of the SourceDocument", "type": "string" },
          "doctype": {
            "description": "DOCTYPE of the SourceDocument",
            "allOf": [{ "$ref": "#/components/schemas/DocType" }]
          },
          "status": {
            "description": "Status of the SourceDocument",
            "allOf": [{ "$ref": "#/components/schemas/SDocStatus" }]
          },
          "project_id": {
            "title": "Project Id",
            "description": "Project the SourceDocument belongs to",
            "type": "integer"
          },
          "id": { "title": "Id", "description": "ID of the SourceDocument", "type": "integer" },
          "created": {
            "title": "Created",
            "description": "The created timestamp of the SourceDocument",
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "description": "Updated timestamp of the Memo",
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "description": "Tags of the SourceDocument",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DocumentTagRead" }
          },
          "metadata": {
            "title": "Metadata",
            "description": "Metadata of the SourceDocument",
            "type": "array",
            "items": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" }
          }
        },
        "required": [
          "filename",
          "content",
          "doctype",
          "status",
          "project_id",
          "id",
          "created",
          "updated",
          "tags",
          "metadata"
        ],
        "definitions": {
          "DocType": {
            "title": "DocType",
            "description": "An enumeration.",
            "enum": ["text", "image", "video", "audio"],
            "type": "string"
          },
          "SDocStatus": {
            "title": "SDocStatus",
            "description": "An enumeration.",
            "enum": [
              "undefined_or_erroneous",
              "import_text_document",
              "import_image_document",
              "import_audio_document",
              "import_video_document",
              "convert_to_webp_and_generate_thumbnails",
              "convert_mediafile_to_uncompressed_audio",
              "create_sdoc_links_from_audio",
              "generate_word_level_transcriptions",
              "create_transcript_file",
              "create_pptd_from_ppad",
              "create_sdoc_links_from_text",
              "generate_webp_thumbnails_from_video",
              "create_ppad_from_ppvd",
              "clean_html",
              "extract_text_from_html_and_create_source_mapping",
              "detect_language",
              "generate_image_captions",
              "create_pptd_from_caption",
              "generate_span_annotations",
              "generate_bbox_annotations",
              "add_custom_html_tags",
              "create_sdoc_links_from_html",
              "store_metadata_in_db",
              "store_span_annotations_in_db",
              "store_bbox_annotations_in_db",
              "store_document_in_elasticsearch",
              "index_image_document_in_faiss",
              "index_text_document_in_faiss",
              "finished"
            ],
            "type": "string"
          },
          "DocumentTagRead": {
            "title": "DocumentTagRead",
            "type": "object",
            "properties": {
              "title": { "title": "Title", "description": "Title of the DocumentTag", "type": "string" },
              "description": {
                "title": "Description",
                "description": "Description of the DocumentTag",
                "type": "string"
              },
              "color": { "title": "Color", "description": "Color of the Code", "type": "string" },
              "id": { "title": "Id", "description": "ID of the DocumentTag", "type": "integer" },
              "project_id": {
                "title": "Project Id",
                "description": "Project the DocumentTag belongs to",
                "type": "integer"
              },
              "created": {
                "title": "Created",
                "description": "Created timestamp of the DocumentTag",
                "type": "string",
                "format": "date-time"
              },
              "updated": {
                "title": "Updated",
                "description": "Updated timestamp of the DocumentTag",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": ["title", "color", "id", "project_id", "created", "updated"]
          },
          "SourceDocumentMetadataRead": {
            "title": "SourceDocumentMetadataRead",
            "type": "object",
            "properties": {
              "key": { "title": "Key", "description": "Key of the SourceDocumentMetadata", "type": "string" },
              "value": { "title": "Value", "description": "Value of the SourceDocumentMetadata", "type": "string" },
              "id": { "title": "Id", "description": "ID of the SourceDocumentMetadata", "type": "integer" },
              "read_only": {
                "title": "Read Only",
                "description": "Flag that tells if the SourceDocumentMetadata cannot be changed. Used for system generated metadata! Use False for user metadata.",
                "default": false,
                "type": "boolean"
              },
              "source_document_id": {
                "title": "Source Document Id",
                "description": "SourceDocument the SourceDocumentMetadata belongs to",
                "type": "integer"
              }
            },
            "required": ["key", "value", "id", "source_document_id"]
          }
        }
      },
      "ProjectReadAction": {
        "title": "ProjectReadAction",
        "type": "object",
        "properties": {
          "title": { "title": "Title", "description": "Title of the Project", "type": "string" },
          "description": { "title": "Description", "description": "Description of the Project", "type": "string" },
          "id": { "title": "Id", "description": "ID of the Project", "type": "integer" },
          "created": {
            "title": "Created",
            "description": "Created timestamp of the Project",
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "title": "Updated",
            "description": "Updated timestamp of the Project",
            "type": "string",
            "format": "date-time"
          },
          "users": {
            "title": "Users",
            "description": "Users of the Project",
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserRead" }
          },
          "num_sdocs": { "title": "Num Sdocs", "description": "Number of Sdocs in the Project", "type": "integer" }
        },
        "required": ["title", "description", "id", "created", "updated", "users", "num_sdocs"],
        "definitions": {
          "UserRead": {
            "title": "UserRead",
            "type": "object",
            "properties": {
              "email": { "title": "Email", "description": "E-Mail of the User", "type": "string", "format": "email" },
              "first_name": { "title": "First Name", "description": "First name of the User", "type": "string" },
              "last_name": { "title": "Last Name", "description": "Last name of the User", "type": "string" },
              "id": { "title": "Id", "description": "ID of the User", "type": "integer" },
              "password": {
                "title": "Password",
                "description": "Hashed password of the User",
                "exclude": true,
                "type": "string"
              },
              "created": {
                "title": "Created",
                "description": "Created timestamp of the User",
                "type": "string",
                "format": "date-time"
              },
              "updated": {
                "title": "Updated",
                "description": "Updated timestamp of the User",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": ["email", "first_name", "last_name", "id", "password", "created", "updated"]
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": { "type": "oauth2", "flows": { "password": { "scopes": {}, "tokenUrl": "/user/login" } } }
    }
  }
}
