{
  "openapi": "3.1.0",
  "info": {
    "title": "D-WISE Tool Suite Backend API",
    "description": "The REST API for the D-WISE Tool Suite Backend.",
    "version": "beta_mwp_1"
  },
  "paths": {
    "/heartbeat": {
      "get": {
        "tags": ["general"],
        "summary": "Heartbeat",
        "operationId": "heartbeat",
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }
        }
      }
    },
    "/": {
      "get": {
        "tags": ["general"],
        "summary": "Root To Docs",
        "description": "Redirection to /docs",
        "operationId": "root_to_docs",
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }
        }
      }
    },
    "/authentication/register": {
      "post": {
        "tags": ["authentication"],
        "summary": "Registers a new User",
        "description": "Registers a new User and returns it with the generated ID.",
        "operationId": "register",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/authentication/login": {
      "post": {
        "tags": ["authentication"],
        "summary": "Returns the JWT access token for the provided user login data",
        "description": "Returns the JWT access token for the provided user login data if the login was successful. This is usually only called from an OAuth2 client!",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Body_authentication-login" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserAuthorizationHeaderData" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "tags": ["user"],
        "summary": "Returns the current user",
        "description": "Returns the current (logged in) user",
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/user/{user_id}": {
      "get": {
        "tags": ["user"],
        "summary": "Returns the User",
        "description": "Returns the User with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PublicUserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["user"],
        "summary": "Updates the User",
        "description": "Updates the User with the given ID if it exists",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Removes the User",
        "description": "Removes the User with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": ["user"],
        "summary": "Returns all Users",
        "description": "Returns all Users that exist in the system",
        "operationId": "get_all",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PublicUserRead" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/{user_id}/project": {
      "get": {
        "tags": ["user"],
        "summary": "Returns all Projects of the User",
        "description": "Returns all Projects of the User with the given ID",
        "operationId": "get_user_projects",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ProjectRead" },
                  "title": "Response User-Get User Projects"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/{user_id}/recent_activity": {
      "get": {
        "tags": ["user"],
        "summary": "Returns sdoc ids of sdocs the User recently modified (annotated)",
        "description": "Returns the top k sdoc ids that the User recently modified (annotated)",
        "operationId": "recent_activity",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } },
          { "name": "k", "in": "query", "required": true, "schema": { "type": "integer", "title": "K" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AnnotationDocumentRead" },
                  "title": "Response User-Recent Activity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project": {
      "put": {
        "tags": ["project"],
        "summary": "Creates a new Project",
        "description": "Creates a new Project.",
        "operationId": "create_new_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectCreate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "get": {
        "tags": ["project"],
        "summary": "Returns all Projects of the current user",
        "description": "Returns all Projects of the current user",
        "operationId": "read_all",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ProjectRead" },
                  "title": "Response Project-Read All"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}": {
      "get": {
        "tags": ["project"],
        "summary": "Returns the Project with the given ID",
        "description": "Returns the Project with the given ID if it exists",
        "operationId": "read_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["project"],
        "summary": "Updates the Project",
        "description": "Updates the Project with the given ID.",
        "operationId": "update_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes the Project",
        "description": "Removes the Project with the given ID.",
        "operationId": "delete_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/sdoc": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all SourceDocuments of the Project.",
        "description": "Returns all SourceDocuments of the Project with the given ID.",
        "operationId": "get_project_sdocs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          {
            "name": "only_finished",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": true, "title": "Only Finished" }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedSourceDocumentReads" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "put": {
        "tags": ["project"],
        "summary": "Uploads one or multiple SourceDocument to the Project",
        "description": "Uploads one or multiple SourceDocument to the Project with the given ID if it exists",
        "operationId": "upload_project_sdoc",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": { "schema": { "$ref": "#/components/schemas/Body_project-upload_project_sdoc" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PreprocessingJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all SourceDocuments of the Project",
        "description": "Removes all SourceDocuments of the Project with the given ID if it exists",
        "operationId": "delete_project_sdocs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Project-Delete Project Sdocs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/{user_id}": {
      "patch": {
        "tags": ["project"],
        "summary": "Associates the User with the Project",
        "description": "Associates an existing User to the Project with the given ID if it exists",
        "operationId": "associate_user_to_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Dissociates the Users with the Project",
        "description": "Dissociates the Users with the Project with the given ID if it exists",
        "operationId": "dissociate_user_from_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Users of the Project",
        "description": "Returns all Users of the Project with the given ID",
        "operationId": "get_project_users",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserRead" },
                  "title": "Response Project-Get Project Users"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/code": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Codes of the Project",
        "description": "Returns all Codes of the Project with the given ID",
        "operationId": "get_project_codes",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeRead" },
                  "title": "Response Project-Get Project Codes"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all Codes of the Project",
        "description": "Removes all Codes of the Project with the given ID if it exists",
        "operationId": "delete_project_codes",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Project-Delete Project Codes"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/tag": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all DocumentTags of the Project",
        "description": "Returns all DocumentTags of the Project with the given ID",
        "operationId": "get_project_tags",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DocumentTagRead" },
                  "title": "Response Project-Get Project Tags"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all DocumentTags of the Project",
        "description": "Removes all DocumentTags of the Project with the given ID if it exists",
        "operationId": "delete_project_tags",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Project-Delete Project Tags"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/{user_id}/code": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Codes of the Project from a User",
        "description": "Returns all Codes of the Project from a User",
        "operationId": "get_user_codes_of_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeRead" },
                  "title": "Response Project-Get User Codes Of Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all Codes of the Project from a User",
        "description": "Removes all Codes of the Project from a User. Returns the number of removed Codes.",
        "operationId": "remove_user_codes_of_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "type": "integer", "title": "Response Project-Remove User Codes Of Project" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/{user_id}/memo": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Memos of the Project from a User",
        "description": "Returns all Memos of the Project from a User",
        "operationId": "get_user_memos_of_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } },
          {
            "name": "only_starred",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "title": "Only Starred",
              "description": "If true only starred Memos are returned",
              "default": false
            },
            "description": "If true only starred Memos are returned"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Project-Get User Memos Of Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all Memos of the Project from a User",
        "description": "Removes all Memos of the Project from a User. Returns the number of removed Memos.",
        "operationId": "remove_user_memos_of_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Project-Remove User Memos Of Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/{user_id}/action": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Actions of the Project from a User",
        "description": "Returns all Actions of the Project from a User",
        "operationId": "get_user_actions_of_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ActionRead" },
                  "title": "Response Project-Get User Actions Of Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/actions": {
      "post": {
        "tags": ["project"],
        "summary": "Returns all Actions",
        "description": "Returns all Actions of the Project",
        "operationId": "query_actions_of_project",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ActionQueryParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/ActionRead" },
                  "type": "array",
                  "title": "Response Project-Query Actions Of Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/project/{proj_id}/memo": {
      "put": {
        "tags": ["project"],
        "summary": "Adds a Memo of the current User to the Project.",
        "description": "Adds a Memo of the current User to the Project with the given ID if it exists",
        "operationId": "add_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "get": {
        "tags": ["project"],
        "summary": "Returns the Memo of the current User for the Project.",
        "description": "Returns the Memo of the current User for the Project with the given ID.",
        "operationId": "get_memos",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Project-Get Memos"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/memo/{user_id}": {
      "get": {
        "tags": ["project"],
        "summary": "Returns the Memo attached to the Project of the User with the given ID",
        "description": "Returns the Memo attached to the Project with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/resolve_filename/{filename}": {
      "get": {
        "tags": ["project"],
        "summary": "Returns the Id of the SourceDocument identified by project_id and filename if it exists",
        "description": "Returns the Id of the SourceDocument identified by project_id and filename if it exists",
        "operationId": "resolve_filename",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "filename", "in": "path", "required": true, "schema": { "type": "string", "title": "Filename" } },
          {
            "name": "only_finished",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": true, "title": "Only Finished" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "type": "integer", "title": "Response Project-Resolve Filename" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/metadata": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all ProjectMetadata",
        "description": "Returns all ProjectMetadata of the SourceDocument with the given ID if it exists",
        "operationId": "get_all_metadata",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ProjectMetadataRead" },
                  "title": "Response Project-Get All Metadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the SourceDocument",
        "description": "Returns the SourceDocument with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          {
            "name": "only_if_finished",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": true, "title": "Only If Finished" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentWithDataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["sourceDocument"],
        "summary": "Updates the SourceDocument",
        "description": "Updates the SourceDocument with the given ID.",
        "operationId": "update_sdoc",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sourceDocument"],
        "summary": "Removes the SourceDocument",
        "description": "Removes the SourceDocument with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/linked_sdocs": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the ids of SourceDocuments linked to the SourceDocument with the given id.",
        "description": "Returns the ids of SourceDocuments linked to the SourceDocument with the given id.",
        "operationId": "get_linked_sdocs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Sourcedocument-Get Linked Sdocs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/url": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the URL to the original file of the SourceDocument",
        "description": "Returns the URL to the original file of the SourceDocument with the given ID if it exists.",
        "operationId": "get_file_url",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          {
            "name": "relative",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": true, "title": "Relative" }
          },
          {
            "name": "webp",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Webp" }
          },
          {
            "name": "thumbnail",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Thumbnail" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "type": "string", "title": "Response Sourcedocument-Get File Url" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/metadata": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all SourceDocumentMetadata",
        "description": "Returns all SourceDocumentMetadata of the SourceDocument with the given ID if it exists",
        "operationId": "get_all_metadata",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SourceDocumentMetadataReadResolved" },
                  "title": "Response Sourcedocument-Get All Metadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/metadata/{metadata_key}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the SourceDocumentMetadata with the given Key",
        "description": "Returns the SourceDocumentMetadata with the given Key if it exists.",
        "operationId": "read_metadata_by_key",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          {
            "name": "metadata_key",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Metadata Key" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataReadResolved" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/metadata/{metadata_id}": {
      "patch": {
        "tags": ["sourceDocument"],
        "summary": "Updates the SourceDocumentMetadata",
        "description": "Updates the SourceDocumentMetadata with the given ID if it exists.",
        "operationId": "update_metadata_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataUpdate" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataReadResolved" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/adoc/{user_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the AnnotationDocument for the SourceDocument of the User",
        "description": "Returns the AnnotationDocument for the SourceDocument of the User.",
        "operationId": "get_adoc_of_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/adoc": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all AnnotationDocuments for the SourceDocument",
        "description": "Returns all AnnotationDocuments for the SourceDocument.",
        "operationId": "get_all_adocs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AnnotationDocumentRead" },
                  "title": "Response Sourcedocument-Get All Adocs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sourceDocument"],
        "summary": "Removes all AnnotationDocuments for the SourceDocument",
        "description": "Removes all AnnotationDocuments for the SourceDocument.",
        "operationId": "remove_all_adocs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Sourcedocument-Remove All Adocs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/tags": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all DocumentTags linked with the SourceDocument",
        "description": "Returns all DocumentTags linked with the SourceDocument.",
        "operationId": "get_all_tags",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DocumentTagRead" },
                  "title": "Response Sourcedocument-Get All Tags"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sourceDocument"],
        "summary": "Unlinks all DocumentTags with the SourceDocument",
        "description": "Unlinks all DocumentTags of the SourceDocument.",
        "operationId": "unlinks_all_tags",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/tag/{tag_id}": {
      "patch": {
        "tags": ["sourceDocument"],
        "summary": "Links a DocumentTag with the SourceDocument",
        "description": "Links a DocumentTag with the SourceDocument with the given ID if it exists",
        "operationId": "link_tag",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sourceDocument"],
        "summary": "Unlinks the DocumentTag from the SourceDocument",
        "description": "Unlinks the DocumentTags from the SourceDocument.",
        "operationId": "unlink_tag",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/memo": {
      "put": {
        "tags": ["sourceDocument"],
        "summary": "Adds a Memo to the SourceDocument",
        "description": "Adds a Memo to the SourceDocument with the given ID if it exists",
        "operationId": "add_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all Memo attached to the SourceDocument",
        "description": "Returns all Memo attached to the SourceDocument with the given ID if it exists.",
        "operationId": "get_memos",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Sourcedocument-Get Memos"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/memo/{user_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the Memo attached to the SourceDocument of the User with the given ID",
        "description": "Returns the Memo attached to the SourceDocument with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/relatedmemos/{user_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the Memo attached to the SourceDocument of the User with the given ID and all memos attached to its annotations.",
        "description": "Returns the Memo attached to the SourceDocument of the User with the given ID and all memos attached to its annotations.",
        "operationId": "get_related_user_memos",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Sourcedocument-Get Related User Memos"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/word_frequencies": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the SourceDocument's word frequencies",
        "description": "Returns the SourceDocument's word frequencies with the given ID if it exists",
        "operationId": "get_word_frequencies",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WordFrequencyRead" },
                  "title": "Response Sourcedocument-Get Word Frequencies"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag": {
      "put": {
        "tags": ["documentTag"],
        "summary": "Creates a new DocumentTag",
        "description": "Creates a new DocumentTag and returns it with the generated ID.",
        "operationId": "create_new_doc_tag",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/doctag/bulk/link": {
      "patch": {
        "tags": ["documentTag"],
        "summary": "Links multiple DocumentTags with the SourceDocuments",
        "description": "Links multiple DocumentTags with the SourceDocuments and returns the number of new Links",
        "operationId": "link_multiple_tags",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentDocumentTagMultiLink" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "type": "integer", "title": "Response Documenttag-Link Multiple Tags" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/doctag/bulk/unlink": {
      "delete": {
        "tags": ["documentTag"],
        "summary": "Unlinks all DocumentTags with the SourceDocuments",
        "description": "Unlinks all DocumentTags with the SourceDocuments and returns the number of removed Links.",
        "operationId": "unlink_multiple_tags",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentDocumentTagMultiLink" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "type": "integer", "title": "Response Documenttag-Unlink Multiple Tags" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/doctag/{tag_id}": {
      "get": {
        "tags": ["documentTag"],
        "summary": "Returns the DocumentTag",
        "description": "Returns the DocumentTag with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["documentTag"],
        "summary": "Updates the DocumentTag",
        "description": "Updates the DocumentTag with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["documentTag"],
        "summary": "Deletes the DocumentTag",
        "description": "Deletes the DocumentTag with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/{tag_id}/memo": {
      "put": {
        "tags": ["documentTag"],
        "summary": "Adds a Memo to the DocumentTag",
        "description": "Adds a Memo to the DocumentTag with the given ID if it exists",
        "operationId": "add_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "get": {
        "tags": ["documentTag"],
        "summary": "Returns the Memo attached to the DocumentTag",
        "description": "Returns the Memo attached to the DocumentTag with the given ID if it exists.",
        "operationId": "get_memos",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Documenttag-Get Memos"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/{tag_id}/memo/{user_id}": {
      "get": {
        "tags": ["documentTag"],
        "summary": "Returns the Memo attached to the SpanAnnotation of the User with the given ID",
        "description": "Returns the Memo attached to the SpanAnnotation with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/{tag_id}/sdocs": {
      "get": {
        "tags": ["documentTag"],
        "summary": "Returns all SourceDocument IDs attached to the Tag with the given ID",
        "description": "Returns all SourceDocument IDs attached to the Tag with the given ID if it exists.",
        "operationId": "get_sdoc_ids_by_tag_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Documenttag-Get Sdoc Ids By Tag Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/adoc": {
      "put": {
        "tags": ["annotationDocument"],
        "summary": "Creates an AnnotationDocument",
        "description": "Creates an AnnotationDocument",
        "operationId": "create",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/adoc/{adoc_id}": {
      "get": {
        "tags": ["annotationDocument"],
        "summary": "Returns the AnnotationDocument",
        "description": "Returns the AnnotationDocument with the given ID if it exists",
        "operationId": "get_by_adoc_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "adoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Adoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["annotationDocument"],
        "summary": "Removes the AnnotationDocument",
        "description": "Removes the AnnotationDocument with the given ID if it exists",
        "operationId": "delete_by_adoc_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "adoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Adoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotationDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/adoc/{adoc_id}/span_annotations": {
      "get": {
        "tags": ["annotationDocument"],
        "summary": "Returns all SpanAnnotations in the AnnotationDocument",
        "description": "Returns all SpanAnnotations in the AnnotationDocument with the given ID if it exists",
        "operationId": "get_all_span_annotations",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "adoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Adoc Id" } },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          },
          {
            "name": "resolve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Resolve Code",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/components/schemas/SpanAnnotationRead" },
                      { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                    ]
                  },
                  "title": "Response Annotationdocument-Get All Span Annotations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["annotationDocument"],
        "summary": "Removes all SpanAnnotations in the AnnotationDocument",
        "description": "Removes all SpanAnnotations in the AnnotationDocument with the given ID if it exists",
        "operationId": "delete_all_span_annotations",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "adoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Adoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Annotationdocument-Delete All Span Annotations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/adoc/{adoc_id}/bbox_annotations": {
      "get": {
        "tags": ["annotationDocument"],
        "summary": "Returns all BBoxAnnotations in the AnnotationDocument",
        "description": "Returns all BBoxAnnotations in the AnnotationDocument with the given ID if it exists",
        "operationId": "get_all_bbox_annotations",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "adoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Adoc Id" } },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          },
          {
            "name": "resolve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Resolve Code",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                      { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                    ]
                  },
                  "title": "Response Annotationdocument-Get All Bbox Annotations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["annotationDocument"],
        "summary": "Removes all BBoxAnnotations in the AnnotationDocument",
        "description": "Removes all BBoxAnnotations in the AnnotationDocument with the given ID if it exists",
        "operationId": "delete_all_bbox_annotations",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "adoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Adoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Annotationdocument-Delete All Bbox Annotations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/adoc/{adoc_id}/span_groups": {
      "get": {
        "tags": ["annotationDocument"],
        "summary": "Returns all SpanGroups in the AnnotationDocument",
        "description": "Returns all SpanGroups in the AnnotationDocument with the given ID if it exists",
        "operationId": "get_all_span_groups",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "adoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Adoc Id" } },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanGroupRead" },
                  "title": "Response Annotationdocument-Get All Span Groups"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span": {
      "put": {
        "tags": ["spanAnnotation"],
        "summary": "Creates a SpanAnnotation",
        "description": "Creates a SpanAnnotation",
        "operationId": "add_span_annotation",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "resolve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Resolve Code",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationCreateWithCodeId" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/SpanAnnotationRead" },
                    { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                  ],
                  "title": "Response Spanannotation-Add Span Annotation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the SpanAnnotation",
        "description": "Returns the SpanAnnotation with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } },
          {
            "name": "resolve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Resolve Code",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/SpanAnnotationRead" },
                    { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                  ],
                  "title": "Response Spanannotation-Get By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["spanAnnotation"],
        "summary": "Updates the SpanAnnotation",
        "description": "Updates the SpanAnnotation with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } },
          {
            "name": "resolve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Resolve Code",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationUpdateWithCodeId" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/SpanAnnotationRead" },
                    { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                  ],
                  "title": "Response Spanannotation-Update By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanAnnotation"],
        "summary": "Deletes the SpanAnnotation",
        "description": "Deletes the SpanAnnotation with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/SpanAnnotationRead" },
                    { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                  ],
                  "title": "Response Spanannotation-Delete By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/code": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the Code of the SpanAnnotation",
        "description": "Returns the Code of the SpanAnnotation with the given ID if it exists.",
        "operationId": "get_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/groups": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns all SpanGroups that contain the the SpanAnnotation",
        "description": "Returns all SpanGroups that contain the the SpanAnnotation.",
        "operationId": "get_all_groups",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanGroupRead" },
                  "title": "Response Spanannotation-Get All Groups"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanAnnotation"],
        "summary": "Removes the SpanAnnotation from all SpanGroups",
        "description": "Removes the SpanAnnotation from all SpanGroups",
        "operationId": "remove_from_all_groups",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/group/{group_id}": {
      "patch": {
        "tags": ["spanAnnotation"],
        "summary": "Adds the SpanAnnotation to the SpanGroup",
        "description": "Adds the SpanAnnotation to the SpanGroup",
        "operationId": "add_to_group",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } },
          { "name": "group_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Group Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanAnnotation"],
        "summary": "Removes the SpanAnnotation from the SpanGroup",
        "description": "Removes the SpanAnnotation from the SpanGroup",
        "operationId": "remove_from_group",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } },
          { "name": "group_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Group Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/memo": {
      "put": {
        "tags": ["spanAnnotation"],
        "summary": "Adds a Memo to the SpanAnnotation",
        "description": "Adds a Memo to the SpanAnnotation with the given ID if it exists",
        "operationId": "add_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the Memo attached to the SpanAnnotation",
        "description": "Returns the Memo attached to the SpanAnnotation with the given ID if it exists.",
        "operationId": "get_memos",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Spanannotation-Get Memos"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/memo/{user_id}": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the Memo attached to the SpanAnnotation of the User with the given ID",
        "description": "Returns the Memo attached to the SpanAnnotation with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/code/{code_id}/user/{user_id}": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns SpanAnnotations with the given Code of the User with the given ID",
        "description": "Returns SpanAnnotations with the given Code of the User with the given ID",
        "operationId": "get_by_user_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanAnnotationReadResolved" },
                  "title": "Response Spanannotation-Get By User Code"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/spangroup": {
      "put": {
        "tags": ["spanGroup"],
        "summary": "Creates a new SpanGroup",
        "description": "Creates a new SpanGroup and returns it with the generated ID.",
        "operationId": "create_new_span_group",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/SpanGroupRead" }, { "type": "null" }],
                  "title": "Response Spangroup-Create New Span Group"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/spangroup/{span_group_id}": {
      "get": {
        "tags": ["spanGroup"],
        "summary": "Returns the SpanGroup",
        "description": "Returns the SpanGroup with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "span_group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Span Group Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/SpanGroupRead" }, { "type": "null" }],
                  "title": "Response Spangroup-Get By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["spanGroup"],
        "summary": "Updates the SpanGroup",
        "description": "Updates the SpanGroup with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "span_group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Span Group Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/SpanGroupRead" }, { "type": "null" }],
                  "title": "Response Spangroup-Update By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanGroup"],
        "summary": "Deletes the SpanGroup",
        "description": "Deletes the SpanGroup with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "span_group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Span Group Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/SpanGroupRead" }, { "type": "null" }],
                  "title": "Response Spangroup-Delete By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/spangroup/{span_group_id}/span_annotations": {
      "get": {
        "tags": ["spanGroup"],
        "summary": "Returns all SpanAnnotations in the SpanGroup",
        "description": "Returns all SpanAnnotations in the SpanGroup with the given ID if it exists",
        "operationId": "get_all_annotations",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "span_group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Span Group Id" }
          },
          {
            "name": "resolve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Resolve Code",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      { "$ref": "#/components/schemas/SpanAnnotationRead" },
                      { "$ref": "#/components/schemas/SpanAnnotationReadResolved" }
                    ]
                  },
                  "title": "Response Spangroup-Get All Annotations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox": {
      "put": {
        "tags": ["bboxAnnotation"],
        "summary": "Creates a BBoxAnnotation",
        "description": "Creates a BBoxAnnotation",
        "operationId": "add_bbox_annotation",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "resolve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Resolve Code",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationCreateWithCodeId" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                    { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                  ],
                  "title": "Response Bboxannotation-Add Bbox Annotation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/{bbox_id}": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the BBoxAnnotation",
        "description": "Returns the BBoxAnnotation with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } },
          {
            "name": "resolve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Resolve Code",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                    { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                  ],
                  "title": "Response Bboxannotation-Get By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["bboxAnnotation"],
        "summary": "Updates the BBoxAnnotation",
        "description": "Updates the BBoxAnnotation with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } },
          {
            "name": "resolve",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Resolve Code",
              "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity",
              "default": true
            },
            "description": "If true, the current_code_id of the SpanAnnotation gets resolved and replaced by the respective Code entity"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationUpdateWithCodeId" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                    { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                  ],
                  "title": "Response Bboxannotation-Update By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["bboxAnnotation"],
        "summary": "Deletes the BBoxAnnotation",
        "description": "Deletes the BBoxAnnotation with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                    { "$ref": "#/components/schemas/BBoxAnnotationReadResolvedCode" }
                  ],
                  "title": "Response Bboxannotation-Delete By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/{bbox_id}/code": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the Code of the BBoxAnnotation",
        "description": "Returns the Code of the BBoxAnnotation with the given ID if it exists.",
        "operationId": "get_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/{bbox_id}/memo": {
      "put": {
        "tags": ["bboxAnnotation"],
        "summary": "Adds a Memo to the BBoxAnnotation",
        "description": "Adds a Memo to the BBoxAnnotation with the given ID if it exists",
        "operationId": "add_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the Memo attached to the BBoxAnnotation",
        "description": "Returns the Memo attached to the BBoxAnnotation with the given ID if it exists.",
        "operationId": "get_memos",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Bboxannotation-Get Memos"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/{bbox_id}/memo/{user_id}": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the Memo attached to the BBoxAnnotation of the User with the given ID",
        "description": "Returns the Memo attached to the BBoxAnnotation with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/code/{code_id}/user/{user_id}": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns BBoxAnnotation with the given Code of the User with the given ID",
        "description": "Returns BBoxAnnotation with the given Code of the User with the given ID",
        "operationId": "get_by_user_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                  "title": "Response Bboxannotation-Get By User Code"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code": {
      "put": {
        "tags": ["code"],
        "summary": "Creates a new Code",
        "description": "Creates a new Code and returns it with the generated ID.",
        "operationId": "create_new_code",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/code/current/{current_code_id}": {
      "get": {
        "tags": ["code"],
        "summary": "Returns the Code linked by the CurrentCode",
        "description": "Returns the Code linked by the CurrentCode with the given ID.",
        "operationId": "get_code_by_current_code_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "current_code_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Current Code Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code/{code_id}": {
      "get": {
        "tags": ["code"],
        "summary": "Returns the Code",
        "description": "Returns the Code with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["code"],
        "summary": "Updates the Code",
        "description": "Updates the Code with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["code"],
        "summary": "Deletes the Code",
        "description": "Deletes the Code with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code/{code_id}/memo": {
      "put": {
        "tags": ["code"],
        "summary": "Adds a Memo to the Code",
        "description": "Adds a Memo to the Code with the given ID if it exists",
        "operationId": "add_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "get": {
        "tags": ["code"],
        "summary": "Returns the Memo attached to the Code",
        "description": "Returns the Memo attached to the Code with the given ID if it exists.",
        "operationId": "get_memos",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Code-Get Memos"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code/{code_id}/memo/{user_id}": {
      "get": {
        "tags": ["code"],
        "summary": "Returns the Memo attached to the SpanAnnotation of the User with the given ID",
        "description": "Returns the Memo attached to the SpanAnnotation with the given ID of the User with the given ID if it exists.",
        "operationId": "get_user_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/memo/{memo_id}": {
      "get": {
        "tags": ["memo"],
        "summary": "Returns the Memo",
        "description": "Returns the Memo with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "memo_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Memo Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["memo"],
        "summary": "Updates the Memo",
        "description": "Updates the Memo with the given ID if it exists",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "memo_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Memo Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["memo"],
        "summary": "Removes the Memo",
        "description": "Removes the Memo with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "memo_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Memo Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/sdoc_new_info": {
      "post": {
        "tags": ["search"],
        "summary": "Returns Search Info.",
        "description": "Returns Search Info.",
        "operationId": "search_sdocs_new_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_SearchColumns_" },
                  "title": "Response Search-Search Sdocs New Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/sdoc_new": {
      "post": {
        "tags": ["search"],
        "summary": "Returns all SourceDocument IDs that match the query parameters.",
        "description": "Returns all SourceDocument Ids that match the query parameters.",
        "operationId": "search_sdocs_new",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "search_query",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Search Query" }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_search-search_sdocs_new" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Search-Search Sdocs New"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/code_stats": {
      "post": {
        "tags": ["search"],
        "summary": "Returns SpanEntityStats for the given SourceDocuments.",
        "description": "Returns SpanEntityStats for the given SourceDocuments.",
        "operationId": "search_code_stats",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "query", "required": true, "schema": { "type": "integer", "title": "Code Id" } },
          {
            "name": "sort_by_global",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Sort By Global" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_search-search_code_stats" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanEntityStat" },
                  "title": "Response Search-Search Code Stats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/keyword_stats": {
      "post": {
        "tags": ["search"],
        "summary": "Returns KeywordStats for the given SourceDocuments.",
        "description": "Returns KeywordStats for the given SourceDocuments.",
        "operationId": "search_keyword_stats",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "sort_by_global",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Sort By Global" }
          },
          {
            "name": "top_k",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 50, "title": "Top K" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "type": "integer" }, "title": "Sdoc Ids" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/KeywordStat" },
                  "title": "Response Search-Search Keyword Stats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/tag_stats": {
      "post": {
        "tags": ["search"],
        "summary": "Returns TagStat for the given SourceDocuments.",
        "description": "Returns Stat for the given SourceDocuments.",
        "operationId": "search_tag_stats",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "sort_by_global",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Sort By Global" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "type": "integer" }, "title": "Sdoc Ids" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TagStat" },
                  "title": "Response Search-Search Tag Stats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/lexical/memo/content": {
      "post": {
        "tags": ["search"],
        "summary": "Returns all Memos where the content matches the query via lexical search",
        "description": "Returns all Memos where the content matches the query via lexical search",
        "operationId": "search_memos_by_content_query",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoContentQuery" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedMemoSearchResults" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/lexical/memo/title": {
      "post": {
        "tags": ["search"],
        "summary": "Returns all Memos where the title matches the query via lexical search",
        "description": "Returns all Memos where the title matches the query via lexical search",
        "operationId": "search_memos_by_title_query",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoTitleQuery" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedMemoSearchResults" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/simsearch/sentences": {
      "post": {
        "tags": ["search"],
        "summary": "Returns similar sentences according to a textual or visual query.",
        "description": "Returns similar sentences according to a textual or visual query.",
        "operationId": "find_similar_sentences",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SimSearchQuery" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/SimSearchSentenceHit" },
                  "type": "array",
                  "title": "Response Search-Find Similar Sentences"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/search/simsearch/images": {
      "post": {
        "tags": ["search"],
        "summary": "Returns similar images according to a textual or visual query.",
        "description": "Returns similar images according to a textual or visual query.",
        "operationId": "find_similar_images",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SimSearchQuery" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/SimSearchImageHit" },
                  "type": "array",
                  "title": "Response Search-Find Similar Images"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/sdocmeta": {
      "put": {
        "tags": ["sdocMetadata"],
        "summary": "Creates new Metadata",
        "description": "Creates a new Metadata and returns it with the generated ID.",
        "operationId": "create_new_metadata",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/sdocmeta/{metadata_id}": {
      "get": {
        "tags": ["sdocMetadata"],
        "summary": "Returns the Metadata",
        "description": "Returns the Metadata with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataReadResolved" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["sdocMetadata"],
        "summary": "Updates the Metadata",
        "description": "Updates the Metadata with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataUpdate" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sdocMetadata"],
        "summary": "Deletes the Metadata",
        "description": "Deletes the Metadata with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/feedback": {
      "get": {
        "tags": ["feedback"],
        "summary": "Returns all Feedback",
        "description": "Returns the Metadata with the given ID.",
        "operationId": "get_all",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/FeedbackRead" },
                  "type": "array",
                  "title": "Response Feedback-Get All"
                }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      },
      "put": {
        "tags": ["feedback"],
        "summary": "Creates new Feedback",
        "description": "Creates a new Feedback and returns it with the generated ID.",
        "operationId": "create_feedback",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeedbackCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeedbackRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/feedback/{feedback_id}": {
      "get": {
        "tags": ["feedback"],
        "summary": "Returns the Feedback",
        "description": "Returns the Feedback with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Feedback Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeedbackRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/feedback/user/{user_id}": {
      "get": {
        "tags": ["feedback"],
        "summary": "Returns all Feedback of a User",
        "description": "Returns the Metadata of the User with the given ID.",
        "operationId": "get_all_by_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FeedbackRead" },
                  "title": "Response Feedback-Get All By User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/feedback/reply_to/{feedback_id}": {
      "post": {
        "tags": ["feedback"],
        "summary": "Reply to the Feedback",
        "description": "Sends an e-mail to the User that created the Feedback with the given message.",
        "operationId": "reply_to",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "feedback_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Feedback Id" }
          },
          { "name": "message", "in": "query", "required": true, "schema": { "type": "string", "title": "Message" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "type": "string", "title": "Response Feedback-Reply To" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/code_frequencies": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns all SourceDocument IDs that match the query parameters.",
        "description": "Returns all SourceDocument Ids that match the query parameters.",
        "operationId": "code_frequencies",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_analysis-code_frequencies" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeFrequency" },
                  "title": "Response Analysis-Code Frequencies"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/code_occurrences": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns all SourceDocument IDs that match the query parameters.",
        "description": "Returns all SourceDocument Ids that match the query parameters.",
        "operationId": "code_occurrences",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          { "name": "code_id", "in": "query", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "type": "integer" }, "title": "User Ids" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeOccurrence" },
                  "title": "Response Analysis-Code Occurrences"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/annotation_occurrences": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns AnnotationOccurrences.",
        "description": "Returns AnnotationOccurrences.",
        "operationId": "annotation_occurrences",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          { "name": "code_id", "in": "query", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "type": "integer" }, "title": "User Ids" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AnnotationOccurrence" },
                  "title": "Response Analysis-Annotation Occurrences"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/annotated_segments_info": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns AnnotationSegments Info.",
        "description": "Returns AnnotationSegments Info.",
        "operationId": "annotated_segments_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_AnnotatedSegmentsColumns_" },
                  "title": "Response Analysis-Annotated Segments Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/annotated_segments": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns AnnotationSegments.",
        "description": "Returns AnnotationSegments.",
        "operationId": "annotated_segments",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          { "name": "page", "in": "query", "required": true, "schema": { "type": "integer", "title": "Page" } },
          {
            "name": "page_size",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Page Size" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_analysis-annotated_segments" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnotatedSegmentResult" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/timeline_analysis_valid_docments/{project_id}/metadata/{date_metadata_id}}": {
      "get": {
        "tags": ["analysis"],
        "summary": "Returns TimelineAnalysis Info.",
        "description": "Returns TimelineAnalysis Info.",
        "operationId": "get_timeline_analysis_valid_documents",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "date_metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Date Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 2,
                  "prefixItems": [{ "type": "integer" }, { "type": "integer" }],
                  "maxItems": 2,
                  "title": "Response Analysis-Get Timeline Analysis Valid Documents"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/timeline_analysis2_info/{project_id}": {
      "get": {
        "tags": ["analysis"],
        "summary": "Returns TimelineAnalysis Info.",
        "description": "Returns TimelineAnalysis Info.",
        "operationId": "timeline_analysis2_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_TimelineAnalysisColumns_" },
                  "title": "Response Analysis-Timeline Analysis2 Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/timeline_analysis2": {
      "post": {
        "tags": ["analysis"],
        "summary": "Perform new timeline analysis.",
        "description": "Perform new timeline analysis.",
        "operationId": "timeline_analysis2",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/DateGroupBy" }
          },
          {
            "name": "project_metadata_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Metadata Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Filter_TimelineAnalysisColumns_" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TimelineAnalysisResultNew" },
                  "title": "Response Analysis-Timeline Analysis2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/word_frequency_analysis_info/{project_id}": {
      "get": {
        "tags": ["analysis"],
        "summary": "Returns WordFrequency Info.",
        "description": "Returns WordFrequency Info.",
        "operationId": "word_frequency_analysis_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_WordFrequencyColumns_" },
                  "title": "Response Analysis-Word Frequency Analysis Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/word_frequency_analysis": {
      "post": {
        "tags": ["analysis"],
        "summary": "Perform word frequency analysis.",
        "description": "Perform word frequency analysis.",
        "operationId": "word_frequency_analysis",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          { "name": "page", "in": "query", "required": true, "schema": { "type": "integer", "title": "Page" } },
          {
            "name": "page_size",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Page Size" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_analysis-word_frequency_analysis" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WordFrequencyResult" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/prepro/{prepro_job_id}": {
      "get": {
        "tags": ["prepro"],
        "summary": "Returns the PreprocessingJob for the given ID",
        "description": "Returns the PreprocessingJob for the given ID if it exists",
        "operationId": "get_prepro_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "prepro_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Prepro Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PreprocessingJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/prepro/{prepro_job_id}/abort": {
      "patch": {
        "tags": ["prepro"],
        "summary": "Aborts the PreprocessingJob for the given ID",
        "description": "Aborts the PreprocessingJob for the given ID if it exists",
        "operationId": "abort_prepro_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "prepro_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Prepro Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PreprocessingJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/prepro/project/{project_id}": {
      "get": {
        "tags": ["prepro"],
        "summary": "Returns all PreprocessingJobs for the given project ID",
        "description": "Returns all PreprocessingJobs for the given project ID if it exists",
        "operationId": "get_all_prepro_jobs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PreprocessingJobRead" },
                  "title": "Response Prepro-Get All Prepro Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/prepro/project/{proj_id}/status": {
      "get": {
        "tags": ["prepro"],
        "summary": "Returns the PreProProjectStatus of the Project with the given ID.",
        "description": "Returns the PreProProjectStatus of the Project with the given ID.",
        "operationId": "get_project_prepro_status",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PreProProjectStatus" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/export": {
      "post": {
        "tags": ["export"],
        "summary": "Returns the ExportJob for the given Parameters",
        "description": "Returns the ExportJob for the given Parameters",
        "operationId": "start_export_job",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportJobParameters-Input" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/export/{export_job_id}": {
      "get": {
        "tags": ["export"],
        "summary": "Returns the ExportJob for the given ID",
        "description": "Returns the ExportJob for the given ID if it exists",
        "operationId": "get_export_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "export_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Export Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/crawler": {
      "post": {
        "tags": ["crawler"],
        "summary": "Returns the CrawlerJob for the given Parameters",
        "description": "Returns the CrawlerJob for the given Parameters",
        "operationId": "start_crawler_job",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerJobParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/crawler/{crawler_job_id}": {
      "get": {
        "tags": ["crawler"],
        "summary": "Returns the CrawlerJob for the given ID",
        "description": "Returns the CrawlerJob for the given ID if it exists",
        "operationId": "get_crawler_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "crawler_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Crawler Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/crawler/project/{project_id}": {
      "get": {
        "tags": ["crawler"],
        "summary": "Returns all CrawlerJobs for the given project ID",
        "description": "Returns all CrawlerJobs for the given project ID if it exists",
        "operationId": "get_all_crawler_jobs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CrawlerJobRead" },
                  "title": "Response Crawler-Get All Crawler Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysisTable": {
      "put": {
        "tags": ["analysisTable"],
        "summary": "Creates an AnalysisTable",
        "description": "Creates an AnalysisTable",
        "operationId": "create",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisTableCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisTableRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/analysisTable/{analysis_table_id}": {
      "get": {
        "tags": ["analysisTable"],
        "summary": "Returns the AnalysisTable",
        "description": "Returns the AnalysisTable with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "analysis_table_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Analysis Table Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisTableRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["analysisTable"],
        "summary": "Updates the Analysis Table",
        "description": "Updates the Analysis Table with the given ID if it exists",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "analysis_table_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Analysis Table Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisTableUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisTableRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["analysisTable"],
        "summary": "Removes the AnalysisTable",
        "description": "Removes the AnalysisTable with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "analysis_table_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Analysis Table Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalysisTableRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysisTable/project/{project_id}/user/{user_id}": {
      "get": {
        "tags": ["analysisTable"],
        "summary": "Returns AnalysisTables of the Project of the User",
        "description": "Returns the AnalysisTable of the Project with the given ID and the User with the given ID if it exists",
        "operationId": "get_by_project_and_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AnalysisTableRead" },
                  "title": "Response Analysistable-Get By Project And User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/whiteboard": {
      "put": {
        "tags": ["whiteboard"],
        "summary": "Creates an Whiteboard",
        "description": "Creates an Whiteboard",
        "operationId": "create",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/whiteboard/{whiteboard_id}": {
      "get": {
        "tags": ["whiteboard"],
        "summary": "Returns the Whiteboard",
        "description": "Returns the Whiteboard with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "whiteboard_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Whiteboard Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["whiteboard"],
        "summary": "Updates the Whiteboard",
        "description": "Updates the Whiteboard with the given ID if it exists",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "whiteboard_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Whiteboard Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["whiteboard"],
        "summary": "Removes the Whiteboard",
        "description": "Removes the Whiteboard with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "whiteboard_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Whiteboard Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/whiteboard/project/{project_id}": {
      "get": {
        "tags": ["whiteboard"],
        "summary": "Returns Whiteboards of the Project ",
        "description": "Returns the Whiteboards of the Project with the given ID",
        "operationId": "get_by_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WhiteboardRead" },
                  "title": "Response Whiteboard-Get By Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/whiteboard/project/{project_id}/user/{user_id}": {
      "get": {
        "tags": ["whiteboard"],
        "summary": "Returns Whiteboards of the Project of the User",
        "description": "Returns the Whiteboard of the Project with the given ID and the User with the given ID if it exists",
        "operationId": "get_by_project_and_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WhiteboardRead" },
                  "title": "Response Whiteboard-Get By Project And User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/projmeta": {
      "put": {
        "tags": ["projectMetadata"],
        "summary": "Creates new Metadata",
        "description": "Creates a new Metadata and returns it with the generated ID.",
        "operationId": "create_new_metadata",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/projmeta/{metadata_id}": {
      "get": {
        "tags": ["projectMetadata"],
        "summary": "Returns the Metadata",
        "description": "Returns the Metadata with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["projectMetadata"],
        "summary": "Updates the Metadata",
        "description": "Updates the Metadata with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["projectMetadata"],
        "summary": "Deletes the Metadata",
        "description": "Deletes the Metadata with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionQueryParameters": {
        "properties": {
          "proj_id": { "type": "integer", "title": "Proj Id", "description": "ID of the Project" },
          "user_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "User Ids",
            "description": "IDs of the Users"
          },
          "action_types": {
            "items": { "$ref": "#/components/schemas/ActionType" },
            "type": "array",
            "title": "Action Types",
            "description": "Types of the Actions"
          },
          "action_targets": {
            "items": { "$ref": "#/components/schemas/ActionTargetObjectType" },
            "type": "array",
            "title": "Action Targets",
            "description": "Types of the Action Targets"
          },
          "timestamp_from": {
            "type": "integer",
            "title": "Timestamp From",
            "description": "Start date of the Actions"
          },
          "timestamp_to": { "type": "integer", "title": "Timestamp To", "description": "End date of the Actions" }
        },
        "type": "object",
        "required": ["proj_id", "user_ids", "action_types", "action_targets", "timestamp_from", "timestamp_to"],
        "title": "ActionQueryParameters"
      },
      "ActionRead": {
        "properties": {
          "action_type": {
            "allOf": [{ "$ref": "#/components/schemas/ActionType" }],
            "description": "Type of the Action"
          },
          "target_id": { "type": "integer", "title": "Target Id", "description": "ID of the Target of the Action" },
          "target_type": {
            "allOf": [{ "$ref": "#/components/schemas/ActionTargetObjectType" }],
            "description": "Type of the Target the target_id refers to"
          },
          "before_state": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Before State",
            "description": "The before state of the target object in JSON."
          },
          "after_state": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "After State",
            "description": "The after state of the target object in JSON."
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the Action" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the Action belongs to" },
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project the Action belongs to" },
          "executed": {
            "type": "string",
            "format": "date-time",
            "title": "Executed",
            "description": "Executed timestamp of the Action"
          }
        },
        "type": "object",
        "required": ["action_type", "target_id", "target_type", "id", "user_id", "project_id", "executed"],
        "title": "ActionRead"
      },
      "ActionTargetObjectType": {
        "type": "string",
        "enum": [
          "memo",
          "annotation_document",
          "source_document",
          "code",
          "span_annotation",
          "span_group",
          "bbox_annotation",
          "project",
          "document_tag"
        ],
        "title": "ActionTargetObjectType"
      },
      "ActionType": { "type": "string", "enum": ["CREATE", "READ", "UPDATE", "DELETE"], "title": "ActionType" },
      "AnalysisTableCreate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the AnalysisTable" },
          "content": { "type": "string", "title": "Content", "description": "Content of the AnalysisTable" },
          "table_type": {
            "allOf": [{ "$ref": "#/components/schemas/TableType" }],
            "description": "TABLETYPE of the AnalysisTable"
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the AnalysisTable belongs to"
          },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the AnalysisTable belongs to" }
        },
        "type": "object",
        "required": ["title", "content", "table_type", "project_id", "user_id"],
        "title": "AnalysisTableCreate"
      },
      "AnalysisTableRead": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the AnalysisTable" },
          "content": { "type": "string", "title": "Content", "description": "Content of the AnalysisTable" },
          "table_type": {
            "allOf": [{ "$ref": "#/components/schemas/TableType" }],
            "description": "TABLETYPE of the AnalysisTable"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the AnalysisTable" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the AnalysisTable belongs to"
          },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the AnalysisTable belongs to" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the AnalysisTable"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the AnalysisTable"
          }
        },
        "type": "object",
        "required": ["title", "content", "table_type", "id", "project_id", "user_id", "created", "updated"],
        "title": "AnalysisTableRead"
      },
      "AnalysisTableUpdate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the AnalysisTable" },
          "content": { "type": "string", "title": "Content", "description": "Content of the AnalysisTable" },
          "table_type": {
            "allOf": [{ "$ref": "#/components/schemas/TableType" }],
            "description": "TABLETYPE of the AnalysisTable"
          }
        },
        "type": "object",
        "required": ["title", "content", "table_type"],
        "title": "AnalysisTableUpdate"
      },
      "AnnotatedSegmentResult": {
        "properties": {
          "total_results": {
            "type": "integer",
            "title": "Total Results",
            "description": "The total number of span_annotation_ids. Used for pagination."
          },
          "span_annotation_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Span Annotation Ids",
            "description": "The SpanAnnotation IDs."
          }
        },
        "type": "object",
        "required": ["total_results", "span_annotation_ids"],
        "title": "AnnotatedSegmentResult"
      },
      "AnnotatedSegmentsColumns": {
        "type": "string",
        "enum": [
          "ASC_SOURCE_SOURCE_DOCUMENT_FILENAME",
          "ASC_DOCUMENT_DOCUMENT_TAG_ID_LIST",
          "ASC_CODE_ID",
          "ASC_SPAN_TEXT",
          "ASC_MEMO_CONTENT"
        ],
        "title": "AnnotatedSegmentsColumns"
      },
      "AnnotationDocumentCreate": {
        "properties": {
          "source_document_id": {
            "type": "integer",
            "title": "Source Document Id",
            "description": "SourceDocument the AnnotationDocument relates to"
          },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the AnnotationDocument belongs to" }
        },
        "type": "object",
        "required": ["source_document_id", "user_id"],
        "title": "AnnotationDocumentCreate"
      },
      "AnnotationDocumentRead": {
        "properties": {
          "source_document_id": {
            "type": "integer",
            "title": "Source Document Id",
            "description": "SourceDocument the AnnotationDocument relates to"
          },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the AnnotationDocument belongs to" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the AnnotationDocument" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the AnnotationDocument"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the AnnotationDocument"
          }
        },
        "type": "object",
        "required": ["source_document_id", "user_id", "id", "created", "updated"],
        "title": "AnnotationDocumentRead"
      },
      "AnnotationOccurrence": {
        "properties": {
          "annotation": {
            "anyOf": [
              { "$ref": "#/components/schemas/SpanAnnotationRead" },
              { "$ref": "#/components/schemas/BBoxAnnotationRead" }
            ],
            "title": "Annotation",
            "description": "The Annotation"
          },
          "code": { "allOf": [{ "$ref": "#/components/schemas/CodeRead" }], "description": "The occuring Code." },
          "sdoc": {
            "allOf": [{ "$ref": "#/components/schemas/SourceDocumentRead" }],
            "description": "The SourceDocument where the Code occurs."
          },
          "text": { "type": "string", "title": "Text", "description": "The Text of the Annotation" }
        },
        "type": "object",
        "required": ["annotation", "code", "sdoc", "text"],
        "title": "AnnotationOccurrence"
      },
      "AttachedObjectType": {
        "type": "string",
        "enum": [
          "annotation_document",
          "source_document",
          "code",
          "span_annotation",
          "span_group",
          "bbox_annotation",
          "project",
          "document_tag"
        ],
        "title": "AttachedObjectType"
      },
      "BBoxAnnotationCreateWithCodeId": {
        "properties": {
          "x_min": {
            "type": "integer",
            "title": "X Min",
            "description": "Absolute x_min coordinate of the BBoxAnnotation"
          },
          "x_max": {
            "type": "integer",
            "title": "X Max",
            "description": "Absolute x_max coordinate of the BBoxAnnotation"
          },
          "y_min": {
            "type": "integer",
            "title": "Y Min",
            "description": "Absolute y_min coordinate of the BBoxAnnotation"
          },
          "y_max": {
            "type": "integer",
            "title": "Y Max",
            "description": "Absolute y_max coordinate of the BBoxAnnotation"
          },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the BBoxAnnotation refers to" },
          "annotation_document_id": {
            "type": "integer",
            "title": "Annotation Document Id",
            "description": "AnnotationDocument the BBoxAnnotation refers to"
          }
        },
        "type": "object",
        "required": ["x_min", "x_max", "y_min", "y_max", "code_id", "annotation_document_id"],
        "title": "BBoxAnnotationCreateWithCodeId"
      },
      "BBoxAnnotationRead": {
        "properties": {
          "x_min": {
            "type": "integer",
            "title": "X Min",
            "description": "Absolute x_min coordinate of the BBoxAnnotation"
          },
          "x_max": {
            "type": "integer",
            "title": "X Max",
            "description": "Absolute x_max coordinate of the BBoxAnnotation"
          },
          "y_min": {
            "type": "integer",
            "title": "Y Min",
            "description": "Absolute y_min coordinate of the BBoxAnnotation"
          },
          "y_max": {
            "type": "integer",
            "title": "Y Max",
            "description": "Absolute y_max coordinate of the BBoxAnnotation"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the BBoxAnnotation" },
          "current_code_id": {
            "type": "integer",
            "title": "Current Code Id",
            "description": "CurrentCode the BBoxAnnotation refers to"
          },
          "annotation_document_id": {
            "type": "integer",
            "title": "Annotation Document Id",
            "description": "AnnotationDocument the BBoxAnnotation refers to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the BBoxAnnotation"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the BBoxAnnotation"
          }
        },
        "type": "object",
        "required": [
          "x_min",
          "x_max",
          "y_min",
          "y_max",
          "id",
          "current_code_id",
          "annotation_document_id",
          "created",
          "updated"
        ],
        "title": "BBoxAnnotationRead"
      },
      "BBoxAnnotationReadResolvedCode": {
        "properties": {
          "x_min": {
            "type": "integer",
            "title": "X Min",
            "description": "Absolute x_min coordinate of the BBoxAnnotation"
          },
          "x_max": {
            "type": "integer",
            "title": "X Max",
            "description": "Absolute x_max coordinate of the BBoxAnnotation"
          },
          "y_min": {
            "type": "integer",
            "title": "Y Min",
            "description": "Absolute y_min coordinate of the BBoxAnnotation"
          },
          "y_max": {
            "type": "integer",
            "title": "Y Max",
            "description": "Absolute y_max coordinate of the BBoxAnnotation"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the BBoxAnnotation" },
          "code": {
            "allOf": [{ "$ref": "#/components/schemas/CodeRead" }],
            "description": "Code the BBoxAnnotation refers to"
          },
          "annotation_document_id": {
            "type": "integer",
            "title": "Annotation Document Id",
            "description": "AnnotationDocument the BBoxAnnotation refers to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the BBoxAnnotation"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the BBoxAnnotation"
          }
        },
        "type": "object",
        "required": ["x_min", "x_max", "y_min", "y_max", "id", "code", "annotation_document_id", "created", "updated"],
        "title": "BBoxAnnotationReadResolvedCode"
      },
      "BBoxAnnotationUpdateWithCodeId": {
        "properties": {
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the BBoxAnnotation refers to" }
        },
        "type": "object",
        "required": ["code_id"],
        "title": "BBoxAnnotationUpdateWithCodeId"
      },
      "BackgroundJobStatus": {
        "type": "string",
        "enum": ["Waiting", "Running", "Finished", "Errorneous", "Aborted"],
        "title": "BackgroundJobStatus"
      },
      "Body_analysis-annotated_segments": {
        "properties": {
          "user_ids": { "items": { "type": "integer" }, "type": "array", "title": "User Ids" },
          "filter": { "$ref": "#/components/schemas/Filter_AnnotatedSegmentsColumns_" },
          "sorts": {
            "items": { "$ref": "#/components/schemas/Sort_AnnotatedSegmentsColumns_" },
            "type": "array",
            "title": "Sorts"
          }
        },
        "type": "object",
        "required": ["user_ids", "filter", "sorts"],
        "title": "Body_analysis-annotated_segments"
      },
      "Body_analysis-code_frequencies": {
        "properties": {
          "code_ids": { "items": { "type": "integer" }, "type": "array", "title": "Code Ids" },
          "user_ids": { "items": { "type": "integer" }, "type": "array", "title": "User Ids" }
        },
        "type": "object",
        "required": ["code_ids", "user_ids"],
        "title": "Body_analysis-code_frequencies"
      },
      "Body_analysis-word_frequency_analysis": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/Filter_WordFrequencyColumns_" },
          "sorts": {
            "items": { "$ref": "#/components/schemas/Sort_WordFrequencyColumns_" },
            "type": "array",
            "title": "Sorts"
          }
        },
        "type": "object",
        "required": ["filter", "sorts"],
        "title": "Body_analysis-word_frequency_analysis"
      },
      "Body_authentication-login": {
        "properties": {
          "grant_type": {
            "anyOf": [{ "type": "string", "pattern": "password" }, { "type": "null" }],
            "title": "Grant Type"
          },
          "username": { "type": "string", "title": "Username" },
          "password": { "type": "string", "title": "Password" },
          "scope": { "type": "string", "title": "Scope", "default": "" },
          "client_id": { "anyOf": [{ "type": "string" }, { "type": "null" }], "title": "Client Id" },
          "client_secret": { "anyOf": [{ "type": "string" }, { "type": "null" }], "title": "Client Secret" }
        },
        "type": "object",
        "required": ["username", "password"],
        "title": "Body_authentication-login"
      },
      "Body_project-upload_project_sdoc": {
        "properties": {
          "uploaded_files": {
            "items": { "type": "string", "format": "binary" },
            "type": "array",
            "title": "Uploaded Files",
            "description": "File(s) that get uploaded and represented by the SourceDocument(s)"
          }
        },
        "type": "object",
        "required": ["uploaded_files"],
        "title": "Body_project-upload_project_sdoc"
      },
      "Body_search-search_code_stats": {
        "properties": {
          "user_ids": { "items": { "type": "integer" }, "type": "array", "title": "User Ids" },
          "sdoc_ids": { "items": { "type": "integer" }, "type": "array", "title": "Sdoc Ids" }
        },
        "type": "object",
        "required": ["user_ids", "sdoc_ids"],
        "title": "Body_search-search_code_stats"
      },
      "Body_search-search_sdocs_new": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/Filter_SearchColumns_" },
          "sorts": {
            "items": { "$ref": "#/components/schemas/Sort_SearchColumns_" },
            "type": "array",
            "title": "Sorts"
          }
        },
        "type": "object",
        "required": ["filter", "sorts"],
        "title": "Body_search-search_sdocs_new"
      },
      "BooleanOperator": { "const": "BOOLEAN_EQUALS", "title": "BooleanOperator" },
      "CodeCreate": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the Code" },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Color",
            "description": "Color of the Code"
          },
          "description": { "type": "string", "title": "Description", "description": "Description of the Code" },
          "parent_code_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Code Id",
            "description": "Parent of the Code"
          },
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project the Code belongs to" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the Code belongs to" }
        },
        "type": "object",
        "required": ["name", "description", "project_id", "user_id"],
        "title": "CodeCreate"
      },
      "CodeFrequency": {
        "properties": {
          "code_id": { "type": "integer", "title": "Code Id", "description": "The id of the code." },
          "count": { "type": "integer", "title": "Count", "description": "The number of occurrences of the code." }
        },
        "type": "object",
        "required": ["code_id", "count"],
        "title": "CodeFrequency"
      },
      "CodeOccurrence": {
        "properties": {
          "sdoc": {
            "allOf": [{ "$ref": "#/components/schemas/SourceDocumentRead" }],
            "description": "The SourceDocument where the Code occurs."
          },
          "code": { "allOf": [{ "$ref": "#/components/schemas/CodeRead" }], "description": "The occuring Code." },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "A text span of the SourceDocument annotated with the Code."
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "The number of occurrences of the text span annotated with the Code in the SourceDocument."
          }
        },
        "type": "object",
        "required": ["sdoc", "code", "text", "count"],
        "title": "CodeOccurrence"
      },
      "CodeRead": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the Code" },
          "color": { "type": "string", "title": "Color", "description": "Color of the Code" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Code" },
          "parent_code_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Code Id",
            "description": "Parent of the Code"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the Code" },
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project the Code belongs to" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the Code belongs to" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the Code"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Code"
          }
        },
        "type": "object",
        "required": ["name", "color", "description", "id", "project_id", "user_id", "created", "updated"],
        "title": "CodeRead"
      },
      "CodeUpdate": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "Name of the Code"
          },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Color",
            "description": "Color of the Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the Code"
          },
          "parent_code_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Code Id",
            "description": "Parent of the Code"
          }
        },
        "type": "object",
        "title": "CodeUpdate"
      },
      "ColumnInfo_AnnotatedSegmentsColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/AnnotatedSegmentsColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[AnnotatedSegmentsColumns]"
      },
      "ColumnInfo_SearchColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SearchColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[SearchColumns]"
      },
      "ColumnInfo_TimelineAnalysisColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/TimelineAnalysisColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[TimelineAnalysisColumns]"
      },
      "ColumnInfo_WordFrequencyColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/WordFrequencyColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[WordFrequencyColumns]"
      },
      "CrawlerJobParameters": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to import the crawled data."
          },
          "urls": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Urls",
            "description": "List of URLs to crawl."
          }
        },
        "type": "object",
        "required": ["project_id", "urls"],
        "title": "CrawlerJobParameters"
      },
      "CrawlerJobRead": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/BackgroundJobStatus" }],
            "description": "Status of the CrawlerJob",
            "default": "Waiting"
          },
          "id": { "type": "string", "title": "Id", "description": "ID of the CrawlerJob" },
          "parameters": {
            "allOf": [{ "$ref": "#/components/schemas/CrawlerJobParameters" }],
            "description": "The parameters of the crawler job that defines what to crawl!"
          },
          "output_dir": {
            "type": "string",
            "title": "Output Dir",
            "description": "Internal temporary output directory for the crawled data."
          },
          "images_store_path": {
            "type": "string",
            "title": "Images Store Path",
            "description": "Internal temporary output directory for the crawled images."
          },
          "videos_store_path": {
            "type": "string",
            "title": "Videos Store Path",
            "description": "Internal temporary output directory for the crawled videos."
          },
          "audios_store_path": {
            "type": "string",
            "title": "Audios Store Path",
            "description": "Internal temporary output directory for the crawled audios."
          },
          "crawled_data_zip_path": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Crawled Data Zip Path",
            "description": "Path to the ZIP that contains the data of the CrawlerJob"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the CrawlerJob"
          }
        },
        "type": "object",
        "required": [
          "id",
          "parameters",
          "output_dir",
          "images_store_path",
          "videos_store_path",
          "audios_store_path",
          "created"
        ],
        "title": "CrawlerJobRead"
      },
      "DateGroupBy": { "type": "string", "enum": ["YEAR", "MONTH", "DAY"], "title": "DateGroupBy" },
      "DateOperator": {
        "type": "string",
        "enum": ["DATE_EQUALS", "DATE_GT", "DATE_LT", "DATE_GTE", "DATE_LTE"],
        "title": "DateOperator"
      },
      "DocType": { "type": "string", "enum": ["text", "image", "video", "audio"], "title": "DocType" },
      "DocumentTagCreate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the DocumentTag" },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Color",
            "description": "Color of the Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the DocumentTag"
          },
          "parent_tag_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Tag Id",
            "description": "Parent of the DocumentTag"
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the DocumentTag belongs to"
          }
        },
        "type": "object",
        "required": ["title", "project_id"],
        "title": "DocumentTagCreate"
      },
      "DocumentTagRead": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the DocumentTag" },
          "color": { "type": "string", "title": "Color", "description": "Color of the DocumentTag" },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the DocumentTag"
          },
          "parent_tag_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Tag Id",
            "description": "Parent of the DocumentTag"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the DocumentTag" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the DocumentTag belongs to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the DocumentTag"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the DocumentTag"
          }
        },
        "type": "object",
        "required": ["title", "color", "id", "project_id", "created", "updated"],
        "title": "DocumentTagRead"
      },
      "DocumentTagUpdate": {
        "properties": {
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title",
            "description": "Title of the DocumentTag"
          },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Color",
            "description": "Color of the DocumentTag"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the DocumentTag"
          },
          "parent_tag_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Tag Id",
            "description": "Parent of the DocumentTag"
          }
        },
        "type": "object",
        "title": "DocumentTagUpdate"
      },
      "ExportFormat": { "type": "string", "enum": ["CSV", "JSON"], "title": "ExportFormat" },
      "ExportJobParameters-Input": {
        "properties": {
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          },
          "export_format": {
            "anyOf": [{ "$ref": "#/components/schemas/ExportFormat" }, { "type": "null" }],
            "description": "The format of the exported data.",
            "default": "CSV"
          },
          "specific_export_job_parameters": {
            "anyOf": [
              { "$ref": "#/components/schemas/SingleProjectAllDataExportJobParams" },
              { "$ref": "#/components/schemas/SingleProjectAllTagsExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllDataExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllCodesExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllMemosExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserLogbookExportJobParams" },
              { "$ref": "#/components/schemas/SingleDocAllUserAnnotationsExportJobParams" },
              { "$ref": "#/components/schemas/SingleDocSingleUserAnnotationsExportJobParams" }
            ],
            "title": "Specific Export Job Parameters",
            "description": "Specific parameters for the export job w.r.t it's type"
          }
        },
        "type": "object",
        "required": ["export_job_type", "specific_export_job_parameters"],
        "title": "ExportJobParameters"
      },
      "ExportJobParameters-Output": {
        "properties": {
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)"
          },
          "export_format": {
            "anyOf": [{ "$ref": "#/components/schemas/ExportFormat" }, { "type": "null" }],
            "description": "The format of the exported data.",
            "default": "CSV"
          },
          "specific_export_job_parameters": {
            "anyOf": [
              { "$ref": "#/components/schemas/SingleProjectAllDataExportJobParams" },
              { "$ref": "#/components/schemas/SingleProjectAllTagsExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllDataExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllCodesExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllMemosExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserLogbookExportJobParams" },
              { "$ref": "#/components/schemas/SingleDocAllUserAnnotationsExportJobParams" },
              { "$ref": "#/components/schemas/SingleDocSingleUserAnnotationsExportJobParams" }
            ],
            "title": "Specific Export Job Parameters",
            "description": "Specific parameters for the export job w.r.t it's type"
          }
        },
        "type": "object",
        "required": ["export_job_type", "specific_export_job_parameters"],
        "title": "ExportJobParameters"
      },
      "ExportJobRead": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/BackgroundJobStatus" }],
            "description": "Status of the ExportJob",
            "default": "Waiting"
          },
          "results_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Results Url",
            "description": "URL to download the results when done."
          },
          "id": { "type": "string", "title": "Id", "description": "ID of the ExportJob" },
          "parameters": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobParameters-Output" }],
            "description": "The parameters of the export job that defines what to export!"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the ExportJob"
          }
        },
        "type": "object",
        "required": ["id", "parameters", "created"],
        "title": "ExportJobRead"
      },
      "ExportJobType": {
        "type": "string",
        "enum": [
          "SINGLE_PROJECT_ALL_DATA",
          "SINGLE_PROJECT_ALL_TAGS",
          "SINGLE_USER_ALL_DATA",
          "SINGLE_USER_ALL_CODES",
          "SINGLE_USER_ALL_MEMOS",
          "SINGLE_USER_LOGBOOK",
          "SINGLE_DOC_ALL_USER_ANNOTATIONS",
          "SINGLE_DOC_SINGLE_USER_ANNOTATIONS"
        ],
        "title": "ExportJobType"
      },
      "FeedbackCreate": {
        "properties": {
          "user_content": { "type": "string", "title": "User Content", "description": "User message of the Feedback" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User who created the Feedback" }
        },
        "type": "object",
        "required": ["user_content", "user_id"],
        "title": "FeedbackCreate"
      },
      "FeedbackRead": {
        "properties": {
          "user_content": { "type": "string", "title": "User Content", "description": "User message of the Feedback" },
          "id": { "type": "string", "title": "Id", "description": "ID of the Feedback" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User who created the Feedback" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the Feedback"
          }
        },
        "type": "object",
        "required": ["user_content", "id", "user_id", "created"],
        "title": "FeedbackRead"
      },
      "FilterExpression_AnnotatedSegmentsColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/AnnotatedSegmentsColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["column", "operator", "value"],
        "title": "FilterExpression[AnnotatedSegmentsColumns]"
      },
      "FilterExpression_SearchColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SearchColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["column", "operator", "value"],
        "title": "FilterExpression[SearchColumns]"
      },
      "FilterExpression_TimelineAnalysisColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/TimelineAnalysisColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["column", "operator", "value"],
        "title": "FilterExpression[TimelineAnalysisColumns]"
      },
      "FilterExpression_WordFrequencyColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/WordFrequencyColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["column", "operator", "value"],
        "title": "FilterExpression[WordFrequencyColumns]"
      },
      "FilterOperator": {
        "type": "string",
        "enum": ["BOOLEAN", "STRING", "ID", "NUMBER", "ID_LIST", "LIST", "DATE"],
        "title": "FilterOperator"
      },
      "FilterValueType": {
        "type": "string",
        "enum": ["SDOC_ID", "CODE_ID", "USER_ID", "TAG_ID", "SPAN_ANNOTATION", "DOC_TYPE", "INFER_FROM_OPERATOR"],
        "title": "FilterValueType"
      },
      "Filter_AnnotatedSegmentsColumns_": {
        "properties": {
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_AnnotatedSegmentsColumns_" },
                { "$ref": "#/components/schemas/Filter_AnnotatedSegmentsColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["items", "logic_operator"],
        "title": "Filter[AnnotatedSegmentsColumns]"
      },
      "Filter_SearchColumns_": {
        "properties": {
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_SearchColumns_" },
                { "$ref": "#/components/schemas/Filter_SearchColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["items", "logic_operator"],
        "title": "Filter[SearchColumns]"
      },
      "Filter_TimelineAnalysisColumns_": {
        "properties": {
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_TimelineAnalysisColumns_" },
                { "$ref": "#/components/schemas/Filter_TimelineAnalysisColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["items", "logic_operator"],
        "title": "Filter[TimelineAnalysisColumns]"
      },
      "Filter_WordFrequencyColumns_": {
        "properties": {
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_WordFrequencyColumns_" },
                { "$ref": "#/components/schemas/Filter_WordFrequencyColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["items", "logic_operator"],
        "title": "Filter[WordFrequencyColumns]"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": { "items": { "$ref": "#/components/schemas/ValidationError" }, "type": "array", "title": "Detail" }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IDListOperator": { "const": "ID_LIST_CONTAINS", "title": "IDListOperator" },
      "IDOperator": { "type": "string", "enum": ["ID_EQUALS", "ID_NOT_EQUALS"], "title": "IDOperator" },
      "KeywordStat": {
        "properties": {
          "keyword": { "type": "string", "title": "Keyword", "description": "The counted keyword." },
          "filtered_count": {
            "type": "integer",
            "title": "Filtered Count",
            "description": "Number of occurrences of the keyword in the filtered collection"
          },
          "global_count": {
            "type": "integer",
            "title": "Global Count",
            "description": "Number of occurrences of the keyword in the entire collection"
          }
        },
        "type": "object",
        "required": ["keyword", "filtered_count", "global_count"],
        "title": "KeywordStat"
      },
      "ListOperator": { "const": "LIST_CONTAINS", "title": "ListOperator" },
      "LogicalOperator": {
        "type": "string",
        "enum": ["or", "and"],
        "title": "LogicalOperator",
        "description": "This tells our filter how to combine multiple column expressions."
      },
      "MemoContentQuery": {
        "properties": {
          "proj_id": {
            "type": "integer",
            "title": "Proj Id",
            "description": "The ID of the Project the Memo have to belong to."
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User the Memo have to belong to."
          },
          "starred": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Starred",
            "description": "If set (i.e. not NULL / NONE), only returns Memo that have the given starred status"
          },
          "content_query": {
            "type": "string",
            "minLength": 1,
            "title": "Content Query",
            "description": "The query term to search within the content of the Memo"
          }
        },
        "type": "object",
        "required": ["proj_id", "user_id", "content_query"],
        "title": "MemoContentQuery"
      },
      "MemoCreate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Memo" },
          "content": { "type": "string", "title": "Content", "description": "Content of the Memo" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the Memo belongs to" },
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project the Memo belongs to" },
          "starred": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Starred",
            "description": "Starred flag of the Memo",
            "default": false
          }
        },
        "type": "object",
        "required": ["title", "content", "user_id", "project_id"],
        "title": "MemoCreate"
      },
      "MemoRead": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Memo" },
          "content": { "type": "string", "title": "Content", "description": "Content of the Memo" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the Memo" },
          "starred": { "type": "boolean", "title": "Starred", "description": "Starred flag of the Memo" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the Memo belongs to" },
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project the Memo belongs to" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the Memo"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Memo"
          },
          "attached_object_id": {
            "type": "integer",
            "title": "Attached Object Id",
            "description": "ID of the Object the Memo is attached to"
          },
          "attached_object_type": {
            "allOf": [{ "$ref": "#/components/schemas/AttachedObjectType" }],
            "description": "Type of the Object the ID refers to"
          }
        },
        "type": "object",
        "required": [
          "title",
          "content",
          "id",
          "starred",
          "user_id",
          "project_id",
          "created",
          "updated",
          "attached_object_id",
          "attached_object_type"
        ],
        "title": "MemoRead"
      },
      "MemoTitleQuery": {
        "properties": {
          "proj_id": {
            "type": "integer",
            "title": "Proj Id",
            "description": "The ID of the Project the Memo have to belong to."
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User the Memo have to belong to."
          },
          "starred": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Starred",
            "description": "If set (i.e. not NULL / NONE), only returns Memo that have the given starred status"
          },
          "title_query": {
            "type": "string",
            "minLength": 1,
            "title": "Title Query",
            "description": "The query term to search within the title of the Memo"
          },
          "prefix": {
            "type": "boolean",
            "title": "Prefix",
            "description": "If true, filename prefix search is done. If false exact title is searched."
          }
        },
        "type": "object",
        "required": ["proj_id", "user_id", "title_query", "prefix"],
        "title": "MemoTitleQuery"
      },
      "MemoUpdate": {
        "properties": {
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title",
            "description": "Title of the Memo"
          },
          "content": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Content",
            "description": "Content of the Memo"
          },
          "starred": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Starred",
            "description": "Starred flag of the Memo"
          }
        },
        "type": "object",
        "title": "MemoUpdate"
      },
      "MetaType": { "type": "string", "enum": ["STRING", "NUMBER", "DATE", "BOOLEAN", "LIST"], "title": "MetaType" },
      "NumberOperator": {
        "type": "string",
        "enum": ["NUMBER_EQUALS", "NUMBER_NOT_EQUALS", "NUMBER_GT", "NUMBER_LT", "NUMBER_GTE", "NUMBER_LTE"],
        "title": "NumberOperator"
      },
      "PaginatedMemoSearchResults": {
        "properties": {
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Flag that indicates whether there are more search results."
          },
          "total": { "type": "integer", "title": "Total", "description": "The total number of results." },
          "current_page_offset": {
            "type": "integer",
            "title": "Current Page Offset",
            "description": "The offset that returns the current results."
          },
          "next_page_offset": {
            "type": "integer",
            "title": "Next Page Offset",
            "description": "The offset that returns the next results."
          },
          "memos": {
            "items": { "$ref": "#/components/schemas/MemoRead" },
            "type": "array",
            "title": "Memos",
            "description": "The Memo search results on the requested page."
          }
        },
        "type": "object",
        "required": ["has_more", "total", "current_page_offset", "next_page_offset", "memos"],
        "title": "PaginatedMemoSearchResults"
      },
      "PaginatedSourceDocumentReads": {
        "properties": {
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Flag that indicates whether there are more search results."
          },
          "total": { "type": "integer", "title": "Total", "description": "The total number of results." },
          "current_page_offset": {
            "type": "integer",
            "title": "Current Page Offset",
            "description": "The offset that returns the current results."
          },
          "next_page_offset": {
            "type": "integer",
            "title": "Next Page Offset",
            "description": "The offset that returns the next results."
          },
          "sdocs": {
            "items": { "$ref": "#/components/schemas/SourceDocumentRead" },
            "type": "array",
            "title": "Sdocs",
            "description": "The SourceDocuments on this page"
          }
        },
        "type": "object",
        "required": ["has_more", "total", "current_page_offset", "next_page_offset", "sdocs"],
        "title": "PaginatedSourceDocumentReads"
      },
      "PreProProjectStatus": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project ID this PreProProjectStatus refers to."
          },
          "active_prepro_job_ids": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Active Prepro Job Ids",
            "description": "List of active PreprocessingJob UUIDs"
          },
          "num_active_prepro_job_payloads": {
            "type": "integer",
            "title": "Num Active Prepro Job Payloads",
            "description": "Number of active PreprocessingJobPayloads"
          },
          "erroneous_prepro_job_payload_ids": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Erroneous Prepro Job Payload Ids",
            "description": "List of erroneous or aborted PreprocessingJobPayload UUIDs"
          },
          "num_sdocs_finished": {
            "type": "integer",
            "title": "Num Sdocs Finished",
            "description": "Number of SourceDocuments preprocessing has finished."
          },
          "num_sdocs_total": {
            "type": "integer",
            "title": "Num Sdocs Total",
            "description": "Number of total SourceDocuments."
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "active_prepro_job_ids",
          "num_active_prepro_job_payloads",
          "erroneous_prepro_job_payload_ids",
          "num_sdocs_finished",
          "num_sdocs_total"
        ],
        "title": "PreProProjectStatus"
      },
      "PreprocessingJobPayloadRead": {
        "properties": {
          "id": { "type": "string", "title": "Id", "description": "ID of the PreprocessingJobPayload" },
          "prepro_job_id": {
            "type": "string",
            "title": "Prepro Job Id",
            "description": "UUID of the PreprocessingJob this payload belongs to."
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "ID of the Project of the PreprocessingJobPayload"
          },
          "source_document_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Source Document Id",
            "description": "ID of the SourceDocument that was created from the payload."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/BackgroundJobStatus" }],
            "description": "The current status of the payload.",
            "default": "Waiting"
          },
          "filename": {
            "type": "string",
            "title": "Filename",
            "description": "The filename of the document to be preprocessed."
          },
          "mime_type": { "type": "string", "title": "Mime Type", "description": "The MIME type of the payload file." },
          "doc_type": {
            "allOf": [{ "$ref": "#/components/schemas/DocType" }],
            "description": "The DocType of the payload file."
          },
          "current_pipeline_step": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Current Pipeline Step",
            "description": "The current step in the preprocessing pipeline."
          },
          "error_message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Error Message",
            "description": "The error message if the payload failed."
          }
        },
        "type": "object",
        "required": ["id", "prepro_job_id", "project_id", "filename", "mime_type", "doc_type"],
        "title": "PreprocessingJobPayloadRead"
      },
      "PreprocessingJobRead": {
        "properties": {
          "id": { "type": "string", "title": "Id", "description": "UUID of the PreprocessingJob" },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/BackgroundJobStatus" }],
            "description": "Status of the PreprocessingJob",
            "default": "Waiting"
          },
          "project_id": { "type": "integer", "title": "Project Id", "description": "The ID of the Project." },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the PreprocessingJob"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the PreprocessingJob"
          },
          "payloads": {
            "items": { "$ref": "#/components/schemas/PreprocessingJobPayloadRead" },
            "type": "array",
            "title": "Payloads",
            "description": "Payloads of the PreprocessingJobs, i.e., documents to be preprocessed and imported to the project within this PreprocessingJob"
          }
        },
        "type": "object",
        "required": ["id", "project_id", "created", "updated", "payloads"],
        "title": "PreprocessingJobRead"
      },
      "ProjectCreate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Project" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Project" }
        },
        "type": "object",
        "required": ["title", "description"],
        "title": "ProjectCreate"
      },
      "ProjectMetadataCreate": {
        "properties": {
          "key": { "type": "string", "title": "Key", "description": "Key of the ProjectMetadata" },
          "metatype": {
            "allOf": [{ "$ref": "#/components/schemas/MetaType" }],
            "description": "Type of the ProjectMetadata"
          },
          "read_only": {
            "type": "boolean",
            "title": "Read Only",
            "description": "Flag that tells if the ProjectMetadata cannot be changed. Used for system generated metadata! Use False for user metadata.",
            "default": false
          },
          "doctype": {
            "allOf": [{ "$ref": "#/components/schemas/DocType" }],
            "description": "DOCTYPE of the SourceDocument this metadata refers to"
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the ProjectMetadata belongs to"
          }
        },
        "type": "object",
        "required": ["key", "metatype", "doctype", "project_id"],
        "title": "ProjectMetadataCreate"
      },
      "ProjectMetadataRead": {
        "properties": {
          "key": { "type": "string", "title": "Key", "description": "Key of the ProjectMetadata" },
          "metatype": {
            "allOf": [{ "$ref": "#/components/schemas/MetaType" }],
            "description": "Type of the ProjectMetadata"
          },
          "read_only": {
            "type": "boolean",
            "title": "Read Only",
            "description": "Flag that tells if the ProjectMetadata cannot be changed. Used for system generated metadata! Use False for user metadata.",
            "default": false
          },
          "doctype": {
            "allOf": [{ "$ref": "#/components/schemas/DocType" }],
            "description": "DOCTYPE of the SourceDocument this metadata refers to"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the ProjectMetadata" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the ProjectMetadata belongs to"
          }
        },
        "type": "object",
        "required": ["key", "metatype", "doctype", "id", "project_id"],
        "title": "ProjectMetadataRead"
      },
      "ProjectMetadataUpdate": {
        "properties": {
          "key": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Key",
            "description": "Key of the ProjectMetadata"
          },
          "metatype": {
            "anyOf": [{ "$ref": "#/components/schemas/MetaType" }, { "type": "null" }],
            "description": "Type of the ProjectMetadata"
          }
        },
        "type": "object",
        "required": ["metatype"],
        "title": "ProjectMetadataUpdate"
      },
      "ProjectRead": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Project" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Project" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the Project" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the Project"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Project"
          }
        },
        "type": "object",
        "required": ["title", "description", "id", "created", "updated"],
        "title": "ProjectRead"
      },
      "ProjectUpdate": {
        "properties": {
          "title": { "title": "Title", "type": "string", "description": "Title of the Project" },
          "description": { "title": "Description", "type": "string", "description": "Description of the Project" }
        }
      },
      "PublicUserRead": {
        "title": "PublicUserRead",
        "required": ["id", "first_name", "last_name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "integer", "description": "ID of the User" },
          "first_name": { "title": "First Name", "type": "string", "description": "First name of the User" },
          "last_name": { "title": "Last Name", "type": "string", "description": "Last name of the User" }
        },
        "description": "A user object with information that everybody may see."
      },
      "SDocStatus": {
        "title": "SDocStatus",
        "enum": ["unfinished_or_erroneous", "finished"],
        "type": "string",
        "description": "An enumeration."
      },
      "SearchColumns": {
        "type": "string",
        "enum": [
          "SC_SOURCE_DOCUMENT_FILENAME",
          "SC_SOURCE_DOCUMENT_TYPE",
          "SC_DOCUMENT_TAG_ID_LIST",
          "SC_CODE_ID_LIST",
          "SC_USER_ID_LIST",
          "SC_SPAN_ANNOTATIONS"
        ],
        "title": "SearchColumns"
      },
      "SimSearchImageHit": {
        "properties": {
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "The ID of the SourceDocument similar to the query."
          },
          "score": { "type": "number", "title": "Score", "description": "The similarity score." }
        },
        "type": "object",
        "required": ["sdoc_id", "score"],
        "title": "SimSearchImageHit"
      },
      "SimSearchQuery": {
        "properties": {
          "proj_id": {
            "type": "integer",
            "title": "Proj Id",
            "description": "The ID of the Project the SourceDocuments have to belong to."
          },
          "query": {
            "anyOf": [{ "type": "string" }, { "items": { "type": "string" }, "type": "array" }, { "type": "integer" }],
            "title": "Query",
            "description": "The query term. This can be either a single string, a list of strings for which the average embedding gets computed, or an integer which is interpreted as the SDoc ID of an Image."
          },
          "top_k": {
            "type": "integer",
            "title": "Top K",
            "description": "The number of results to return.",
            "default": 10
          },
          "threshold": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "Threshold",
            "description": "The minimum distance to use for the sim search.",
            "default": 0
          }
        },
        "type": "object",
        "required": ["proj_id", "query"],
        "title": "SimSearchQuery"
      },
      "SimSearchSentenceHit": {
        "properties": {
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "The ID of the SourceDocument similar to the query."
          },
          "score": { "type": "number", "title": "Score", "description": "The similarity score." },
          "sentence_id": {
            "type": "integer",
            "title": "Sentence Id",
            "description": "The sentence id with respect to the SourceDocument"
          }
        },
        "type": "object",
        "required": ["sdoc_id", "score", "sentence_id"],
        "title": "SimSearchSentenceHit"
      },
      "SingleDocAllUserAnnotationsExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)",
            "default": "SINGLE_DOC_ALL_USER_ANNOTATIONS"
          },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "The ID of the SDocument to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "sdoc_id"],
        "title": "SingleDocAllUserAnnotationsExportJobParams"
      },
      "SingleDocSingleUserAnnotationsExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)",
            "default": "SINGLE_DOC_SINGLE_USER_ANNOTATIONS"
          },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "The ID of the SDocument to get the data from."
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "sdoc_id", "user_id"],
        "title": "SingleDocSingleUserAnnotationsExportJobParams"
      },
      "SingleProjectAllDataExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)",
            "default": "SINGLE_PROJECT_ALL_DATA"
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "SingleProjectAllDataExportJobParams"
      },
      "SingleProjectAllTagsExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)",
            "default": "SINGLE_PROJECT_ALL_TAGS"
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "SingleProjectAllTagsExportJobParams"
      },
      "SingleUserAllCodesExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)",
            "default": "SINGLE_USER_ALL_CODES"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "user_id"],
        "title": "SingleUserAllCodesExportJobParams"
      },
      "SingleUserAllDataExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)",
            "default": "SINGLE_USER_ALL_DATA"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "user_id"],
        "title": "SingleUserAllDataExportJobParams"
      },
      "SingleUserAllMemosExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)",
            "default": "SINGLE_USER_ALL_MEMOS"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "user_id"],
        "title": "SingleUserAllMemosExportJobParams"
      },
      "SingleUserLogbookExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "allOf": [{ "$ref": "#/components/schemas/ExportJobType" }],
            "description": "The type of the export job (what to export)",
            "default": "SINGLE_USER_LOGBOOK"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "user_id"],
        "title": "SingleUserLogbookExportJobParams"
      },
      "SortDirection": { "type": "string", "enum": ["asc", "desc"], "title": "SortDirection" },
      "Sort_AnnotatedSegmentsColumns_": {
        "properties": {
          "column": { "$ref": "#/components/schemas/AnnotatedSegmentsColumns" },
          "direction": { "$ref": "#/components/schemas/SortDirection" }
        },
        "type": "object",
        "required": ["column", "direction"],
        "title": "Sort[AnnotatedSegmentsColumns]"
      },
      "Sort_SearchColumns_": {
        "properties": {
          "column": { "$ref": "#/components/schemas/SearchColumns" },
          "direction": { "$ref": "#/components/schemas/SortDirection" }
        },
        "type": "object",
        "required": ["column", "direction"],
        "title": "Sort[SearchColumns]"
      },
      "Sort_WordFrequencyColumns_": {
        "properties": {
          "column": { "$ref": "#/components/schemas/WordFrequencyColumns" },
          "direction": { "$ref": "#/components/schemas/SortDirection" }
        },
        "type": "object",
        "required": ["column", "direction"],
        "title": "Sort[WordFrequencyColumns]"
      },
      "SourceDocumentDocumentTagMultiLink": {
        "properties": {
          "source_document_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Source Document Ids",
            "description": "List of IDs of SourceDocuments"
          },
          "document_tag_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Document Tag Ids",
            "description": "List of IDs of DocumentTags"
          }
        },
        "type": "object",
        "required": ["source_document_ids", "document_tag_ids"],
        "title": "SourceDocumentDocumentTagMultiLink"
      },
      "SourceDocumentMetadataCreate": {
        "properties": {
          "int_value": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Int Value",
            "description": "Int Value of the SourceDocumentMetadata"
          },
          "str_value": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Str Value",
            "description": "String Value of the SourceDocumentMetadata"
          },
          "boolean_value": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Boolean Value",
            "description": "Boolean Value of the SourceDocumentMetadata"
          },
          "date_value": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Date Value",
            "description": "Date Value of the SourceDocumentMetadata"
          },
          "list_value": {
            "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
            "title": "List Value",
            "description": "List Value of the SourceDocumentMetadata"
          },
          "source_document_id": {
            "type": "integer",
            "title": "Source Document Id",
            "description": "SourceDocument the SourceDocumentMetadata belongs to"
          },
          "project_metadata_id": {
            "type": "integer",
            "title": "Project Metadata Id",
            "description": "ID of the ProjectMetadata"
          }
        },
        "type": "object",
        "required": [
          "int_value",
          "str_value",
          "boolean_value",
          "date_value",
          "list_value",
          "source_document_id",
          "project_metadata_id"
        ],
        "title": "SourceDocumentMetadataCreate"
      },
      "SourceDocumentMetadataRead": {
        "properties": {
          "int_value": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Int Value",
            "description": "Int Value of the SourceDocumentMetadata"
          },
          "str_value": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Str Value",
            "description": "String Value of the SourceDocumentMetadata"
          },
          "boolean_value": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Boolean Value",
            "description": "Boolean Value of the SourceDocumentMetadata"
          },
          "date_value": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Date Value",
            "description": "Date Value of the SourceDocumentMetadata"
          },
          "list_value": {
            "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
            "title": "List Value",
            "description": "List Value of the SourceDocumentMetadata"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SourceDocumentMetadata" },
          "project_metadata_id": {
            "type": "integer",
            "title": "Project Metadata Id",
            "description": "ID of the ProjectMetadata"
          },
          "source_document_id": {
            "type": "integer",
            "title": "Source Document Id",
            "description": "SourceDocument the SourceDocumentMetadata belongs to"
          }
        },
        "type": "object",
        "required": [
          "int_value",
          "str_value",
          "boolean_value",
          "date_value",
          "list_value",
          "id",
          "project_metadata_id",
          "source_document_id"
        ],
        "title": "SourceDocumentMetadataRead"
      },
      "SourceDocumentMetadataReadResolved": {
        "properties": {
          "int_value": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Int Value",
            "description": "Int Value of the SourceDocumentMetadata"
          },
          "str_value": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Str Value",
            "description": "String Value of the SourceDocumentMetadata"
          },
          "boolean_value": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Boolean Value",
            "description": "Boolean Value of the SourceDocumentMetadata"
          },
          "date_value": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Date Value",
            "description": "Date Value of the SourceDocumentMetadata"
          },
          "list_value": {
            "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
            "title": "List Value",
            "description": "List Value of the SourceDocumentMetadata"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SourceDocumentMetadata" },
          "source_document_id": {
            "type": "integer",
            "title": "Source Document Id",
            "description": "SourceDocument the SourceDocumentMetadata belongs to"
          },
          "project_metadata": {
            "allOf": [{ "$ref": "#/components/schemas/ProjectMetadataRead" }],
            "description": "ProjectMetadata of the SourceDocumentMetadata"
          }
        },
        "type": "object",
        "required": [
          "int_value",
          "str_value",
          "boolean_value",
          "date_value",
          "list_value",
          "id",
          "source_document_id",
          "project_metadata"
        ],
        "title": "SourceDocumentMetadataReadResolved"
      },
      "SourceDocumentMetadataUpdate": {
        "properties": {
          "int_value": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Int Value",
            "description": "Int Value of the SourceDocumentMetadata"
          },
          "str_value": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Str Value",
            "description": "String Value of the SourceDocumentMetadata"
          },
          "boolean_value": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Boolean Value",
            "description": "Boolean Value of the SourceDocumentMetadata"
          },
          "date_value": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Date Value",
            "description": "Date Value of the SourceDocumentMetadata"
          },
          "list_value": {
            "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
            "title": "List Value",
            "description": "List Value of the SourceDocumentMetadata"
          }
        },
        "type": "object",
        "required": ["int_value", "str_value", "boolean_value", "date_value", "list_value"],
        "title": "SourceDocumentMetadataUpdate"
      },
      "SourceDocumentRead": {
        "properties": {
          "filename": {
            "type": "string",
            "maxLength": 230,
            "title": "Filename",
            "description": "Filename of the SourceDocument"
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "User-defined name of the document"
          },
          "doctype": {
            "allOf": [{ "$ref": "#/components/schemas/DocType" }],
            "description": "DOCTYPE of the SourceDocument"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/SDocStatus" }],
            "description": "Status of the SourceDocument"
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the SourceDocument belongs to"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SourceDocument" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "The created timestamp of the SourceDocument"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Memo"
          }
        },
        "type": "object",
        "required": ["filename", "doctype", "status", "project_id", "id", "created", "updated"],
        "title": "SourceDocumentRead"
      },
      "SourceDocumentUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User-defined name of the document (default is the filename)"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "SourceDocumentUpdate"
      },
      "SourceDocumentWithDataRead": {
        "properties": {
          "id": { "type": "integer", "title": "Id", "description": "ID of the SourceDocument" },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Raw,original content of the SourceDocument"
          },
          "html": { "type": "string", "title": "Html", "description": "Processed HTML of the SourceDocument" },
          "token_starts": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Token Starts",
            "description": "Start of each token in character offsets in content"
          },
          "token_ends": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Token Ends",
            "description": "End of each token in character offsets in content"
          },
          "sentence_starts": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sentence Starts",
            "description": "Start of each sentence in character offsets in content"
          },
          "sentence_ends": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sentence Ends",
            "description": "End of each sentence in character offsets in content"
          },
          "tokens": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Tokens",
            "description": "List of tokens in the SourceDocument"
          },
          "token_character_offsets": {
            "items": {
              "prefixItems": [{ "type": "integer" }, { "type": "integer" }],
              "type": "array",
              "maxItems": 2,
              "minItems": 2
            },
            "type": "array",
            "title": "Token Character Offsets",
            "description": "List of character offsets of each token"
          },
          "sentences": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Sentences",
            "description": "List of sentences in the SourceDocument"
          },
          "sentence_character_offsets": {
            "items": {
              "prefixItems": [{ "type": "integer" }, { "type": "integer" }],
              "type": "array",
              "maxItems": 2,
              "minItems": 2
            },
            "type": "array",
            "title": "Sentence Character Offsets",
            "description": "List of character offsets of each sentence"
          },
          "filename": {
            "type": "string",
            "maxLength": 230,
            "title": "Filename",
            "description": "Filename of the SourceDocument"
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "User-defined name of the document"
          },
          "doctype": {
            "allOf": [{ "$ref": "#/components/schemas/DocType" }],
            "description": "DOCTYPE of the SourceDocument"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/SDocStatus" }],
            "description": "Status of the SourceDocument"
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the SourceDocument belongs to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "The created timestamp of the SourceDocument"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Memo"
          }
        },
        "type": "object",
        "required": [
          "id",
          "content",
          "html",
          "token_starts",
          "token_ends",
          "sentence_starts",
          "sentence_ends",
          "tokens",
          "token_character_offsets",
          "sentences",
          "sentence_character_offsets",
          "filename",
          "doctype",
          "status",
          "project_id",
          "created",
          "updated"
        ],
        "title": "SourceDocumentWithDataRead"
      },
      "SpanAnnotationCreateWithCodeId": {
        "properties": {
          "begin": { "type": "integer", "title": "Begin", "description": "Begin of the SpanAnnotation in characters" },
          "end": { "type": "integer", "title": "End", "description": "End of the SpanAnnotation in characters" },
          "begin_token": {
            "type": "integer",
            "title": "Begin Token",
            "description": "Begin of the SpanAnnotation in tokens"
          },
          "end_token": {
            "type": "integer",
            "title": "End Token",
            "description": "End of the SpanAnnotation in tokens"
          },
          "span_text": {
            "type": "string",
            "title": "Span Text",
            "description": "The SpanText the SpanAnnotation spans."
          },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SpanAnnotation refers to" },
          "annotation_document_id": {
            "type": "integer",
            "title": "Annotation Document Id",
            "description": "AnnotationDocument the SpanAnnotation refers to"
          }
        },
        "type": "object",
        "required": ["begin", "end", "begin_token", "end_token", "span_text", "code_id", "annotation_document_id"],
        "title": "SpanAnnotationCreateWithCodeId"
      },
      "SpanAnnotationRead": {
        "properties": {
          "begin": { "type": "integer", "title": "Begin", "description": "Begin of the SpanAnnotation in characters" },
          "end": { "type": "integer", "title": "End", "description": "End of the SpanAnnotation in characters" },
          "begin_token": {
            "type": "integer",
            "title": "Begin Token",
            "description": "Begin of the SpanAnnotation in tokens"
          },
          "end_token": {
            "type": "integer",
            "title": "End Token",
            "description": "End of the SpanAnnotation in tokens"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SpanAnnotation" },
          "span_text_id": {
            "type": "string",
            "title": "Span Text Id",
            "description": "The SpanText the SpanAnnotation spans."
          },
          "current_code_id": {
            "type": "integer",
            "title": "Current Code Id",
            "description": "CurrentCode the SpanAnnotation refers to"
          },
          "annotation_document_id": {
            "type": "integer",
            "title": "Annotation Document Id",
            "description": "AnnotationDocument the SpanAnnotation refers to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the SpanAnnotation"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the SpanAnnotation"
          }
        },
        "type": "object",
        "required": [
          "begin",
          "end",
          "begin_token",
          "end_token",
          "id",
          "span_text_id",
          "current_code_id",
          "annotation_document_id",
          "created",
          "updated"
        ],
        "title": "SpanAnnotationRead"
      },
      "SpanAnnotationReadResolved": {
        "properties": {
          "begin": { "type": "integer", "title": "Begin", "description": "Begin of the SpanAnnotation in characters" },
          "end": { "type": "integer", "title": "End", "description": "End of the SpanAnnotation in characters" },
          "begin_token": {
            "type": "integer",
            "title": "Begin Token",
            "description": "Begin of the SpanAnnotation in tokens"
          },
          "end_token": {
            "type": "integer",
            "title": "End Token",
            "description": "End of the SpanAnnotation in tokens"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SpanAnnotation" },
          "span_text": {
            "type": "string",
            "title": "Span Text",
            "description": "The SpanText the SpanAnnotation spans."
          },
          "code": {
            "allOf": [{ "$ref": "#/components/schemas/CodeRead" }],
            "description": "Code the SpanAnnotation refers to"
          },
          "annotation_document_id": {
            "type": "integer",
            "title": "Annotation Document Id",
            "description": "AnnotationDocument the SpanAnnotation refers to"
          },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the SpanAnnotation belongs to" },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "SourceDocument the SpanAnnotation refers to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the SpanAnnotation"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the SpanAnnotation"
          }
        },
        "type": "object",
        "required": [
          "begin",
          "end",
          "begin_token",
          "end_token",
          "id",
          "span_text",
          "code",
          "annotation_document_id",
          "user_id",
          "sdoc_id",
          "created",
          "updated"
        ],
        "title": "SpanAnnotationReadResolved"
      },
      "SpanAnnotationUpdateWithCodeId": {
        "properties": {
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SpanAnnotation refers to" }
        },
        "type": "object",
        "required": ["code_id"],
        "title": "SpanAnnotationUpdateWithCodeId"
      },
      "SpanEntityStat": {
        "properties": {
          "code_id": {
            "type": "integer",
            "title": "Code Id",
            "description": "The ID of the Code related to the SpanAnnotation"
          },
          "span_text": {
            "type": "string",
            "title": "Span Text",
            "description": "The SpanText the SpanAnnotation spans"
          },
          "filtered_count": {
            "type": "integer",
            "title": "Filtered Count",
            "description": "Number of occurrences of the SpanEntity in a collection of SourceDocuments."
          },
          "global_count": {
            "type": "integer",
            "title": "Global Count",
            "description": "Number of occurrences of the SpanEntity in a collection of SourceDocuments."
          }
        },
        "type": "object",
        "required": ["code_id", "span_text", "filtered_count", "global_count"],
        "title": "SpanEntityStat"
      },
      "SpanGroupCreate": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the SpanGroup" },
          "annotation_document_id": {
            "type": "integer",
            "title": "Annotation Document Id",
            "description": "The ID of the AnnotationDocument the SpanGroup belongs to"
          }
        },
        "type": "object",
        "required": ["name", "annotation_document_id"],
        "title": "SpanGroupCreate"
      },
      "SpanGroupRead": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the SpanGroup" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SpanGroup" },
          "annotation_document_id": {
            "type": "integer",
            "title": "Annotation Document Id",
            "description": "The ID of the AnnotationDocument the SpanGroup belongs to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the SpanGroup"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the SpanGroup"
          }
        },
        "type": "object",
        "required": ["name", "id", "annotation_document_id", "created", "updated"],
        "title": "SpanGroupRead"
      },
      "SpanGroupUpdate": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "Name of the SpanGroup"
          }
        },
        "type": "object",
        "title": "SpanGroupUpdate"
      },
      "StringOperator": {
        "type": "string",
        "enum": ["STRING_CONTAINS", "STRING_EQUALS", "STRING_NOT_EQUALS", "STRING_STARTS_WITH", "STRING_ENDS_WITH"],
        "title": "StringOperator"
      },
      "TableType": {
        "type": "string",
        "enum": ["custom", "situation", "phenomenon", "interpretation"],
        "title": "TableType"
      },
      "TagStat": {
        "properties": {
          "tag": {
            "allOf": [{ "$ref": "#/components/schemas/DocumentTagRead" }],
            "description": "The counted document tag."
          },
          "filtered_count": {
            "type": "integer",
            "title": "Filtered Count",
            "description": "Number of occurrences of the document tag in the filtered documents"
          },
          "global_count": {
            "type": "integer",
            "title": "Global Count",
            "description": "Number of occurrences of the document tag in all documents"
          }
        },
        "type": "object",
        "required": ["tag", "filtered_count", "global_count"],
        "title": "TagStat"
      },
      "TimelineAnalysisColumns": {
        "type": "string",
        "enum": [
          "TA_SOURCE_DOCUMENT_FILENAME",
          "TA_DOCUMENT_TAG_ID_LIST",
          "TA_CODE_ID_LIST",
          "TA_USER_ID_LIST",
          "TA_SPAN_ANNOTATIONS"
        ],
        "title": "TimelineAnalysisColumns"
      },
      "TimelineAnalysisResultNew": {
        "properties": {
          "date": { "type": "string", "title": "Date", "description": "The date." },
          "sdoc_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sdoc Ids",
            "description": "The SourceDoument IDs."
          }
        },
        "type": "object",
        "required": ["date", "sdoc_ids"],
        "title": "TimelineAnalysisResultNew"
      },
      "UserAuthorizationHeaderData": {
        "properties": {
          "access_token": { "type": "string", "title": "Access Token", "description": "Value of the JWT" },
          "token_type": { "type": "string", "title": "Token Type", "description": "Type of the Token" }
        },
        "type": "object",
        "required": ["access_token", "token_type"],
        "title": "UserAuthorizationHeaderData"
      },
      "UserCreate": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email", "description": "E-Mail of the User" },
          "first_name": { "type": "string", "title": "First Name", "description": "First name of the User" },
          "last_name": { "type": "string", "title": "Last Name", "description": "Last name of the User" },
          "password": { "type": "string", "title": "Password", "description": "Hashed password of the User" }
        },
        "type": "object",
        "required": ["email", "first_name", "last_name", "password"],
        "title": "UserCreate"
      },
      "UserRead": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email", "description": "E-Mail of the User" },
          "first_name": { "type": "string", "title": "First Name", "description": "First name of the User" },
          "last_name": { "type": "string", "title": "Last Name", "description": "Last name of the User" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the User" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the User"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the User"
          }
        },
        "type": "object",
        "required": ["email", "first_name", "last_name", "id", "created", "updated"],
        "title": "UserRead"
      },
      "UserUpdate": {
        "properties": {
          "email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email",
            "description": "E-Mail of the User"
          },
          "first_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Name",
            "description": "First name of the User"
          },
          "last_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Name",
            "description": "Last name of the User"
          },
          "password": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Password",
            "description": "Hashed password of the User"
          }
        },
        "type": "object",
        "title": "UserUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "WhiteboardCreate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Whiteboard" },
          "content": { "type": "string", "title": "Content", "description": "Content of the Whiteboard" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the Whiteboard belongs to"
          },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the Whiteboard belongs to" }
        },
        "type": "object",
        "required": ["title", "content", "project_id", "user_id"],
        "title": "WhiteboardCreate"
      },
      "WhiteboardRead": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Whiteboard" },
          "content": { "type": "string", "title": "Content", "description": "Content of the Whiteboard" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the Whiteboard" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the Whiteboard belongs to"
          },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the Whiteboard belongs to" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the Whiteboard"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Whiteboard"
          }
        },
        "type": "object",
        "required": ["title", "content", "id", "project_id", "user_id", "created", "updated"],
        "title": "WhiteboardRead"
      },
      "WhiteboardUpdate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Whiteboard" },
          "content": { "type": "string", "title": "Content", "description": "Content of the Whiteboard" }
        },
        "type": "object",
        "required": ["title", "content"],
        "title": "WhiteboardUpdate"
      },
      "WordFrequencyColumns": {
        "type": "string",
        "enum": [
          "WF_WORD",
          "WF_WORD_FREQUENCY",
          "WF_WORD_PERCENT",
          "WF_SOURCE_DOCUMENT_FREQUENCY",
          "WF_SOURCE_DOCUMENT_PERCENT",
          "WF_SOURCE_DOCUMENT_FILENAME",
          "WF_DOCUMENT_TAG_ID_LIST",
          "WF_CODE_ID_LIST",
          "WF_USER_ID_LIST",
          "WF_SPAN_ANNOTATIONS"
        ],
        "title": "WordFrequencyColumns"
      },
      "WordFrequencyRead": {
        "properties": {
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "ID of the SourceDocument" },
          "word": { "type": "string", "title": "Word", "description": "Word" },
          "count": { "type": "integer", "title": "Count", "description": "Count of the word in the SourceDocument" }
        },
        "type": "object",
        "required": ["sdoc_id", "word", "count"],
        "title": "WordFrequencyRead"
      },
      "WordFrequencyResult": {
        "properties": {
          "total_results": {
            "type": "integer",
            "title": "Total Results",
            "description": "The total number of word_frequencies. Used for pagination."
          },
          "sdocs_total": {
            "type": "integer",
            "title": "Sdocs Total",
            "description": "The total number of SourceDocuments."
          },
          "words_total": { "type": "integer", "title": "Words Total", "description": "The total number of words." },
          "word_frequencies": {
            "items": { "$ref": "#/components/schemas/WordFrequencyStat" },
            "type": "array",
            "title": "Word Frequencies",
            "description": "The WordFrequencies."
          }
        },
        "type": "object",
        "required": ["total_results", "sdocs_total", "words_total", "word_frequencies"],
        "title": "WordFrequencyResult"
      },
      "WordFrequencyStat": {
        "properties": {
          "word": { "type": "string", "title": "Word", "description": "The word." },
          "word_percent": { "type": "number", "title": "Word Percent", "description": "The percentage of the word." },
          "count": { "type": "integer", "title": "Count", "description": "The SourceDoument IDs." },
          "sdocs": { "type": "integer", "title": "Sdocs", "description": "The number of SourceDocuments." },
          "sdocs_percent": {
            "type": "number",
            "title": "Sdocs Percent",
            "description": "The percentage of SourceDocuments."
          }
        },
        "type": "object",
        "required": ["word", "word_percent", "count", "sdocs", "sdocs_percent"],
        "title": "WordFrequencyStat"
      },
      "SourceDocumentReadAction": {
        "$defs": {
          "DocType": { "enum": ["text", "image", "video", "audio"], "title": "DocType", "type": "string" },
          "DocumentTagRead": {
            "properties": {
              "title": { "description": "Title of the DocumentTag", "title": "Title", "type": "string" },
              "color": { "description": "Color of the DocumentTag", "title": "Color", "type": "string" },
              "description": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "default": null,
                "description": "Description of the DocumentTag",
                "title": "Description"
              },
              "parent_tag_id": {
                "anyOf": [{ "type": "integer" }, { "type": "null" }],
                "default": null,
                "description": "Parent of the DocumentTag",
                "title": "Parent Tag Id"
              },
              "id": { "description": "ID of the DocumentTag", "title": "Id", "type": "integer" },
              "project_id": {
                "description": "Project the DocumentTag belongs to",
                "title": "Project Id",
                "type": "integer"
              },
              "created": {
                "description": "Created timestamp of the DocumentTag",
                "format": "date-time",
                "title": "Created",
                "type": "string"
              },
              "updated": {
                "description": "Updated timestamp of the DocumentTag",
                "format": "date-time",
                "title": "Updated",
                "type": "string"
              }
            },
            "required": ["title", "color", "id", "project_id", "created", "updated"],
            "title": "DocumentTagRead",
            "type": "object"
          },
          "SDocStatus": { "enum": ["unfinished_or_erroneous", "finished"], "title": "SDocStatus", "type": "string" },
          "SourceDocumentMetadataRead": {
            "properties": {
              "int_value": {
                "anyOf": [{ "type": "integer" }, { "type": "null" }],
                "description": "Int Value of the SourceDocumentMetadata",
                "title": "Int Value"
              },
              "str_value": {
                "anyOf": [{ "type": "string" }, { "type": "null" }],
                "description": "String Value of the SourceDocumentMetadata",
                "title": "Str Value"
              },
              "boolean_value": {
                "anyOf": [{ "type": "boolean" }, { "type": "null" }],
                "description": "Boolean Value of the SourceDocumentMetadata",
                "title": "Boolean Value"
              },
              "date_value": {
                "anyOf": [{ "format": "date-time", "type": "string" }, { "type": "null" }],
                "description": "Date Value of the SourceDocumentMetadata",
                "title": "Date Value"
              },
              "list_value": {
                "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
                "description": "List Value of the SourceDocumentMetadata",
                "title": "List Value"
              },
              "id": { "description": "ID of the SourceDocumentMetadata", "title": "Id", "type": "integer" },
              "project_metadata_id": {
                "description": "ID of the ProjectMetadata",
                "title": "Project Metadata Id",
                "type": "integer"
              },
              "source_document_id": {
                "description": "SourceDocument the SourceDocumentMetadata belongs to",
                "title": "Source Document Id",
                "type": "integer"
              }
            },
            "required": [
              "int_value",
              "str_value",
              "boolean_value",
              "date_value",
              "list_value",
              "id",
              "project_metadata_id",
              "source_document_id"
            ],
            "title": "SourceDocumentMetadataRead",
            "type": "object"
          }
        },
        "properties": {
          "filename": {
            "description": "Filename of the SourceDocument",
            "maxLength": 230,
            "title": "Filename",
            "type": "string"
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "default": null,
            "description": "User-defined name of the document",
            "title": "Name"
          },
          "doctype": {
            "allOf": [{ "$ref": "#/components/schemas/DocType" }],
            "description": "DOCTYPE of the SourceDocument"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/SDocStatus" }],
            "description": "Status of the SourceDocument"
          },
          "project_id": {
            "description": "Project the SourceDocument belongs to",
            "title": "Project Id",
            "type": "integer"
          },
          "id": { "description": "ID of the SourceDocument", "title": "Id", "type": "integer" },
          "created": {
            "description": "The created timestamp of the SourceDocument",
            "format": "date-time",
            "title": "Created",
            "type": "string"
          },
          "updated": {
            "description": "Updated timestamp of the Memo",
            "format": "date-time",
            "title": "Updated",
            "type": "string"
          },
          "tags": {
            "description": "Tags of the SourceDocument",
            "items": { "$ref": "#/components/schemas/DocumentTagRead" },
            "title": "Tags",
            "type": "array"
          },
          "metadata": {
            "description": "Metadata of the SourceDocument",
            "items": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" },
            "title": "Metadata",
            "type": "array"
          }
        },
        "required": ["filename", "doctype", "status", "project_id", "id", "created", "updated", "tags", "metadata"],
        "title": "SourceDocumentReadAction",
        "type": "object"
      },
      "ProjectReadAction": {
        "$defs": {
          "UserRead": {
            "properties": {
              "email": { "description": "E-Mail of the User", "format": "email", "title": "Email", "type": "string" },
              "first_name": { "description": "First name of the User", "title": "First Name", "type": "string" },
              "last_name": { "description": "Last name of the User", "title": "Last Name", "type": "string" },
              "id": { "description": "ID of the User", "title": "Id", "type": "integer" },
              "password": { "description": "Hashed password of the User", "title": "Password", "type": "string" },
              "created": {
                "description": "Created timestamp of the User",
                "format": "date-time",
                "title": "Created",
                "type": "string"
              },
              "updated": {
                "description": "Updated timestamp of the User",
                "format": "date-time",
                "title": "Updated",
                "type": "string"
              }
            },
            "required": ["email", "first_name", "last_name", "id", "password", "created", "updated"],
            "title": "UserRead",
            "type": "object"
          }
        },
        "properties": {
          "title": { "description": "Title of the Project", "title": "Title", "type": "string" },
          "description": { "description": "Description of the Project", "title": "Description", "type": "string" },
          "id": { "description": "ID of the Project", "title": "Id", "type": "integer" },
          "created": {
            "description": "Created timestamp of the Project",
            "format": "date-time",
            "title": "Created",
            "type": "string"
          },
          "updated": {
            "description": "Updated timestamp of the Project",
            "format": "date-time",
            "title": "Updated",
            "type": "string"
          },
          "users": {
            "description": "Users of the Project",
            "items": { "$ref": "#/components/schemas/UserRead" },
            "title": "Users",
            "type": "array"
          },
          "num_sdocs": { "description": "Number of Sdocs in the Project", "title": "Num Sdocs", "type": "integer" }
        },
        "required": ["title", "description", "id", "created", "updated", "users", "num_sdocs"],
        "title": "ProjectReadAction",
        "type": "object"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": { "password": { "scopes": {}, "tokenUrl": "/authentication/login" } }
      }
    }
  }
}
