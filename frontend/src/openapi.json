{
  "openapi": "3.1.0",
  "info": { "title": "Discourse Analysis Tool Suite API", "version": "1.2.2" },
  "paths": {
    "/heartbeat": {
      "get": {
        "tags": ["general"],
        "summary": "Heartbeat",
        "operationId": "heartbeat",
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }
        }
      }
    },
    "/": {
      "get": {
        "tags": ["general"],
        "summary": "Redirection to /docs",
        "operationId": "root_to_docs",
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }
        }
      }
    },
    "/authentication/register": {
      "post": {
        "tags": ["authentication"],
        "summary": "Registers a new User and returns it with the generated ID.",
        "operationId": "register",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/authentication/login": {
      "post": {
        "tags": ["authentication"],
        "summary": "Returns the JWT access token for the provided user login data if the login was successful. This is usually only called from an OAuth2 client!",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Body_authentication-login" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserAuthorizationHeaderData" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/authentication/logout": {
      "post": {
        "tags": ["authentication"],
        "summary": "Revokes the refresh token associated with the given session.",
        "operationId": "logout",
        "parameters": [
          {
            "name": "refresh_token",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Refresh Token" }
          }
        ],
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/authentication/refresh_access": {
      "post": {
        "tags": ["authentication"],
        "summary": "Uses the given refresh token to obtain a new access token.",
        "operationId": "refresh_access_token",
        "parameters": [
          {
            "name": "refresh_token",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Refresh Token" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserAuthorizationHeaderData" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/authentication/content": {
      "get": {
        "tags": ["authentication"],
        "summary": "Returns success if the user can access the content",
        "operationId": "auth_content",
        "parameters": [
          {
            "name": "x-original-uri",
            "in": "header",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }], "title": "X-Original-Uri" }
          }
        ],
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "tags": ["user"],
        "summary": "Returns the current (logged in) user",
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/user/by_id/{user_id}": {
      "get": {
        "tags": ["user"],
        "summary": "Returns the User with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PublicUserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "tags": ["user"],
        "summary": "Returns all Users that exist in the system",
        "operationId": "get_all",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PublicUserRead" },
                  "title": "Response User-Get All"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/user/": {
      "delete": {
        "tags": ["user"],
        "summary": "Removes the logged-in User",
        "operationId": "delete_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      },
      "patch": {
        "tags": ["user"],
        "summary": "Updates the logged-in User",
        "operationId": "update_me",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserUpdate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/user/project": {
      "get": {
        "tags": ["user"],
        "summary": "Returns all Projects of the logged-in User",
        "operationId": "get_user_projects",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/ProjectRead" },
                  "type": "array",
                  "title": "Response User-Get User Projects"
                }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/project": {
      "put": {
        "tags": ["project"],
        "summary": "Creates a new Project",
        "operationId": "create_new_project",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/project/{proj_id}": {
      "get": {
        "tags": ["project"],
        "summary": "Returns the Project with the given ID if it exists",
        "operationId": "read_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["project"],
        "summary": "Updates the Project with the given ID.",
        "operationId": "update_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes the Project with the given ID.",
        "operationId": "delete_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/sdoc": {
      "put": {
        "tags": ["project"],
        "summary": "Uploads one or multiple SourceDocument to the Project with the given ID if it exists",
        "operationId": "upload_project_sdoc",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": { "schema": { "$ref": "#/components/schemas/Body_project-upload_project_sdoc" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PreprocessingJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all SourceDocuments of the Project with the given ID if it exists",
        "operationId": "delete_project_sdocs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Project-Delete Project Sdocs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user": {
      "patch": {
        "tags": ["project"],
        "summary": "Associates an existing User to the Project with the given ID if it exists",
        "operationId": "associate_user_to_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectAddUser" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "get": {
        "tags": ["project"],
        "summary": "Returns all Users of the Project with the given ID",
        "operationId": "get_project_users",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserRead" },
                  "title": "Response Project-Get Project Users"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/{user_id}": {
      "delete": {
        "tags": ["project"],
        "summary": "Dissociates the Users with the Project with the given ID if it exists",
        "operationId": "dissociate_user_from_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/code": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Codes of the Project with the given ID",
        "operationId": "get_project_codes",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeRead" },
                  "title": "Response Project-Get Project Codes"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all Codes of the Project with the given ID if it exists",
        "operationId": "delete_project_codes",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Project-Delete Project Codes"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/tag": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all DocumentTags of the Project with the given ID",
        "operationId": "get_project_tags",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DocumentTagRead" },
                  "title": "Response Project-Get Project Tags"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["project"],
        "summary": "Removes all DocumentTags of the Project with the given ID if it exists",
        "operationId": "delete_project_tags",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Project-Delete Project Tags"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/user/memo": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all Memos of the Project from the logged-in User",
        "operationId": "get_user_memos_of_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          {
            "name": "only_starred",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "title": "Only Starred",
              "description": "If true only starred Memos are returned",
              "default": false
            },
            "description": "If true only starred Memos are returned"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Project-Get User Memos Of Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/memo/user": {
      "get": {
        "tags": ["project"],
        "summary": "Gets or creates the Memo attached to the Project with the given ID of the logged-in User.",
        "operationId": "get_or_create_user_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/resolve_filename/{filename}": {
      "get": {
        "tags": ["project"],
        "summary": "Returns the Id of the SourceDocument identified by project_id and filename if it exists",
        "operationId": "resolve_filename",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "filename", "in": "path", "required": true, "schema": { "type": "string", "title": "Filename" } },
          {
            "name": "only_finished",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": true, "title": "Only Finished" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "type": "integer", "title": "Response Project-Resolve Filename" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/metadata": {
      "get": {
        "tags": ["project"],
        "summary": "Returns all ProjectMetadata of the SourceDocument with the given ID if it exists",
        "operationId": "get_all_metadata",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ProjectMetadataRead" },
                  "title": "Response Project-Get All Metadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/project/{proj_id}/find_duplicate_text_sdocs": {
      "post": {
        "tags": ["project"],
        "summary": "Returns groups of duplicate sdoc ids.",
        "operationId": "find_duplicate_text_sdocs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          {
            "name": "max_different_words",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Max Different Words" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "array", "items": { "type": "integer" } },
                  "title": "Response Project-Find Duplicate Text Sdocs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the SourceDocument with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          {
            "name": "only_if_finished",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": true, "title": "Only If Finished" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sourceDocument"],
        "summary": "Removes the SourceDocument with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["sourceDocument"],
        "summary": "Updates the SourceDocument with the given ID.",
        "operationId": "update_sdoc",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/data/{sdoc_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the SourceDocumentData with the given ID if it exists",
        "operationId": "get_by_id_with_data",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          {
            "name": "only_if_finished",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": true, "title": "Only If Finished" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentDataRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/linked_sdocs": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the ids of SourceDocuments linked to the SourceDocument with the given id.",
        "operationId": "get_linked_sdocs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Sourcedocument-Get Linked Sdocs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/url": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the URL to the original file of the SourceDocument with the given ID if it exists.",
        "operationId": "get_file_url",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          {
            "name": "relative",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": true, "title": "Relative" }
          },
          {
            "name": "webp",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Webp" }
          },
          {
            "name": "thumbnail",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Thumbnail" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "type": "string", "title": "Response Sourcedocument-Get File Url" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/metadata": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all SourceDocumentMetadata of the SourceDocument with the given ID if it exists",
        "operationId": "get_all_metadata",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" },
                  "title": "Response Sourcedocument-Get All Metadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/metadata/{metadata_key}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the SourceDocumentMetadata with the given Key if it exists.",
        "operationId": "read_metadata_by_key",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          {
            "name": "metadata_key",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Metadata Key" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/annotators": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns IDs of users that annotated that SourceDocument.",
        "operationId": "get_annotators",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Sourcedocument-Get Annotators"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/tags": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all DocumentTagIDs linked with the SourceDocument.",
        "operationId": "get_all_tags",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Sourcedocument-Get All Tags"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/word_frequencies": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns the SourceDocument's word frequencies with the given ID if it exists",
        "operationId": "get_word_frequencies",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WordFrequencyRead" },
                  "title": "Response Sourcedocument-Get Word Frequencies"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/span_annotations/{user_id}}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all SpanAnnotations of the Users with the given ID if it exists",
        "operationId": "get_all_span_annotations_bulk",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanAnnotationRead" },
                  "title": "Response Sourcedocument-Get All Span Annotations Bulk"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc}/span_groups/{user_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all SpanGroupWithAnnotations of the User in the sDoc",
        "operationId": "get_sdoc_groups_with_annotations",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } },
          { "name": "sdoc_id", "in": "query", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanGroupWithAnnotationsRead" },
                  "title": "Response Sourcedocument-Get Sdoc Groups With Annotations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/bbox_annotations/{user_id}": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all BBoxAnnotations of the Users with the given ID if it exists",
        "operationId": "get_all_bbox_annotations_bulk",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          { "name": "user_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "User Id" } },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                  "title": "Response Sourcedocument-Get All Bbox Annotations Bulk"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/sentence_annotator": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all SentenceAnnotations of the User for the SourceDocument",
        "operationId": "get_sentence_annotator",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          { "name": "user_id", "in": "query", "required": true, "schema": { "type": "integer", "title": "User Id" } },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SentenceAnnotatorResult" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdoc/{sdoc_id}/user/span_groups": {
      "get": {
        "tags": ["sourceDocument"],
        "summary": "Returns all SpanGroups of the logged-in User if it exists",
        "operationId": "get_all_span_groups",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "sdoc_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Sdoc Id" } },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 10000000, "minimum": 0 }, { "type": "null" }],
              "title": "Skip",
              "description": "The number of elements to skip (offset)"
            },
            "description": "The number of elements to skip (offset)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer", "maximum": 1000, "minimum": 1 }, { "type": "null" }],
              "title": "Limit",
              "description": "The maximum number of returned elements"
            },
            "description": "The maximum number of returned elements"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanGroupRead" },
                  "title": "Response Sourcedocument-Get All Span Groups"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag": {
      "put": {
        "tags": ["documentTag"],
        "summary": "Creates a new DocumentTag and returns it with the generated ID.",
        "operationId": "create_new_doc_tag",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/doctag/bulk/link": {
      "patch": {
        "tags": ["documentTag"],
        "summary": "Links multiple DocumentTags with the SourceDocuments and returns the number of new Links",
        "operationId": "link_multiple_tags",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentDocumentTagMultiLink" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "type": "integer", "title": "Response Documenttag-Link Multiple Tags" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/doctag/bulk/unlink": {
      "delete": {
        "tags": ["documentTag"],
        "summary": "Unlinks all DocumentTags with the SourceDocuments and returns the number of removed Links.",
        "operationId": "unlink_multiple_tags",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentDocumentTagMultiLink" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "type": "integer", "title": "Response Documenttag-Unlink Multiple Tags" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/doctag/bulk/set": {
      "patch": {
        "tags": ["documentTag"],
        "summary": "Sets SourceDocuments' tags to the provided tags",
        "operationId": "set_document_tags_batch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/SourceDocumentDocumentTagLinks" },
                "type": "array",
                "title": "Links"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "type": "integer", "title": "Response Documenttag-Set Document Tags Batch" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/doctag/bulk/update": {
      "patch": {
        "tags": ["documentTag"],
        "summary": "Updates SourceDocuments' tags",
        "operationId": "update_document_tags_batch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Body_documentTag-update_document_tags_batch" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "type": "integer", "title": "Response Documenttag-Update Document Tags Batch" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/doctag/{tag_id}": {
      "get": {
        "tags": ["documentTag"],
        "summary": "Returns the DocumentTag with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["documentTag"],
        "summary": "Updates the DocumentTag with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["documentTag"],
        "summary": "Deletes the DocumentTag with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentTagRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/{tag_id}/sdocs": {
      "get": {
        "tags": ["documentTag"],
        "summary": "Returns all SourceDocument IDs attached to the Tag with the given ID if it exists.",
        "operationId": "get_sdoc_ids_by_tag_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "tag_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Tag Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Documenttag-Get Sdoc Ids By Tag Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/doctag/sdoc_counts": {
      "post": {
        "tags": ["documentTag"],
        "summary": "Returns a dict of all tag ids with their count of assigned source documents, counting only source documents in the given id list",
        "operationId": "get_sdoc_counts",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "items": { "type": "integer" }, "type": "array", "title": "Sdoc Ids" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": { "type": "integer" },
                  "type": "object",
                  "title": "Response Documenttag-Get Sdoc Counts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/span": {
      "put": {
        "tags": ["spanAnnotation"],
        "summary": "Creates a SpanAnnotation",
        "operationId": "add_span_annotation",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/span/bulk/create": {
      "put": {
        "tags": ["spanAnnotation"],
        "summary": "Creates SpanAnnotations in Bulk",
        "operationId": "add_span_annotations_bulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/SpanAnnotationCreate" },
                "type": "array",
                "title": "Spans"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/SpanAnnotationRead" },
                  "type": "array",
                  "title": "Response Spanannotation-Add Span Annotations Bulk"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/span/{span_id}": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the SpanAnnotation with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["spanAnnotation"],
        "summary": "Updates the SpanAnnotation with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanAnnotation"],
        "summary": "Deletes the SpanAnnotation with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationDeleted" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/bulk/update": {
      "patch": {
        "tags": ["spanAnnotation"],
        "summary": "Updates SpanAnnotations in Bulk",
        "operationId": "update_span_annotations_bulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/SpanAnnotationUpdateBulk" },
                "type": "array",
                "title": "Spans"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/SpanAnnotationRead" },
                  "type": "array",
                  "title": "Response Spanannotation-Update Span Annotations Bulk"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/span/{span_id}/code": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns the Code of the SpanAnnotation with the given ID if it exists.",
        "operationId": "get_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/groups": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns all SpanGroups that contain the the SpanAnnotation.",
        "operationId": "get_all_groups",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanGroupRead" },
                  "title": "Response Spanannotation-Get All Groups"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanAnnotation"],
        "summary": "Removes the SpanAnnotation from all SpanGroups",
        "operationId": "remove_from_all_groups",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationDeleted" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/{span_id}/group/{group_id}": {
      "patch": {
        "tags": ["spanAnnotation"],
        "summary": "Adds the SpanAnnotation to the SpanGroup",
        "operationId": "add_to_group",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } },
          { "name": "group_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Group Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanAnnotation"],
        "summary": "Removes the SpanAnnotation from the SpanGroup",
        "operationId": "remove_from_group",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "span_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Span Id" } },
          { "name": "group_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Group Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/span/code/{code_id}/user": {
      "get": {
        "tags": ["spanAnnotation"],
        "summary": "Returns SpanAnnotations with the given Code of the logged-in User",
        "operationId": "get_by_user_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanAnnotationRead" },
                  "title": "Response Spanannotation-Get By User Code"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/spangroup": {
      "put": {
        "tags": ["spanGroup"],
        "summary": "Creates a new SpanGroup and returns it with the generated ID.",
        "operationId": "create_new_span_group",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/SpanGroupRead" }, { "type": "null" }],
                  "title": "Response Spangroup-Create New Span Group"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/spangroup/{span_group_id}": {
      "get": {
        "tags": ["spanGroup"],
        "summary": "Returns the SpanGroup with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "span_group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Span Group Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/SpanGroupRead" }, { "type": "null" }],
                  "title": "Response Spangroup-Get By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["spanGroup"],
        "summary": "Updates the SpanGroup with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "span_group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Span Group Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SpanGroupUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/SpanGroupRead" }, { "type": "null" }],
                  "title": "Response Spangroup-Update By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["spanGroup"],
        "summary": "Deletes the SpanGroup with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "span_group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Span Group Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/SpanGroupRead" }, { "type": "null" }],
                  "title": "Response Spangroup-Delete By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/spangroup/{span_group_id}/span_annotations": {
      "get": {
        "tags": ["spanGroup"],
        "summary": "Returns all SpanAnnotations in the SpanGroup with the given ID if it exists",
        "operationId": "get_annotations",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "span_group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Span Group Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanAnnotationRead" },
                  "title": "Response Spangroup-Get Annotations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox": {
      "put": {
        "tags": ["bboxAnnotation"],
        "summary": "Creates a BBoxAnnotation",
        "operationId": "add_bbox_annotation",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/bbox/{bbox_id}": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the BBoxAnnotation with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["bboxAnnotation"],
        "summary": "Updates the BBoxAnnotation with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["bboxAnnotation"],
        "summary": "Deletes the BBoxAnnotation with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/{bbox_id}/code": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns the Code of the BBoxAnnotation with the given ID if it exists.",
        "operationId": "get_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "bbox_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Bbox Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/bbox/code/{code_id}/user": {
      "get": {
        "tags": ["bboxAnnotation"],
        "summary": "Returns BBoxAnnotations with the given Code of the logged-in User",
        "operationId": "get_by_user_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BBoxAnnotationRead" },
                  "title": "Response Bboxannotation-Get By User Code"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/code": {
      "put": {
        "tags": ["code"],
        "summary": "Creates a new Code and returns it with the generated ID.",
        "operationId": "create_new_code",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/code/{code_id}": {
      "get": {
        "tags": ["code"],
        "summary": "Returns the Code with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["code"],
        "summary": "Updates the Code with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["code"],
        "summary": "Deletes the Code with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/memo": {
      "put": {
        "tags": ["memo"],
        "summary": "Adds a Memo to the Attached Object with the given ID if it exists",
        "operationId": "add_memo",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "attached_object_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Attached Object Id" }
          },
          {
            "name": "attached_object_type",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/AttachedObjectType" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoCreate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/memo/{memo_id}": {
      "get": {
        "tags": ["memo"],
        "summary": "Returns the Memo with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "memo_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Memo Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["memo"],
        "summary": "Updates the Memo with the given ID if it exists",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "memo_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Memo Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["memo"],
        "summary": "Removes the Memo with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "memo_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Memo Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/memo/attached_obj/{attached_obj_type}/to/{attached_obj_id}": {
      "get": {
        "tags": ["memo"],
        "summary": "Returns all Memos attached to the object if it exists",
        "operationId": "get_memos_by_attached_object_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "attached_obj_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Attached Obj Id" }
          },
          {
            "name": "attached_obj_type",
            "in": "path",
            "required": true,
            "schema": { "$ref": "#/components/schemas/AttachedObjectType" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MemoRead" },
                  "title": "Response Memo-Get Memos By Attached Object Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/memo/attached_obj/{attached_obj_type}/to/{attached_obj_id}/user": {
      "get": {
        "tags": ["memo"],
        "summary": "Returns the logged-in User's Memo attached to the object if it exists",
        "operationId": "get_user_memo_by_attached_object_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "attached_obj_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Attached Obj Id" }
          },
          {
            "name": "attached_obj_type",
            "in": "path",
            "required": true,
            "schema": { "$ref": "#/components/schemas/AttachedObjectType" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MemoRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/memo/info": {
      "post": {
        "tags": ["memo"],
        "summary": "Returns Memo Table Info.",
        "operationId": "search_memo_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_MemoColumns_" },
                  "title": "Response Memo-Search Memo Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/memo/search": {
      "post": {
        "tags": ["memo"],
        "summary": "Returns all Memo Ids that match the query parameters.",
        "operationId": "search_memos",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "search_query",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Search Query" }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "search_content",
            "in": "query",
            "required": true,
            "schema": { "type": "boolean", "title": "Search Content" }
          },
          {
            "name": "page_number",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Page Number" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Page Size" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Body_memo-search_memos" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedElasticSearchDocumentHits" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/sdoc_info": {
      "post": {
        "tags": ["search"],
        "summary": "Returns Search Info.",
        "operationId": "search_sdocs_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_SdocColumns_" },
                  "title": "Response Search-Search Sdocs Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/sdoc": {
      "post": {
        "tags": ["search"],
        "summary": "Returns all SourceDocument Ids and their scores and (optional) hightlights that match the query parameters.",
        "operationId": "search_sdocs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "search_query",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Search Query" }
          },
          {
            "name": "expert_mode",
            "in": "query",
            "required": true,
            "schema": { "type": "boolean", "title": "Expert Mode" }
          },
          {
            "name": "highlight",
            "in": "query",
            "required": true,
            "schema": { "type": "boolean", "title": "Highlight" }
          },
          {
            "name": "page_number",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "integer" }, { "type": "null" }], "title": "Page Number" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "integer" }, { "type": "null" }], "title": "Page Size" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Body_search-search_sdocs" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedElasticSearchDocumentHits" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/code_stats_by_sdocs": {
      "post": {
        "tags": ["search"],
        "summary": "Returns SpanEntityStats for the given SourceDocuments.",
        "operationId": "filter_code_stats",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "query", "required": true, "schema": { "type": "integer", "title": "Code Id" } },
          {
            "name": "sort_by_global",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Sort By Global" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "type": "integer" }, "title": "Sdoc Ids" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SpanEntityStat" },
                  "title": "Response Search-Filter Code Stats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/keyword_stats_by_sdocs": {
      "post": {
        "tags": ["search"],
        "summary": "Returns KeywordStats for the given SourceDocuments.",
        "operationId": "filter_keyword_stats",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "sort_by_global",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Sort By Global" }
          },
          {
            "name": "top_k",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 50, "title": "Top K" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "type": "integer" }, "title": "Sdoc Ids" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/KeywordStat" },
                  "title": "Response Search-Filter Keyword Stats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/tag_stats_by_sdocs": {
      "post": {
        "tags": ["search"],
        "summary": "Returns Stat for the given SourceDocuments.",
        "operationId": "filter_tag_stats",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "sort_by_global",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Sort By Global" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "type": "integer" }, "title": "Sdoc Ids" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TagStat" },
                  "title": "Response Search-Filter Tag Stats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/simsearch/sentences": {
      "post": {
        "tags": ["search"],
        "summary": "Returns similar sentences according to a textual or visual query.",
        "operationId": "find_similar_sentences",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "query", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "top_k", "in": "query", "required": true, "schema": { "type": "integer", "title": "Top K" } },
          { "name": "threshold", "in": "query", "required": true, "schema": { "type": "number", "title": "Threshold" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_search-find_similar_sentences" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SimSearchSentenceHit" },
                  "title": "Response Search-Find Similar Sentences"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/search/simsearch/images": {
      "post": {
        "tags": ["search"],
        "summary": "Returns similar images according to a textual or visual query.",
        "operationId": "find_similar_images",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "query", "required": true, "schema": { "type": "integer", "title": "Proj Id" } },
          { "name": "top_k", "in": "query", "required": true, "schema": { "type": "integer", "title": "Top K" } },
          { "name": "threshold", "in": "query", "required": true, "schema": { "type": "number", "title": "Threshold" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_search-find_similar_images" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SimSearchImageHit" },
                  "title": "Response Search-Find Similar Images"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdocmeta": {
      "put": {
        "tags": ["sdocMetadata"],
        "summary": "Creates a new Metadata and returns it with the generated ID.",
        "operationId": "create_new_metadata",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataCreate" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/sdocmeta/{metadata_id}": {
      "get": {
        "tags": ["sdocMetadata"],
        "summary": "Returns the Metadata with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["sdocMetadata"],
        "summary": "Updates the Metadata with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataUpdate" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sdocMetadata"],
        "summary": "Deletes the Metadata with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sdocmeta/bulk/update": {
      "patch": {
        "tags": ["sdocMetadata"],
        "summary": "Updates multiple metadata objects at once.",
        "operationId": "update_bulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/SourceDocumentMetadataBulkUpdate" },
                "type": "array",
                "title": "Metadatas"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/SourceDocumentMetadataRead" },
                  "type": "array",
                  "title": "Response Sdocmetadata-Update Bulk"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/analysis/code_frequencies": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns all SourceDocument IDs that match the query parameters.",
        "operationId": "code_frequencies",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_analysis-code_frequencies" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeFrequency" },
                  "title": "Response Analysis-Code Frequencies"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/code_occurrences": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns all SourceDocument IDs that match the query parameters.",
        "operationId": "code_occurrences",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          { "name": "code_id", "in": "query", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "array", "items": { "type": "integer" }, "title": "User Ids" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CodeOccurrence" },
                  "title": "Response Analysis-Code Occurrences"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/span_annotation_search_info": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns SpanAnnotationSearch Info.",
        "operationId": "span_annotation_search_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_SpanColumns_" },
                  "title": "Response Analysis-Span Annotation Search Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/span_annotation_search": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns SpanAnnotationSearch.",
        "operationId": "span_annotation_search",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "integer" }, { "type": "null" }], "title": "Page" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "integer" }, { "type": "null" }], "title": "Page Size" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_analysis-span_annotation_search" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SpanAnnotationSearchResult" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/sentence_annotation_search_info": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns SentenceAnnotationSearch Info.",
        "operationId": "sentence_annotation_search_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_SentAnnoColumns_" },
                  "title": "Response Analysis-Sentence Annotation Search Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/sentence_annotation_search": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns Sentence Annotations.",
        "operationId": "sentence_annotation_search",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "integer" }, { "type": "null" }], "title": "Page" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "integer" }, { "type": "null" }], "title": "Page Size" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Body_analysis-sentence_annotation_search" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SentenceAnnotationSearchResult" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/bbox_annotation_search_info": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns BBoxAnnotationSearch Info.",
        "operationId": "bbox_annotation_search_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_BBoxColumns_" },
                  "title": "Response Analysis-Bbox Annotation Search Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/bbox_annotation_search": {
      "post": {
        "tags": ["analysis"],
        "summary": "Returns BBoxAnnotationSearchResult.",
        "operationId": "bbox_annotation_search",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "integer" }, { "type": "null" }], "title": "Page" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "integer" }, { "type": "null" }], "title": "Page Size" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_analysis-bbox_annotation_search" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BBoxAnnotationSearchResult" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/count_sdocs_with_date_metadata/{project_id}/metadata/{date_metadata_id}}": {
      "get": {
        "tags": ["analysis"],
        "summary": "Returns Tuple[num_sdocs_with_date_metadata, num_total_sdocs].",
        "operationId": "count_sdocs_with_date_metadata",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "date_metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Date Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "prefixItems": [{ "type": "integer" }, { "type": "integer" }],
                  "minItems": 2,
                  "maxItems": 2,
                  "title": "Response Analysis-Count Sdocs With Date Metadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/word_frequency_analysis_info/{project_id}": {
      "get": {
        "tags": ["analysis"],
        "summary": "Returns WordFrequency Info.",
        "operationId": "word_frequency_analysis_info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_WordFrequencyColumns_" },
                  "title": "Response Analysis-Word Frequency Analysis Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/word_frequency_analysis": {
      "post": {
        "tags": ["analysis"],
        "summary": "Perform word frequency analysis.",
        "operationId": "word_frequency_analysis",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          { "name": "page", "in": "query", "required": true, "schema": { "type": "integer", "title": "Page" } },
          {
            "name": "page_size",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Page Size" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Body_analysis-word_frequency_analysis" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WordFrequencyResult" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/word_frequency_analysis_export": {
      "post": {
        "tags": ["analysis"],
        "summary": "Export the word frequency analysis.",
        "operationId": "word_frequency_analysis_export",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Body_analysis-word_frequency_analysis_export" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "type": "string", "title": "Response Analysis-Word Frequency Analysis Export" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/analysis/sample_sdocs_by_tags": {
      "post": {
        "tags": ["analysis"],
        "summary": "Sample & Aggregate Source Documents by tags.",
        "operationId": "sample_sdocs_by_tags",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          { "name": "n", "in": "query", "required": true, "schema": { "type": "integer", "title": "N" } },
          { "name": "frac", "in": "query", "required": true, "schema": { "type": "number", "title": "Frac" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "array", "items": { "type": "integer" } },
                "title": "Tag Groups"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SampledSdocsResults" },
                  "title": "Response Analysis-Sample Sdocs By Tags"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/prepro/{prepro_job_id}": {
      "get": {
        "tags": ["prepro"],
        "summary": "Returns the PreprocessingJob for the given ID if it exists",
        "operationId": "get_prepro_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "prepro_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Prepro Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PreprocessingJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/prepro/{prepro_job_id}/abort": {
      "patch": {
        "tags": ["prepro"],
        "summary": "Aborts the PreprocessingJob for the given ID if it exists",
        "operationId": "abort_prepro_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "prepro_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Prepro Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PreprocessingJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/prepro/project/{project_id}": {
      "get": {
        "tags": ["prepro"],
        "summary": "Returns all PreprocessingJobs for the given project ID if it exists",
        "operationId": "get_all_prepro_jobs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PreprocessingJobRead" },
                  "title": "Response Prepro-Get All Prepro Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/prepro/project/{proj_id}/status": {
      "get": {
        "tags": ["prepro"],
        "summary": "Returns the PreProProjectStatus of the Project with the given ID.",
        "operationId": "get_project_prepro_status",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PreProProjectStatus" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/export": {
      "post": {
        "tags": ["export"],
        "summary": "Returns the ExportJob for the given Parameters",
        "operationId": "start_export_job",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportJobParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/export/{export_job_id}": {
      "get": {
        "tags": ["export"],
        "summary": "Returns the ExportJob for the given ID if it exists",
        "operationId": "get_export_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "export_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Export Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/crawler": {
      "post": {
        "tags": ["crawler"],
        "summary": "Returns the CrawlerJob for the given Parameters",
        "operationId": "start_crawler_job",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerJobParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/crawler/{crawler_job_id}": {
      "get": {
        "tags": ["crawler"],
        "summary": "Returns the CrawlerJob for the given ID if it exists",
        "operationId": "get_crawler_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "crawler_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Crawler Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CrawlerJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/crawler/project/{project_id}": {
      "get": {
        "tags": ["crawler"],
        "summary": "Returns all CrawlerJobs for the given project ID if it exists",
        "operationId": "get_all_crawler_jobs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CrawlerJobRead" },
                  "title": "Response Crawler-Get All Crawler Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/annoscaling/suggest": {
      "post": {
        "tags": ["annoscaling"],
        "summary": "Suggest annotations",
        "description": "Suggest annotations",
        "operationId": "suggest",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnoscalingSuggest" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/AnnoscalingResult" },
                  "type": "array",
                  "title": "Response Annoscaling-Suggest"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/annoscaling/confirm_suggestions": {
      "post": {
        "tags": ["annoscaling"],
        "summary": "Suggest annotations",
        "description": "Suggest annotations",
        "operationId": "confirm_suggestions",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnnoscalingConfirmSuggest" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/whiteboard": {
      "put": {
        "tags": ["whiteboard"],
        "summary": "Creates an Whiteboard",
        "operationId": "create",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/whiteboard/{whiteboard_id}": {
      "get": {
        "tags": ["whiteboard"],
        "summary": "Returns the Whiteboard with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "whiteboard_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Whiteboard Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["whiteboard"],
        "summary": "Updates the Whiteboard with the given ID if it exists",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "whiteboard_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Whiteboard Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["whiteboard"],
        "summary": "Removes the Whiteboard with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "whiteboard_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Whiteboard Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/whiteboard/project/{project_id}": {
      "get": {
        "tags": ["whiteboard"],
        "summary": "Returns the Whiteboards of the Project with the given ID",
        "operationId": "get_by_project",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WhiteboardRead" },
                  "title": "Response Whiteboard-Get By Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/whiteboard/project/{project_id}/user": {
      "get": {
        "tags": ["whiteboard"],
        "summary": "Returns the Whiteboard of the Project with the given ID and the logged-in User if it exists",
        "operationId": "get_by_project_and_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WhiteboardRead" },
                  "title": "Response Whiteboard-Get By Project And User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/whiteboard/duplicate/{whiteboard_id}": {
      "post": {
        "tags": ["whiteboard"],
        "summary": "Duplicates the Whiteboard with the given ID if it exists",
        "operationId": "duplicate_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "whiteboard_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Whiteboard Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WhiteboardRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/projmeta": {
      "put": {
        "tags": ["projectMetadata"],
        "summary": "Creates a new Metadata and returns it with the generated ID.",
        "operationId": "create_new_metadata",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/projmeta/{metadata_id}": {
      "get": {
        "tags": ["projectMetadata"],
        "summary": "Returns the Metadata with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["projectMetadata"],
        "summary": "Updates the Metadata with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["projectMetadata"],
        "summary": "Deletes the Metadata with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Metadata Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProjectMetadataRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/trainer/": {
      "post": {
        "tags": ["trainer"],
        "summary": "Starts a TrainerJob",
        "description": "Starts a TrainerJob with the given parameters",
        "operationId": "start_trainer_job",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TrainerJobParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TrainerJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/trainer/{trainer_job_id}": {
      "get": {
        "tags": ["trainer"],
        "summary": "Returns the TrainerJob for the given ID",
        "description": "Returns the TrainerJob for the given ID if it exists",
        "operationId": "get_trainer_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "trainer_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Trainer Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/TrainerJobRead" }, { "type": "null" }],
                  "title": "Response Trainer-Get Trainer Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/trainer/project/{project_id}": {
      "get": {
        "tags": ["trainer"],
        "summary": "Returns all TrainerJobs for the given project ID",
        "description": "Returns all TrainerJobs for the given project ID if it exists",
        "operationId": "get_all_trainer_jobs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TrainerJobRead" },
                  "title": "Response Trainer-Get All Trainer Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/cota": {
      "put": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Creates an ConceptOverTimeAnalysis",
        "description": "Creates an ConceptOverTimeAnalysis",
        "operationId": "create",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTACreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/cota/{cota_id}": {
      "get": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Returns the ConceptOverTimeAnalysis",
        "description": "Returns the ConceptOverTimeAnalysis with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "cota_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Cota Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Updates the ConceptOverTimeAnalysis",
        "description": "Updates the ConceptOverTimeAnalysis with the given ID if it exists",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "cota_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Cota Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTAUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Removes the ConceptOverTimeAnalysis",
        "description": "Removes the ConceptOverTimeAnalysis with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "cota_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Cota Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/cota/{project_id}/user": {
      "get": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Returns COTAs of the Project of the User",
        "description": "Returns the COTA of the Project with the given ID and the logged-in User if it exists",
        "operationId": "get_by_project_and_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/COTARead" },
                  "title": "Response Conceptovertimeanalysis-Get By Project And User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/cota/duplicate/{cota_id}": {
      "post": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Duplicates the ConceptOverTimeAnalysis with the given ID if it exists",
        "operationId": "duplicate_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "cota_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Cota Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/cota/annotate/{cota_id}": {
      "post": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Annotate (multiple) COTASentences",
        "operationId": "annotate_cota_sentence",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "cota_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Cota Id" } },
          {
            "name": "concept_id",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }], "title": "Concept Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/COTASentenceID" },
                "title": "Cota Sentence Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/cota/remove/{cota_id}": {
      "post": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Remove (multiple) COTASentences from the search space",
        "operationId": "remove_cota_sentence",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "cota_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Cota Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/COTASentenceID" },
                "title": "Cota Sentence Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/cota/refine/{cota_id}": {
      "post": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Refines the ConceptOverTimeAnalysis",
        "description": "Refines the ConceptOverTimeAnalysis with the given ID if it exists",
        "operationId": "refine_cota_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "cota_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Cota Id" } }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [{ "$ref": "#/components/schemas/COTARefinementHyperparameters" }, { "type": "null" }],
                "title": "Hyperparams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARefinementJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/cota/refine/{cota_job_id}": {
      "get": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Returns the COTA Refinement Job for the given ID",
        "description": "Returns the COTA Refinement Job for the given ID if it exists",
        "operationId": "get_cota_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "cota_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Cota Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARefinementJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/cota/refine/most_recent/{cota_id}": {
      "get": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Returns the most recent COTA Refinement Job for the given COTA ID",
        "description": "Returns the most recent COTA Refinement Job for the given COTA ID",
        "operationId": "get_most_recent_cota_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "cota_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Cota Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [{ "$ref": "#/components/schemas/COTARefinementJobRead" }, { "type": "null" }],
                  "title": "Response Conceptovertimeanalysis-Get Most Recent Cota Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/cota/reset/{cota_id}": {
      "post": {
        "tags": ["conceptOverTimeAnalysis"],
        "summary": "Resets the ConceptOverTimeAnalysis",
        "description": "Resets the ConceptOverTimeAnalysis deleting model, embeddings, refinement jobs and resetting the search space",
        "operationId": "reset_cota",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "cota_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Cota Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/COTARead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/timelineAnalysis": {
      "put": {
        "tags": ["timelineAnalysis"],
        "summary": "Creates an TimelineAnalysis",
        "operationId": "create",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TimelineAnalysisCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TimelineAnalysisRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/timelineAnalysis/{timeline_analysis_id}": {
      "get": {
        "tags": ["timelineAnalysis"],
        "summary": "Returns the TimelineAnalysis with the given ID if it exists",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "timeline_analysis_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Timeline Analysis Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TimelineAnalysisRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["timelineAnalysis"],
        "summary": "Updates the TimelineAnalysis with the given ID if it exists",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "timeline_analysis_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Timeline Analysis Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TimelineAnalysisUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TimelineAnalysisRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["timelineAnalysis"],
        "summary": "Removes the TimelineAnalysis with the given ID if it exists",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "timeline_analysis_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Timeline Analysis Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TimelineAnalysisRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/timelineAnalysis/project/{project_id}/user": {
      "get": {
        "tags": ["timelineAnalysis"],
        "summary": "Returns the TimelineAnalysis of the Project with the given ID and the logged-in User if it exists",
        "operationId": "get_by_project_and_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TimelineAnalysisRead" },
                  "title": "Response Timelineanalysis-Get By Project And User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/timelineAnalysis/duplicate/{timeline_analysis_id}": {
      "post": {
        "tags": ["timelineAnalysis"],
        "summary": "Duplicates the TimelineAnalysis with the given ID if it exists",
        "operationId": "duplicate_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "timeline_analysis_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Timeline Analysis Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TimelineAnalysisRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/timelineAnalysis/info/{project_id}": {
      "get": {
        "tags": ["timelineAnalysis"],
        "summary": "Returns TimelineAnalysis Info.",
        "operationId": "info",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ColumnInfo_TimelineAnalysisColumns_" },
                  "title": "Response Timelineanalysis-Info"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/timelineAnalysis/do_analysis": {
      "post": {
        "tags": ["timelineAnalysis"],
        "summary": "Perform new timeline analysis.",
        "operationId": "do_analysis",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/DateGroupBy" }
          },
          {
            "name": "project_metadata_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Project Metadata Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Filter_TimelineAnalysisColumns_-Input" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TimelineAnalysisResult" },
                  "title": "Response Timelineanalysis-Do Analysis"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/llm": {
      "post": {
        "tags": ["llm"],
        "summary": "Returns the LLMJob for the given Parameters",
        "operationId": "start_llm_job",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LLMJobParameters2-Input" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LLMJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/llm/{llm_job_id}": {
      "get": {
        "tags": ["llm"],
        "summary": "Returns the LLMJob for the given ID if it exists",
        "operationId": "get_llm_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "llm_job_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Llm Job Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LLMJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/llm/project/{project_id}": {
      "get": {
        "tags": ["llm"],
        "summary": "Returns all LLMJobRead for the given project ID if it exists",
        "operationId": "get_all_llm_jobs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LLMJobRead" },
                  "title": "Response Llm-Get All Llm Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/llm/create_prompt_templates": {
      "post": {
        "tags": ["llm"],
        "summary": "Returns the system and user prompt templates for the given llm task in all supported languages",
        "operationId": "create_prompt_templates",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "approach_type",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/ApproachType" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LLMJobParameters" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LLMPromptTemplates" },
                  "title": "Response Llm-Create Prompt Templates"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/llm/create_training_parameters": {
      "post": {
        "tags": ["llm"],
        "summary": "Returns the default training parameters for the given llm task",
        "operationId": "create_training_parameters",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LLMJobParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TrainingParameters" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/llm/determine_approach": {
      "post": {
        "tags": ["llm"],
        "summary": "Determines the appropriate approach based on the provided input",
        "operationId": "determine_approach",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LLMJobParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApproachRecommendation" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/sentence": {
      "put": {
        "tags": ["sentenceAnnotation"],
        "summary": "Creates a SentenceAnnotation",
        "operationId": "add_sentence_annotation",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SentenceAnnotationCreate" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SentenceAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/sentence/bulk/create": {
      "put": {
        "tags": ["sentenceAnnotation"],
        "summary": "Creates SentenceAnnotations in Bulk",
        "operationId": "add_sentence_annotations_bulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/SentenceAnnotationCreate" },
                "type": "array",
                "title": "Sentence Annotations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/SentenceAnnotationRead" },
                  "type": "array",
                  "title": "Response Sentenceannotation-Add Sentence Annotations Bulk"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/sentence/{sentence_anno_id}": {
      "get": {
        "tags": ["sentenceAnnotation"],
        "summary": "Returns the SentenceAnnotation with the given ID.",
        "operationId": "get_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "sentence_anno_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Sentence Anno Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SentenceAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "patch": {
        "tags": ["sentenceAnnotation"],
        "summary": "Updates the SentenceAnnotation with the given ID.",
        "operationId": "update_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "sentence_anno_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Sentence Anno Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SentenceAnnotationUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SentenceAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      },
      "delete": {
        "tags": ["sentenceAnnotation"],
        "summary": "Deletes the SentenceAnnotation with the given ID.",
        "operationId": "delete_by_id",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "sentence_anno_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Sentence Anno Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SentenceAnnotationRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sentence/bulk/update": {
      "patch": {
        "tags": ["sentenceAnnotation"],
        "summary": "Updates SentenceAnnotation in Bulk",
        "operationId": "update_sent_anno_annotations_bulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/SentenceAnnotationUpdateBulk" },
                "type": "array",
                "title": "Sent Annos"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/SentenceAnnotationRead" },
                  "type": "array",
                  "title": "Response Sentenceannotation-Update Sent Anno Annotations Bulk"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/sentence/bulk/delete": {
      "delete": {
        "tags": ["sentenceAnnotation"],
        "summary": "Deletes all SentenceAnnotations with the given IDs.",
        "operationId": "delete_bulk_by_id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "items": { "type": "integer" }, "type": "array", "title": "Sentence Anno Ids" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/SentenceAnnotationRead" },
                  "type": "array",
                  "title": "Response Sentenceannotation-Delete Bulk By Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/sentence/{sentence_anno_id}/code": {
      "get": {
        "tags": ["sentenceAnnotation"],
        "summary": "Returns the Code of the SentenceAnnotation with the given ID if it exists.",
        "operationId": "get_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "sentence_anno_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Sentence Anno Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/sentence/code/{code_id}/user": {
      "get": {
        "tags": ["sentenceAnnotation"],
        "summary": "Returns SentenceAnnotations with the given Code of the logged-in User",
        "operationId": "get_by_user_code",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "code_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Code Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SentenceAnnotationRead" },
                  "title": "Response Sentenceannotation-Get By User Code"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/import/{proj_id}/codes": {
      "post": {
        "tags": ["import"],
        "summary": "Starts the import codes job on given project id.",
        "operationId": "start_import_codes_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": { "schema": { "$ref": "#/components/schemas/Body_import-start_import_codes_job" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ImportJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/import/{proj_id}/tags": {
      "post": {
        "tags": ["import"],
        "summary": "Starts the import tags job on given project.",
        "operationId": "start_import_tags_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "proj_id", "in": "path", "required": true, "schema": { "type": "integer", "title": "Proj Id" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": { "schema": { "$ref": "#/components/schemas/Body_import-start_import_tags_job" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ImportJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/import": {
      "post": {
        "tags": ["import"],
        "summary": "Starts the import project job on given project",
        "operationId": "start_import_project_job",
        "requestBody": {
          "content": {
            "multipart/form-data": { "schema": { "$ref": "#/components/schemas/Body_import-start_import_project_job" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ImportJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/ml": {
      "post": {
        "tags": ["ml"],
        "summary": "Returns the MLJob for the given Parameters",
        "operationId": "start_ml_job",
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MLJobParameters" } } },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MLJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/ml/{ml_job_id}": {
      "get": {
        "tags": ["ml"],
        "summary": "Returns the MLJob for the given ID if it exists",
        "operationId": "get_ml_job",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          { "name": "ml_job_id", "in": "path", "required": true, "schema": { "type": "string", "title": "Ml Job Id" } }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MLJobRead" } } }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    },
    "/ml/project/{project_id}": {
      "get": {
        "tags": ["ml"],
        "summary": "Returns all MLJobRead for the given project ID if it exists",
        "operationId": "get_all_lm_jobs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Project Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/MLJobRead" },
                  "title": "Response Ml-Get All Lm Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnnoscalingConfirmSuggest": {
        "properties": {
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project to apply suggestions" },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code to apply on accepted spans" },
          "reject_code_id": {
            "type": "integer",
            "title": "Reject Code Id",
            "description": "Code to apply on rejected spans"
          },
          "accept": {
            "items": { "$ref": "#/components/schemas/SdocSentencePair" },
            "type": "array",
            "title": "Accept",
            "description": "Suggested annotations to accept"
          },
          "reject": {
            "items": { "$ref": "#/components/schemas/SdocSentencePair" },
            "type": "array",
            "title": "Reject",
            "description": "Suggested annotations to reject"
          }
        },
        "type": "object",
        "required": ["project_id", "code_id", "reject_code_id", "accept", "reject"],
        "title": "AnnoscalingConfirmSuggest"
      },
      "AnnoscalingResult": {
        "properties": {
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "ID of the source document" },
          "sentence_id": {
            "type": "integer",
            "title": "Sentence Id",
            "description": "ID of the sentence within the document"
          },
          "text": { "type": "string", "title": "Text", "description": "Sentence text" }
        },
        "type": "object",
        "required": ["sdoc_id", "sentence_id", "text"],
        "title": "AnnoscalingResult"
      },
      "AnnoscalingSuggest": {
        "properties": {
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project to retrieve suggestions" },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code to provide suggestions for" },
          "reject_cide_id": {
            "type": "integer",
            "title": "Reject Cide Id",
            "description": "Code to use as opposing code"
          },
          "top_k": { "type": "integer", "title": "Top K", "description": "Number of suggestions to provide" }
        },
        "type": "object",
        "required": ["project_id", "code_id", "reject_cide_id", "top_k"],
        "title": "AnnoscalingSuggest"
      },
      "AnnotationLLMJobResult": {
        "properties": {
          "llm_job_type": { "type": "string", "const": "ANNOTATION", "title": "Llm Job Type" },
          "results": {
            "items": { "$ref": "#/components/schemas/AnnotationResult" },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": ["llm_job_type", "results"],
        "title": "AnnotationLLMJobResult"
      },
      "AnnotationParams": {
        "properties": {
          "llm_job_type": { "type": "string", "const": "ANNOTATION", "title": "Llm Job Type" },
          "sdoc_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sdoc Ids",
            "description": "IDs of the source documents to analyse"
          },
          "code_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Code Ids",
            "description": "IDs of the codes to use for the annotation"
          }
        },
        "type": "object",
        "required": ["llm_job_type", "sdoc_ids", "code_ids"],
        "title": "AnnotationParams"
      },
      "AnnotationResult": {
        "properties": {
          "status": { "$ref": "#/components/schemas/BackgroundJobStatus", "description": "Status of the Result" },
          "status_message": {
            "type": "string",
            "title": "Status Message",
            "description": "Status message of the result"
          },
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "ID of the source document" },
          "suggested_annotations": {
            "items": { "$ref": "#/components/schemas/SpanAnnotationRead" },
            "type": "array",
            "title": "Suggested Annotations",
            "description": "Suggested annotations"
          }
        },
        "type": "object",
        "required": ["status", "status_message", "sdoc_id", "suggested_annotations"],
        "title": "AnnotationResult"
      },
      "ApproachRecommendation": {
        "properties": {
          "recommended_approach": {
            "$ref": "#/components/schemas/ApproachType",
            "description": "Recommended approach"
          },
          "reasoning": { "type": "string", "title": "Reasoning", "description": "Reasoning for the recommendation" },
          "available_approaches": {
            "additionalProperties": { "type": "boolean" },
            "propertyNames": { "$ref": "#/components/schemas/ApproachType" },
            "type": "object",
            "title": "Available Approaches",
            "description": "Available approaches"
          }
        },
        "type": "object",
        "required": ["recommended_approach", "reasoning", "available_approaches"],
        "title": "ApproachRecommendation"
      },
      "ApproachType": {
        "type": "string",
        "enum": ["LLM_ZERO_SHOT", "LLM_FEW_SHOT", "MODEL_TRAINING"],
        "title": "ApproachType"
      },
      "AttachedObjectType": {
        "type": "string",
        "enum": [
          "source_document",
          "code",
          "sentence_annotation",
          "span_annotation",
          "span_group",
          "bbox_annotation",
          "project",
          "document_tag"
        ],
        "title": "AttachedObjectType"
      },
      "BBoxAnnotationCreate": {
        "properties": {
          "x_min": {
            "type": "integer",
            "title": "X Min",
            "description": "Absolute x_min coordinate of the BBoxAnnotation"
          },
          "x_max": {
            "type": "integer",
            "title": "X Max",
            "description": "Absolute x_max coordinate of the BBoxAnnotation"
          },
          "y_min": {
            "type": "integer",
            "title": "Y Min",
            "description": "Absolute y_min coordinate of the BBoxAnnotation"
          },
          "y_max": {
            "type": "integer",
            "title": "Y Max",
            "description": "Absolute y_max coordinate of the BBoxAnnotation"
          },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the BBoxAnnotation refers to" },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "SourceDocument the BBoxAnnotation refers to"
          }
        },
        "type": "object",
        "required": ["x_min", "x_max", "y_min", "y_max", "code_id", "sdoc_id"],
        "title": "BBoxAnnotationCreate"
      },
      "BBoxAnnotationRead": {
        "properties": {
          "x_min": {
            "type": "integer",
            "title": "X Min",
            "description": "Absolute x_min coordinate of the BBoxAnnotation"
          },
          "x_max": {
            "type": "integer",
            "title": "X Max",
            "description": "Absolute x_max coordinate of the BBoxAnnotation"
          },
          "y_min": {
            "type": "integer",
            "title": "Y Min",
            "description": "Absolute y_min coordinate of the BBoxAnnotation"
          },
          "y_max": {
            "type": "integer",
            "title": "Y Max",
            "description": "Absolute y_max coordinate of the BBoxAnnotation"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the BBoxAnnotation" },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the BBoxAnnotation refers to" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User that created the BBoxAnnotation" },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "SourceDocument the BBoxAnnotation refers to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the BBoxAnnotation"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the BBoxAnnotation"
          }
        },
        "type": "object",
        "required": ["x_min", "x_max", "y_min", "y_max", "id", "code_id", "user_id", "sdoc_id", "created", "updated"],
        "title": "BBoxAnnotationRead"
      },
      "BBoxAnnotationRow": {
        "properties": {
          "id": { "type": "integer", "title": "Id", "description": "ID of the BBoxAnnotation" },
          "x": { "type": "integer", "title": "X", "description": "The x-coordinate of the BBoxAnnotation." },
          "y": { "type": "integer", "title": "Y", "description": "The y-coordinate of the BBoxAnnotation." },
          "width": { "type": "integer", "title": "Width", "description": "The width of the BBoxAnnotation." },
          "height": { "type": "integer", "title": "Height", "description": "The height of the BBoxAnnotation." },
          "url": { "type": "string", "title": "Url", "description": "The url to the Image of the BBoxAnnotation." },
          "code": { "$ref": "#/components/schemas/CodeRead", "description": "Code the BBoxAnnotation refers to" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the BBoxAnnotation belongs to" },
          "sdoc": {
            "$ref": "#/components/schemas/SourceDocumentRead",
            "description": "SourceDocument the BBoxAnnotation refers to"
          },
          "tag_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Tag Ids",
            "description": "The DocumentTagIDs of the SourceDocument."
          },
          "memo": {
            "anyOf": [{ "$ref": "#/components/schemas/MemoRead" }, { "type": "null" }],
            "description": "The Memo of the Annotation."
          }
        },
        "type": "object",
        "required": ["id", "x", "y", "width", "height", "url", "code", "user_id", "sdoc", "tag_ids", "memo"],
        "title": "BBoxAnnotationRow"
      },
      "BBoxAnnotationSearchResult": {
        "properties": {
          "total_results": {
            "type": "integer",
            "title": "Total Results",
            "description": "The total number of bbox_annotation_ids. Used for pagination."
          },
          "data": {
            "items": { "$ref": "#/components/schemas/BBoxAnnotationRow" },
            "type": "array",
            "title": "Data",
            "description": "The Annotations."
          }
        },
        "type": "object",
        "required": ["total_results", "data"],
        "title": "BBoxAnnotationSearchResult"
      },
      "BBoxAnnotationUpdate": {
        "properties": {
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the BBoxAnnotation refers to" }
        },
        "type": "object",
        "required": ["code_id"],
        "title": "BBoxAnnotationUpdate"
      },
      "BBoxColumns": {
        "type": "string",
        "enum": [
          "BB_CODE_ID",
          "BB_MEMO_CONTENT",
          "BB_SOURCE_SOURCE_DOCUMENT_FILENAME",
          "BB_DOCUMENT_DOCUMENT_TAG_ID_LIST"
        ],
        "title": "BBoxColumns"
      },
      "BackgroundJobStatus": {
        "type": "string",
        "enum": ["Waiting", "Running", "Finished", "Errorneous", "Aborted"],
        "title": "BackgroundJobStatus"
      },
      "Body_analysis-bbox_annotation_search": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/Filter_BBoxColumns_" },
          "sorts": { "items": { "$ref": "#/components/schemas/Sort_BBoxColumns_" }, "type": "array", "title": "Sorts" }
        },
        "type": "object",
        "required": ["filter", "sorts"],
        "title": "Body_analysis-bbox_annotation_search"
      },
      "Body_analysis-code_frequencies": {
        "properties": {
          "code_ids": { "items": { "type": "integer" }, "type": "array", "title": "Code Ids" },
          "user_ids": { "items": { "type": "integer" }, "type": "array", "title": "User Ids" },
          "doctypes": { "items": { "$ref": "#/components/schemas/DocType" }, "type": "array", "title": "Doctypes" }
        },
        "type": "object",
        "required": ["code_ids", "user_ids", "doctypes"],
        "title": "Body_analysis-code_frequencies"
      },
      "Body_analysis-sentence_annotation_search": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/Filter_SentAnnoColumns_" },
          "sorts": {
            "items": { "$ref": "#/components/schemas/Sort_SentAnnoColumns_" },
            "type": "array",
            "title": "Sorts"
          }
        },
        "type": "object",
        "required": ["filter", "sorts"],
        "title": "Body_analysis-sentence_annotation_search"
      },
      "Body_analysis-span_annotation_search": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/Filter_SpanColumns_" },
          "sorts": { "items": { "$ref": "#/components/schemas/Sort_SpanColumns_" }, "type": "array", "title": "Sorts" }
        },
        "type": "object",
        "required": ["filter", "sorts"],
        "title": "Body_analysis-span_annotation_search"
      },
      "Body_analysis-word_frequency_analysis": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/Filter_WordFrequencyColumns_" },
          "sorts": {
            "items": { "$ref": "#/components/schemas/Sort_WordFrequencyColumns_" },
            "type": "array",
            "title": "Sorts"
          }
        },
        "type": "object",
        "required": ["filter", "sorts"],
        "title": "Body_analysis-word_frequency_analysis"
      },
      "Body_analysis-word_frequency_analysis_export": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/Filter_WordFrequencyColumns_" },
          "sorts": {
            "items": { "$ref": "#/components/schemas/Sort_WordFrequencyColumns_" },
            "type": "array",
            "title": "Sorts"
          }
        },
        "type": "object",
        "required": ["filter", "sorts"],
        "title": "Body_analysis-word_frequency_analysis_export"
      },
      "Body_authentication-login": {
        "properties": {
          "grant_type": {
            "anyOf": [{ "type": "string", "pattern": "password" }, { "type": "null" }],
            "title": "Grant Type"
          },
          "username": { "type": "string", "title": "Username" },
          "password": { "type": "string", "title": "Password" },
          "scope": { "type": "string", "title": "Scope", "default": "" },
          "client_id": { "anyOf": [{ "type": "string" }, { "type": "null" }], "title": "Client Id" },
          "client_secret": { "anyOf": [{ "type": "string" }, { "type": "null" }], "title": "Client Secret" }
        },
        "type": "object",
        "required": ["username", "password"],
        "title": "Body_authentication-login"
      },
      "Body_documentTag-update_document_tags_batch": {
        "properties": {
          "sdoc_ids": { "items": { "type": "integer" }, "type": "array", "title": "Sdoc Ids" },
          "unlink_tag_ids": { "items": { "type": "integer" }, "type": "array", "title": "Unlink Tag Ids" },
          "link_tag_ids": { "items": { "type": "integer" }, "type": "array", "title": "Link Tag Ids" }
        },
        "type": "object",
        "required": ["sdoc_ids", "unlink_tag_ids", "link_tag_ids"],
        "title": "Body_documentTag-update_document_tags_batch"
      },
      "Body_import-start_import_codes_job": {
        "properties": {
          "uploaded_file": {
            "type": "string",
            "format": "binary",
            "title": "Uploaded File",
            "description": "CSV file of codes that gets uploaded into project"
          }
        },
        "type": "object",
        "required": ["uploaded_file"],
        "title": "Body_import-start_import_codes_job"
      },
      "Body_import-start_import_project_job": {
        "properties": {
          "uploaded_file": {
            "type": "string",
            "format": "binary",
            "title": "Uploaded File",
            "description": "Zip file of project metadata that gets uploaded into project"
          }
        },
        "type": "object",
        "required": ["uploaded_file"],
        "title": "Body_import-start_import_project_job"
      },
      "Body_import-start_import_tags_job": {
        "properties": {
          "uploaded_file": {
            "type": "string",
            "format": "binary",
            "title": "Uploaded File",
            "description": "CSV file of codes that gets uploaded into project"
          }
        },
        "type": "object",
        "required": ["uploaded_file"],
        "title": "Body_import-start_import_tags_job"
      },
      "Body_memo-search_memos": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/Filter_MemoColumns_" },
          "sorts": { "items": { "$ref": "#/components/schemas/Sort_MemoColumns_" }, "type": "array", "title": "Sorts" }
        },
        "type": "object",
        "required": ["filter", "sorts"],
        "title": "Body_memo-search_memos"
      },
      "Body_project-upload_project_sdoc": {
        "properties": {
          "uploaded_files": {
            "items": { "type": "string", "format": "binary" },
            "type": "array",
            "title": "Uploaded Files",
            "description": "File(s) that get uploaded and represented by the SourceDocument(s)"
          }
        },
        "type": "object",
        "required": ["uploaded_files"],
        "title": "Body_project-upload_project_sdoc"
      },
      "Body_search-find_similar_images": {
        "properties": {
          "query": {
            "anyOf": [{ "type": "string" }, { "items": { "type": "string" }, "type": "array" }, { "type": "integer" }],
            "title": "Query"
          },
          "filter": { "$ref": "#/components/schemas/Filter_SdocColumns_" }
        },
        "type": "object",
        "required": ["query", "filter"],
        "title": "Body_search-find_similar_images"
      },
      "Body_search-find_similar_sentences": {
        "properties": {
          "query": {
            "anyOf": [{ "type": "string" }, { "items": { "type": "string" }, "type": "array" }, { "type": "integer" }],
            "title": "Query"
          },
          "filter": { "$ref": "#/components/schemas/Filter_SdocColumns_" }
        },
        "type": "object",
        "required": ["query", "filter"],
        "title": "Body_search-find_similar_sentences"
      },
      "Body_search-search_sdocs": {
        "properties": {
          "filter": { "$ref": "#/components/schemas/Filter_SdocColumns_" },
          "sorts": { "items": { "$ref": "#/components/schemas/Sort_SdocColumns_" }, "type": "array", "title": "Sorts" }
        },
        "type": "object",
        "required": ["filter", "sorts"],
        "title": "Body_search-search_sdocs"
      },
      "BooleanOperator": {
        "type": "string",
        "enum": ["BOOLEAN_EQUALS", "BOOLEAN_NOT_EQUALS"],
        "title": "BooleanOperator"
      },
      "COTAConcept": {
        "properties": {
          "id": { "type": "string", "title": "Id", "description": "ID of the Concept" },
          "name": { "type": "string", "title": "Name", "description": "Name of the Concept" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Concept" },
          "color": { "type": "string", "title": "Color", "description": "Color of the Concept" },
          "visible": { "type": "boolean", "title": "Visible", "description": "Visibility of the Concept" }
        },
        "type": "object",
        "required": ["id", "name", "description", "color", "visible"],
        "title": "COTAConcept"
      },
      "COTACreate": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the ConceptOverTimeAnalysis" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the ConceptOverTimeAnalysis belongs to"
          }
        },
        "type": "object",
        "required": ["name", "project_id"],
        "title": "COTACreate"
      },
      "COTARead": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the ConceptOverTimeAnalysis" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the ConceptOverTimeAnalysis" },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "User the ConceptOverTimeAnalysis belongs to"
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the ConceptOverTimeAnalysis belongs to"
          },
          "timeline_settings": {
            "$ref": "#/components/schemas/COTATimelineSettings",
            "description": "Timeline Analysis Settings of the ConceptOverTimeAnalysis."
          },
          "training_settings": {
            "$ref": "#/components/schemas/COTATrainingSettings",
            "description": "Timeline Training Settings of the ConceptOverTimeAnalysis."
          },
          "concepts": {
            "items": { "$ref": "#/components/schemas/COTAConcept" },
            "type": "array",
            "title": "Concepts",
            "description": "List of Concepts that are part of the ConceptOverTimeAnalysis"
          },
          "search_space": {
            "items": { "$ref": "#/components/schemas/COTASentence" },
            "type": "array",
            "title": "Search Space",
            "description": "List of Sentences that form the search space of the ConceptOverTimeAnalysis"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the ConceptOverTimeAnalysis"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the ConceptOverTimeAnalysis"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "user_id",
          "project_id",
          "timeline_settings",
          "training_settings",
          "concepts",
          "search_space",
          "created",
          "updated"
        ],
        "title": "COTARead"
      },
      "COTARefinementHyperparameters": {
        "properties": {
          "cem_training_epochs": {
            "type": "integer",
            "title": "Cem Training Epochs",
            "description": "Number of epochs to train the Concept Embedding Model",
            "default": 10
          },
          "cem_dimensions": {
            "type": "integer",
            "title": "Cem Dimensions",
            "description": "Number of dimensions of the Concept Embedding Model",
            "default": 64
          }
        },
        "type": "object",
        "title": "COTARefinementHyperparameters"
      },
      "COTARefinementJobRead": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BackgroundJobStatus",
            "description": "Status of the BackgroundJob",
            "default": "Waiting"
          },
          "cota": {
            "$ref": "#/components/schemas/COTARead",
            "description": "COTA that is used in the COTARefinementJob"
          },
          "hyperparams": {
            "$ref": "#/components/schemas/COTARefinementHyperparameters",
            "description": "Hyperparameters of the COTARefinementJob"
          },
          "id": { "type": "string", "title": "Id", "description": "ID of the COTARefinementJob" },
          "current_pipeline_step": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Current Pipeline Step",
            "description": "Current Pipeline Step of the COTARefinementJob"
          },
          "error_message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Error Message",
            "description": "Optional ErrorMessage of the COTARefinementJob"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the COTARefinementJob"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the COTARefinementJob"
          }
        },
        "type": "object",
        "required": ["cota", "hyperparams", "created", "updated"],
        "title": "COTARefinementJobRead"
      },
      "COTASentence": {
        "properties": {
          "sentence_id": { "type": "integer", "title": "Sentence Id", "description": "ID of the Sentence in the SDoc" },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "ID of the Sentence Document that contains the Sentence"
          },
          "concept_similarities": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Concept Similarities",
            "description": "Dictionary of Concept IDs and their similarity score"
          },
          "concept_probabilities": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Concept Probabilities",
            "description": "Dictionary of Concept IDs and their probability score"
          },
          "concept_annotation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Concept Annotation",
            "description": "Concept ID this sentence belongs to"
          },
          "x": { "type": "number", "title": "X", "description": "X coordinate of the Sentence in the search space" },
          "y": { "type": "number", "title": "Y", "description": "Y coordinate of the Sentence in the search space" },
          "date": { "type": "string", "format": "date-time", "title": "Date", "description": "date of the sdoc" },
          "text": { "type": "string", "title": "Text", "description": "text of the sentence" }
        },
        "type": "object",
        "required": [
          "sentence_id",
          "sdoc_id",
          "concept_similarities",
          "concept_probabilities",
          "concept_annotation",
          "x",
          "y",
          "date",
          "text"
        ],
        "title": "COTASentence"
      },
      "COTASentenceID": {
        "properties": {
          "sentence_id": { "type": "integer", "title": "Sentence Id", "description": "ID of the Sentence in the SDoc" },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "ID of the Sentence Document that contains the Sentence"
          }
        },
        "type": "object",
        "required": ["sentence_id", "sdoc_id"],
        "title": "COTASentenceID"
      },
      "COTATimelineSettings": {
        "properties": {
          "group_by": { "$ref": "#/components/schemas/DateGroupBy", "description": "Group by date", "default": "YEAR" },
          "date_metadata_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Date Metadata Id",
            "description": "ID of the Project Date Metadata that is used for the ConceptOverTimeAnalysis"
          },
          "threshold": {
            "type": "number",
            "title": "Threshold",
            "description": "Threshold of the ConceptOverTimeAnalysis",
            "default": 0.9
          }
        },
        "type": "object",
        "title": "COTATimelineSettings"
      },
      "COTATrainingSettings": {
        "properties": {
          "search_space_topk": {
            "type": "integer",
            "title": "Search Space Topk",
            "description": "Number of sentences to use as search space per concept.",
            "default": 1000
          },
          "search_space_threshold": {
            "type": "number",
            "title": "Search Space Threshold",
            "description": "Threshold to filter sentences from the search space.",
            "default": 0.8
          },
          "min_required_annotations_per_concept": {
            "type": "integer",
            "title": "Min Required Annotations Per Concept",
            "description": "Minimum number of annotations per concept required to train the CEM.",
            "default": 5
          },
          "dimensionality_reduction_algorithm": {
            "$ref": "#/components/schemas/DimensionalityReductionAlgorithm",
            "description": "Dimensionality Reduction Algorithm used for the ConceptOverTimeAnalysis",
            "default": "umap"
          },
          "layers": {
            "type": "integer",
            "title": "Layers",
            "description": "Number of layers of the CEM.",
            "default": 5
          },
          "dimensions": {
            "type": "integer",
            "title": "Dimensions",
            "description": "Number of dimensions of the CEM.",
            "default": 64
          },
          "epochs": { "type": "integer", "title": "Epochs", "description": "Number of epochs to train", "default": 5 }
        },
        "type": "object",
        "title": "COTATrainingSettings"
      },
      "COTAUpdate": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "Name of the ConceptOverTimeAnalysis"
          },
          "timeline_settings": {
            "anyOf": [{ "$ref": "#/components/schemas/COTATimelineSettings" }, { "type": "null" }],
            "description": "Timeline Settings of the ConceptOverTimeAnalysis."
          },
          "training_settings": {
            "anyOf": [{ "$ref": "#/components/schemas/COTATrainingSettings" }, { "type": "null" }],
            "description": "Training Settings of the ConceptOverTimeAnalysis."
          },
          "concepts": {
            "anyOf": [{ "items": { "$ref": "#/components/schemas/COTAConcept" }, "type": "array" }, { "type": "null" }],
            "title": "Concepts",
            "description": "List of Concepts that are part of the ConceptOverTimeAnalysis"
          }
        },
        "type": "object",
        "title": "COTAUpdate"
      },
      "CodeCreate": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the Code" },
          "color": { "type": "string", "title": "Color", "description": "Color of the Code" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Code" },
          "parent_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Id",
            "description": "Parent of the Code"
          },
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project the Code belongs to" },
          "is_system": { "type": "boolean", "title": "Is System", "description": "Is the Code a system code" }
        },
        "type": "object",
        "required": ["name", "description", "project_id", "is_system"],
        "title": "CodeCreate"
      },
      "CodeFrequency": {
        "properties": {
          "code_id": { "type": "integer", "title": "Code Id", "description": "The id of the code." },
          "count": { "type": "integer", "title": "Count", "description": "The number of occurrences of the code." }
        },
        "type": "object",
        "required": ["code_id", "count"],
        "title": "CodeFrequency"
      },
      "CodeOccurrence": {
        "properties": {
          "sdoc": {
            "$ref": "#/components/schemas/SourceDocumentRead",
            "description": "The SourceDocument where the Code occurs."
          },
          "code": { "$ref": "#/components/schemas/CodeRead", "description": "The occuring Code." },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "A text span of the SourceDocument annotated with the Code."
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "The number of occurrences of the text span annotated with the Code in the SourceDocument."
          }
        },
        "type": "object",
        "required": ["sdoc", "code", "text", "count"],
        "title": "CodeOccurrence"
      },
      "CodeRead": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the Code" },
          "color": { "type": "string", "title": "Color", "description": "Color of the Code" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Code" },
          "parent_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Id",
            "description": "Parent of the Code"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the Code" },
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project the Code belongs to" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the Code"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Code"
          },
          "is_system": { "type": "boolean", "title": "Is System", "description": "Is the Code a system code" }
        },
        "type": "object",
        "required": ["name", "color", "description", "id", "project_id", "created", "updated", "is_system"],
        "title": "CodeRead"
      },
      "CodeUpdate": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "Name of the Code"
          },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Color",
            "description": "Color of the Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the Code"
          },
          "parent_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Id",
            "description": "Parent of the Code"
          }
        },
        "type": "object",
        "title": "CodeUpdate"
      },
      "ColumnInfo_BBoxColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/BBoxColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[BBoxColumns]"
      },
      "ColumnInfo_MemoColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/MemoColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[MemoColumns]"
      },
      "ColumnInfo_SdocColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SdocColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[SdocColumns]"
      },
      "ColumnInfo_SentAnnoColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SentAnnoColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[SentAnnoColumns]"
      },
      "ColumnInfo_SpanColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SpanColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[SpanColumns]"
      },
      "ColumnInfo_TimelineAnalysisColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/TimelineAnalysisColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[TimelineAnalysisColumns]"
      },
      "ColumnInfo_WordFrequencyColumns_": {
        "properties": {
          "label": { "type": "string", "title": "Label" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/WordFrequencyColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "sortable": { "type": "boolean", "title": "Sortable" },
          "operator": { "$ref": "#/components/schemas/FilterOperator" },
          "value": { "$ref": "#/components/schemas/FilterValueType" }
        },
        "type": "object",
        "required": ["label", "column", "sortable", "operator", "value"],
        "title": "ColumnInfo[WordFrequencyColumns]"
      },
      "CrawlerJobParameters": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to import the crawled data."
          },
          "urls": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Urls",
            "description": "List of URLs to crawl."
          }
        },
        "type": "object",
        "required": ["project_id", "urls"],
        "title": "CrawlerJobParameters"
      },
      "CrawlerJobRead": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BackgroundJobStatus",
            "description": "Status of the CrawlerJob",
            "default": "Waiting"
          },
          "id": { "type": "string", "title": "Id", "description": "ID of the CrawlerJob" },
          "parameters": {
            "$ref": "#/components/schemas/CrawlerJobParameters",
            "description": "The parameters of the crawler job that defines what to crawl!"
          },
          "output_dir": {
            "type": "string",
            "title": "Output Dir",
            "description": "Internal temporary output directory for the crawled data."
          },
          "images_store_path": {
            "type": "string",
            "title": "Images Store Path",
            "description": "Internal temporary output directory for the crawled images."
          },
          "videos_store_path": {
            "type": "string",
            "title": "Videos Store Path",
            "description": "Internal temporary output directory for the crawled videos."
          },
          "audios_store_path": {
            "type": "string",
            "title": "Audios Store Path",
            "description": "Internal temporary output directory for the crawled audios."
          },
          "crawled_data_zip_path": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Crawled Data Zip Path",
            "description": "Path to the ZIP that contains the data of the CrawlerJob"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the CrawlerJob"
          }
        },
        "type": "object",
        "required": [
          "id",
          "parameters",
          "output_dir",
          "images_store_path",
          "videos_store_path",
          "audios_store_path",
          "created"
        ],
        "title": "CrawlerJobRead"
      },
      "DateGroupBy": { "type": "string", "enum": ["YEAR", "MONTH", "DAY"], "title": "DateGroupBy" },
      "DateOperator": {
        "type": "string",
        "enum": ["DATE_EQUALS", "DATE_GT", "DATE_LT", "DATE_GTE", "DATE_LTE"],
        "title": "DateOperator"
      },
      "DimensionalityReductionAlgorithm": {
        "type": "string",
        "enum": ["umap", "pca", "tsne"],
        "title": "DimensionalityReductionAlgorithm"
      },
      "DocType": { "type": "string", "enum": ["text", "image", "video", "audio"], "title": "DocType" },
      "DocumentTagCreate": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Title of the DocumentTag" },
          "color": { "type": "string", "title": "Color", "description": "Color of the Code" },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the DocumentTag"
          },
          "parent_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Id",
            "description": "Parent of the DocumentTag"
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the DocumentTag belongs to"
          }
        },
        "type": "object",
        "required": ["name", "project_id"],
        "title": "DocumentTagCreate"
      },
      "DocumentTagRead": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Title of the DocumentTag" },
          "color": { "type": "string", "title": "Color", "description": "Color of the DocumentTag" },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the DocumentTag"
          },
          "parent_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Id",
            "description": "Parent of the DocumentTag"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the DocumentTag" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the DocumentTag belongs to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the DocumentTag"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the DocumentTag"
          }
        },
        "type": "object",
        "required": ["name", "color", "id", "project_id", "created", "updated"],
        "title": "DocumentTagRead"
      },
      "DocumentTagUpdate": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "Name of the DocumentTag"
          },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Color",
            "description": "Color of the DocumentTag"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the DocumentTag"
          },
          "parent_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Parent Id",
            "description": "Parent of the DocumentTag"
          }
        },
        "type": "object",
        "title": "DocumentTagUpdate"
      },
      "DocumentTaggingLLMJobResult": {
        "properties": {
          "llm_job_type": { "type": "string", "const": "DOCUMENT_TAGGING", "title": "Llm Job Type" },
          "results": {
            "items": { "$ref": "#/components/schemas/DocumentTaggingResult" },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": ["llm_job_type", "results"],
        "title": "DocumentTaggingLLMJobResult"
      },
      "DocumentTaggingParams": {
        "properties": {
          "llm_job_type": { "type": "string", "const": "DOCUMENT_TAGGING", "title": "Llm Job Type" },
          "sdoc_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sdoc Ids",
            "description": "IDs of the source documents to analyse"
          },
          "tag_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Tag Ids",
            "description": "IDs of the tags to use for the document tagging"
          }
        },
        "type": "object",
        "required": ["llm_job_type", "sdoc_ids", "tag_ids"],
        "title": "DocumentTaggingParams"
      },
      "DocumentTaggingResult": {
        "properties": {
          "status": { "$ref": "#/components/schemas/BackgroundJobStatus", "description": "Status of the Result" },
          "status_message": {
            "type": "string",
            "title": "Status Message",
            "description": "Status message of the result"
          },
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "ID of the source document" },
          "current_tag_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Current Tag Ids",
            "description": "IDs of the tags currently assigned to the document"
          },
          "suggested_tag_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Suggested Tag Ids",
            "description": "IDs of the tags suggested by the LLM to assign to the document"
          },
          "reasoning": { "type": "string", "title": "Reasoning", "description": "Reasoning for the tagging" }
        },
        "type": "object",
        "required": ["status", "status_message", "sdoc_id", "current_tag_ids", "suggested_tag_ids", "reasoning"],
        "title": "DocumentTaggingResult"
      },
      "ElasticSearchDocumentHit": {
        "properties": {
          "document_id": { "type": "integer", "title": "Document Id", "description": "The ID of the Document" },
          "score": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Score",
            "description": "The score of the Document that was found by a ES Query"
          },
          "highlights": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Highlights",
            "description": "The highlights found within the document.",
            "default": []
          }
        },
        "type": "object",
        "required": ["document_id"],
        "title": "ElasticSearchDocumentHit"
      },
      "ExportFormat": { "type": "string", "enum": ["CSV", "JSON"], "title": "ExportFormat" },
      "ExportJobParameters": {
        "properties": {
          "export_job_type": {
            "$ref": "#/components/schemas/ExportJobType",
            "description": "The type of the export job (what to export)"
          },
          "export_format": {
            "$ref": "#/components/schemas/ExportFormat",
            "description": "The format of the exported data.",
            "default": "CSV"
          },
          "specific_export_job_parameters": {
            "oneOf": [
              { "$ref": "#/components/schemas/SingleProjectAllDataExportJobParams" },
              { "$ref": "#/components/schemas/SingleProjectAllUserExportJobParams" },
              { "$ref": "#/components/schemas/SingleProjectAllTagsExportJobParams" },
              { "$ref": "#/components/schemas/SingleProjectAllCodesExportJobParams" },
              { "$ref": "#/components/schemas/SingleProjectSelectedSdocsParams" },
              { "$ref": "#/components/schemas/SingleProjectSelectedSpanAnnotationsParams" },
              { "$ref": "#/components/schemas/SingleProjectSelectedSentenceAnnotationsParams" },
              { "$ref": "#/components/schemas/SingleUserAllDataExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserAllMemosExportJobParams" },
              { "$ref": "#/components/schemas/SingleUserLogbookExportJobParams" },
              { "$ref": "#/components/schemas/SingleDocAllUserAnnotationsExportJobParams" },
              { "$ref": "#/components/schemas/SingleDocSingleUserAnnotationsExportJobParams" }
            ],
            "title": "Specific Export Job Parameters",
            "description": "Specific parameters for the export job w.r.t it's type",
            "discriminator": {
              "propertyName": "export_job_type",
              "mapping": {
                "SINGLE_DOC_ALL_USER_ANNOTATIONS": "#/components/schemas/SingleDocAllUserAnnotationsExportJobParams",
                "SINGLE_DOC_SINGLE_USER_ANNOTATIONS": "#/components/schemas/SingleDocSingleUserAnnotationsExportJobParams",
                "SINGLE_PROJECT_ALL_CODES": "#/components/schemas/SingleProjectAllCodesExportJobParams",
                "SINGLE_PROJECT_ALL_DATA": "#/components/schemas/SingleProjectAllDataExportJobParams",
                "SINGLE_PROJECT_ALL_TAGS": "#/components/schemas/SingleProjectAllTagsExportJobParams",
                "SINGLE_PROJECT_ALL_USER": "#/components/schemas/SingleProjectAllUserExportJobParams",
                "SINGLE_PROJECT_SELECTED_SDOCS": "#/components/schemas/SingleProjectSelectedSdocsParams",
                "SINGLE_PROJECT_SELECTED_SENTENCE_ANNOTATIONS": "#/components/schemas/SingleProjectSelectedSentenceAnnotationsParams",
                "SINGLE_PROJECT_SELECTED_SPAN_ANNOTATIONS": "#/components/schemas/SingleProjectSelectedSpanAnnotationsParams",
                "SINGLE_USER_ALL_DATA": "#/components/schemas/SingleUserAllDataExportJobParams",
                "SINGLE_USER_ALL_MEMOS": "#/components/schemas/SingleUserAllMemosExportJobParams",
                "SINGLE_USER_LOGBOOK": "#/components/schemas/SingleUserLogbookExportJobParams"
              }
            }
          }
        },
        "type": "object",
        "required": ["export_job_type", "specific_export_job_parameters"],
        "title": "ExportJobParameters"
      },
      "ExportJobRead": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BackgroundJobStatus",
            "description": "Status of the ExportJob",
            "default": "Waiting"
          },
          "results_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Results Url",
            "description": "URL to download the results when done."
          },
          "id": { "type": "string", "title": "Id", "description": "ID of the ExportJob" },
          "parameters": {
            "$ref": "#/components/schemas/ExportJobParameters",
            "description": "The parameters of the export job that defines what to export!"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the ExportJob"
          }
        },
        "type": "object",
        "required": ["id", "parameters", "created"],
        "title": "ExportJobRead"
      },
      "ExportJobType": {
        "type": "string",
        "enum": [
          "SINGLE_PROJECT_ALL_DATA",
          "SINGLE_PROJECT_ALL_USER",
          "SINGLE_PROJECT_ALL_TAGS",
          "SINGLE_PROJECT_ALL_CODES",
          "SINGLE_PROJECT_SELECTED_SDOCS",
          "SINGLE_PROJECT_SELECTED_SPAN_ANNOTATIONS",
          "SINGLE_PROJECT_SELECTED_SENTENCE_ANNOTATIONS",
          "SINGLE_USER_ALL_DATA",
          "SINGLE_USER_ALL_MEMOS",
          "SINGLE_USER_LOGBOOK",
          "SINGLE_DOC_ALL_USER_ANNOTATIONS",
          "SINGLE_DOC_SINGLE_USER_ANNOTATIONS"
        ],
        "title": "ExportJobType"
      },
      "FewShotParams": {
        "properties": {
          "llm_approach_type": { "type": "string", "const": "LLM_FEW_SHOT", "title": "Llm Approach Type" },
          "prompts": {
            "items": { "$ref": "#/components/schemas/LLMPromptTemplates" },
            "type": "array",
            "title": "Prompts",
            "description": "The prompt templates to use for the job"
          }
        },
        "type": "object",
        "required": ["llm_approach_type", "prompts"],
        "title": "FewShotParams"
      },
      "FilterExpression_BBoxColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/BBoxColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["id", "column", "operator", "value"],
        "title": "FilterExpression[BBoxColumns]"
      },
      "FilterExpression_MemoColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/MemoColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["id", "column", "operator", "value"],
        "title": "FilterExpression[MemoColumns]"
      },
      "FilterExpression_SdocColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SdocColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["id", "column", "operator", "value"],
        "title": "FilterExpression[SdocColumns]"
      },
      "FilterExpression_SentAnnoColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SentAnnoColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["id", "column", "operator", "value"],
        "title": "FilterExpression[SentAnnoColumns]"
      },
      "FilterExpression_SpanColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SpanColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["id", "column", "operator", "value"],
        "title": "FilterExpression[SpanColumns]"
      },
      "FilterExpression_TimelineAnalysisColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/TimelineAnalysisColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["id", "column", "operator", "value"],
        "title": "FilterExpression[TimelineAnalysisColumns]"
      },
      "FilterExpression_WordFrequencyColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/WordFrequencyColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "operator": {
            "anyOf": [
              { "$ref": "#/components/schemas/IDOperator" },
              { "$ref": "#/components/schemas/NumberOperator" },
              { "$ref": "#/components/schemas/StringOperator" },
              { "$ref": "#/components/schemas/IDListOperator" },
              { "$ref": "#/components/schemas/ListOperator" },
              { "$ref": "#/components/schemas/DateOperator" },
              { "$ref": "#/components/schemas/BooleanOperator" }
            ],
            "title": "Operator"
          },
          "value": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "string" },
              { "type": "integer" },
              { "items": { "type": "string" }, "type": "array" },
              { "items": { "items": { "type": "string" }, "type": "array" }, "type": "array" }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["id", "column", "operator", "value"],
        "title": "FilterExpression[WordFrequencyColumns]"
      },
      "FilterOperator": {
        "type": "string",
        "enum": ["BOOLEAN", "STRING", "ID", "NUMBER", "ID_LIST", "LIST", "DATE"],
        "title": "FilterOperator"
      },
      "FilterValueType": {
        "type": "string",
        "enum": ["SDOC_ID", "CODE_ID", "USER_ID", "TAG_ID", "SPAN_ANNOTATION", "DOC_TYPE", "INFER_FROM_OPERATOR"],
        "title": "FilterValueType"
      },
      "Filter_BBoxColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_BBoxColumns_" },
                { "$ref": "#/components/schemas/Filter_BBoxColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["id", "items", "logic_operator"],
        "title": "Filter[BBoxColumns]"
      },
      "Filter_MemoColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_MemoColumns_" },
                { "$ref": "#/components/schemas/Filter_MemoColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["id", "items", "logic_operator"],
        "title": "Filter[MemoColumns]"
      },
      "Filter_SdocColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_SdocColumns_" },
                { "$ref": "#/components/schemas/Filter_SdocColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["id", "items", "logic_operator"],
        "title": "Filter[SdocColumns]"
      },
      "Filter_SentAnnoColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_SentAnnoColumns_" },
                { "$ref": "#/components/schemas/Filter_SentAnnoColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["id", "items", "logic_operator"],
        "title": "Filter[SentAnnoColumns]"
      },
      "Filter_SpanColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_SpanColumns_" },
                { "$ref": "#/components/schemas/Filter_SpanColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["id", "items", "logic_operator"],
        "title": "Filter[SpanColumns]"
      },
      "Filter_TimelineAnalysisColumns_-Input": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_TimelineAnalysisColumns_" },
                { "$ref": "#/components/schemas/Filter_TimelineAnalysisColumns_-Input" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["id", "items", "logic_operator"],
        "title": "Filter[TimelineAnalysisColumns]"
      },
      "Filter_TimelineAnalysisColumns_-Output": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_TimelineAnalysisColumns_" },
                { "$ref": "#/components/schemas/Filter_TimelineAnalysisColumns_-Output" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["id", "items", "logic_operator"],
        "title": "Filter[TimelineAnalysisColumns]"
      },
      "Filter_WordFrequencyColumns_": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "items": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/FilterExpression_WordFrequencyColumns_" },
                { "$ref": "#/components/schemas/Filter_WordFrequencyColumns_" }
              ]
            },
            "type": "array",
            "title": "Items"
          },
          "logic_operator": { "$ref": "#/components/schemas/LogicalOperator" }
        },
        "type": "object",
        "required": ["id", "items", "logic_operator"],
        "title": "Filter[WordFrequencyColumns]"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": { "items": { "$ref": "#/components/schemas/ValidationError" }, "type": "array", "title": "Detail" }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IDListOperator": {
        "type": "string",
        "enum": ["ID_LIST_CONTAINS", "ID_LIST_NOT_CONTAINS"],
        "title": "IDListOperator"
      },
      "IDOperator": { "type": "string", "enum": ["ID_EQUALS", "ID_NOT_EQUALS"], "title": "IDOperator" },
      "ImportJobParameters": {
        "properties": {
          "proj_id": { "type": "integer", "title": "Proj Id", "description": "ID of the Project" },
          "user_id": { "type": "integer", "title": "User Id", "description": "ID of the User, who started the job." },
          "filename": { "type": "string", "title": "Filename", "description": "Filename of the csv or zip of csvs." },
          "import_job_type": {
            "$ref": "#/components/schemas/ImportJobType",
            "description": "The type of the import job (what to import)"
          }
        },
        "type": "object",
        "required": ["proj_id", "user_id", "filename", "import_job_type"],
        "title": "ImportJobParameters"
      },
      "ImportJobRead": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BackgroundJobStatus",
            "description": "Status of the ImportJob",
            "default": "Waiting"
          },
          "id": { "type": "string", "title": "Id", "description": "ID of the ImportJob" },
          "parameters": {
            "$ref": "#/components/schemas/ImportJobParameters",
            "description": "The parameters of the import job that defines what to import!"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the ImportJob"
          }
        },
        "type": "object",
        "required": ["id", "parameters", "created"],
        "title": "ImportJobRead"
      },
      "ImportJobType": { "type": "string", "enum": ["PROJECT", "CODES", "TAGS"], "title": "ImportJobType" },
      "KeywordStat": {
        "properties": {
          "keyword": { "type": "string", "title": "Keyword", "description": "The counted keyword." },
          "filtered_count": {
            "type": "integer",
            "title": "Filtered Count",
            "description": "Number of occurrences of the keyword in the filtered collection"
          },
          "global_count": {
            "type": "integer",
            "title": "Global Count",
            "description": "Number of occurrences of the keyword in the entire collection"
          }
        },
        "type": "object",
        "required": ["keyword", "filtered_count", "global_count"],
        "title": "KeywordStat"
      },
      "LLMJobParameters": {
        "properties": {
          "llm_job_type": {
            "$ref": "#/components/schemas/TaskType",
            "description": "The type of the LLMJob (what to llm)"
          },
          "project_id": { "type": "integer", "title": "Project Id", "description": "The ID of the Project to analyse" },
          "specific_task_parameters": {
            "oneOf": [
              { "$ref": "#/components/schemas/DocumentTaggingParams" },
              { "$ref": "#/components/schemas/MetadataExtractionParams" },
              { "$ref": "#/components/schemas/AnnotationParams" },
              { "$ref": "#/components/schemas/SentenceAnnotationParams" }
            ],
            "title": "Specific Task Parameters",
            "description": "Specific parameters for the LLMJob w.r.t it's type",
            "discriminator": {
              "propertyName": "llm_job_type",
              "mapping": {
                "ANNOTATION": "#/components/schemas/AnnotationParams",
                "DOCUMENT_TAGGING": "#/components/schemas/DocumentTaggingParams",
                "METADATA_EXTRACTION": "#/components/schemas/MetadataExtractionParams",
                "SENTENCE_ANNOTATION": "#/components/schemas/SentenceAnnotationParams"
              }
            }
          }
        },
        "type": "object",
        "required": ["llm_job_type", "project_id", "specific_task_parameters"],
        "title": "LLMJobParameters"
      },
      "LLMJobParameters2-Input": {
        "properties": {
          "llm_job_type": {
            "$ref": "#/components/schemas/TaskType",
            "description": "The type of the LLMJob (what to llm)"
          },
          "project_id": { "type": "integer", "title": "Project Id", "description": "The ID of the Project to analyse" },
          "specific_task_parameters": {
            "oneOf": [
              { "$ref": "#/components/schemas/DocumentTaggingParams" },
              { "$ref": "#/components/schemas/MetadataExtractionParams" },
              { "$ref": "#/components/schemas/AnnotationParams" },
              { "$ref": "#/components/schemas/SentenceAnnotationParams" }
            ],
            "title": "Specific Task Parameters",
            "description": "Specific parameters for the LLMJob w.r.t it's type",
            "discriminator": {
              "propertyName": "llm_job_type",
              "mapping": {
                "ANNOTATION": "#/components/schemas/AnnotationParams",
                "DOCUMENT_TAGGING": "#/components/schemas/DocumentTaggingParams",
                "METADATA_EXTRACTION": "#/components/schemas/MetadataExtractionParams",
                "SENTENCE_ANNOTATION": "#/components/schemas/SentenceAnnotationParams"
              }
            }
          },
          "llm_approach_type": {
            "$ref": "#/components/schemas/ApproachType",
            "description": "The approach to use for the LLMJob"
          },
          "specific_approach_parameters": {
            "oneOf": [
              { "$ref": "#/components/schemas/ZeroShotParams" },
              { "$ref": "#/components/schemas/FewShotParams" },
              { "$ref": "#/components/schemas/ModelTrainingParams" }
            ],
            "title": "Specific Approach Parameters",
            "description": "Specific parameters for the approach w.r.t it's type",
            "discriminator": {
              "propertyName": "llm_approach_type",
              "mapping": {
                "LLM_FEW_SHOT": "#/components/schemas/FewShotParams",
                "LLM_ZERO_SHOT": "#/components/schemas/ZeroShotParams",
                "MODEL_TRAINING": "#/components/schemas/ModelTrainingParams"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "llm_job_type",
          "project_id",
          "specific_task_parameters",
          "llm_approach_type",
          "specific_approach_parameters"
        ],
        "title": "LLMJobParameters2"
      },
      "LLMJobParameters2-Output": {
        "properties": {
          "llm_job_type": {
            "$ref": "#/components/schemas/TaskType",
            "description": "The type of the LLMJob (what to llm)"
          },
          "project_id": { "type": "integer", "title": "Project Id", "description": "The ID of the Project to analyse" },
          "specific_task_parameters": {
            "oneOf": [
              { "$ref": "#/components/schemas/DocumentTaggingParams" },
              { "$ref": "#/components/schemas/MetadataExtractionParams" },
              { "$ref": "#/components/schemas/AnnotationParams" },
              { "$ref": "#/components/schemas/SentenceAnnotationParams" }
            ],
            "title": "Specific Task Parameters",
            "description": "Specific parameters for the LLMJob w.r.t it's type",
            "discriminator": {
              "propertyName": "llm_job_type",
              "mapping": {
                "ANNOTATION": "#/components/schemas/AnnotationParams",
                "DOCUMENT_TAGGING": "#/components/schemas/DocumentTaggingParams",
                "METADATA_EXTRACTION": "#/components/schemas/MetadataExtractionParams",
                "SENTENCE_ANNOTATION": "#/components/schemas/SentenceAnnotationParams"
              }
            }
          },
          "llm_approach_type": {
            "$ref": "#/components/schemas/ApproachType",
            "description": "The approach to use for the LLMJob"
          },
          "specific_approach_parameters": {
            "oneOf": [
              { "$ref": "#/components/schemas/ZeroShotParams" },
              { "$ref": "#/components/schemas/FewShotParams" },
              { "$ref": "#/components/schemas/ModelTrainingParams" }
            ],
            "title": "Specific Approach Parameters",
            "description": "Specific parameters for the approach w.r.t it's type",
            "discriminator": {
              "propertyName": "llm_approach_type",
              "mapping": {
                "LLM_FEW_SHOT": "#/components/schemas/FewShotParams",
                "LLM_ZERO_SHOT": "#/components/schemas/ZeroShotParams",
                "MODEL_TRAINING": "#/components/schemas/ModelTrainingParams"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "llm_job_type",
          "project_id",
          "specific_task_parameters",
          "llm_approach_type",
          "specific_approach_parameters"
        ],
        "title": "LLMJobParameters2"
      },
      "LLMJobRead": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BackgroundJobStatus",
            "description": "Status of the LLMJob",
            "default": "Waiting"
          },
          "num_steps_total": { "type": "integer", "title": "Num Steps Total", "description": "Number of total steps." },
          "current_step": { "type": "integer", "title": "Current Step", "description": "The current step." },
          "current_step_description": {
            "type": "string",
            "title": "Current Step Description",
            "description": "Description of the current step."
          },
          "result": {
            "anyOf": [{ "$ref": "#/components/schemas/LLMJobResult" }, { "type": "null" }],
            "description": "Results of the LLMJob."
          },
          "id": { "type": "string", "title": "Id", "description": "ID of the LLMJob" },
          "parameters": {
            "$ref": "#/components/schemas/LLMJobParameters2-Output",
            "description": "The parameters of the LLMJob that defines what to llm!"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the LLMJob"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the LLMJob"
          }
        },
        "type": "object",
        "required": [
          "num_steps_total",
          "current_step",
          "current_step_description",
          "id",
          "parameters",
          "created",
          "updated"
        ],
        "title": "LLMJobRead"
      },
      "LLMJobResult": {
        "properties": {
          "llm_job_type": {
            "$ref": "#/components/schemas/TaskType",
            "description": "The type of the LLMJob (what to llm)"
          },
          "specific_task_result": {
            "oneOf": [
              { "$ref": "#/components/schemas/DocumentTaggingLLMJobResult" },
              { "$ref": "#/components/schemas/MetadataExtractionLLMJobResult" },
              { "$ref": "#/components/schemas/AnnotationLLMJobResult" },
              { "$ref": "#/components/schemas/SentenceAnnotationLLMJobResult" }
            ],
            "title": "Specific Task Result",
            "description": "Specific result for the LLMJob w.r.t it's type",
            "discriminator": {
              "propertyName": "llm_job_type",
              "mapping": {
                "ANNOTATION": "#/components/schemas/AnnotationLLMJobResult",
                "DOCUMENT_TAGGING": "#/components/schemas/DocumentTaggingLLMJobResult",
                "METADATA_EXTRACTION": "#/components/schemas/MetadataExtractionLLMJobResult",
                "SENTENCE_ANNOTATION": "#/components/schemas/SentenceAnnotationLLMJobResult"
              }
            }
          }
        },
        "type": "object",
        "required": ["llm_job_type", "specific_task_result"],
        "title": "LLMJobResult"
      },
      "LLMPromptTemplates": {
        "properties": {
          "language": { "type": "string", "title": "Language", "description": "The language of the prompt template" },
          "system_prompt": {
            "type": "string",
            "title": "System Prompt",
            "description": "The system prompt to use for the job"
          },
          "user_prompt": {
            "type": "string",
            "title": "User Prompt",
            "description": "The user prompt to use for the job"
          }
        },
        "type": "object",
        "required": ["language", "system_prompt", "user_prompt"],
        "title": "LLMPromptTemplates"
      },
      "ListOperator": { "type": "string", "enum": ["LIST_CONTAINS", "LIST_NOT_CONTAINS"], "title": "ListOperator" },
      "LogicalOperator": {
        "type": "string",
        "enum": ["or", "and"],
        "title": "LogicalOperator",
        "description": "This tells our filter how to combine multiple column expressions."
      },
      "MLJobParameters": {
        "properties": {
          "ml_job_type": { "$ref": "#/components/schemas/MLJobType", "description": "The type of the MLJob" },
          "project_id": { "type": "integer", "title": "Project Id", "description": "The ID of the Project to analyse" },
          "specific_ml_job_parameters": {
            "anyOf": [
              {
                "oneOf": [{ "$ref": "#/components/schemas/QuotationAttributionParams" }],
                "discriminator": {
                  "propertyName": "ml_job_type",
                  "mapping": { "QUOTATION_ATTRIBUTION": "#/components/schemas/QuotationAttributionParams" }
                }
              },
              { "type": "null" }
            ],
            "title": "Specific Ml Job Parameters",
            "description": "Specific parameters for the LLMJob w.r.t it's type"
          }
        },
        "type": "object",
        "required": ["ml_job_type", "project_id", "specific_ml_job_parameters"],
        "title": "MLJobParameters"
      },
      "MLJobRead": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BackgroundJobStatus",
            "description": "Status of the LLMJob",
            "default": "Waiting"
          },
          "error": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Error",
            "description": "Error message (if any)"
          },
          "id": { "type": "string", "title": "Id", "description": "ID of the MLJob" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the LLMJob"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the LLMJob"
          },
          "parameters": { "$ref": "#/components/schemas/MLJobParameters" }
        },
        "type": "object",
        "required": ["id", "created", "updated", "parameters"],
        "title": "MLJobRead"
      },
      "MLJobType": { "type": "string", "enum": ["QUOTATION_ATTRIBUTION"], "title": "MLJobType" },
      "MemoColumns": {
        "type": "string",
        "enum": ["M_TITLE", "M_CONTENT", "M_STARRED", "M_USER_ID"],
        "title": "MemoColumns"
      },
      "MemoCreate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Memo" },
          "content": { "type": "string", "title": "Content", "description": "Textual content of the Memo" },
          "content_json": { "type": "string", "title": "Content Json", "description": "JSON content of the Memo" },
          "starred": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Starred",
            "description": "Starred flag of the Memo",
            "default": false
          }
        },
        "type": "object",
        "required": ["title", "content", "content_json"],
        "title": "MemoCreate"
      },
      "MemoRead": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Memo" },
          "content": { "type": "string", "title": "Content", "description": "Textual content of the Memo" },
          "content_json": { "type": "string", "title": "Content Json", "description": "JSON content of the Memo" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the Memo" },
          "starred": { "type": "boolean", "title": "Starred", "description": "Starred flag of the Memo" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the Memo belongs to" },
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project the Memo belongs to" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the Memo"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Memo"
          },
          "attached_object_id": {
            "type": "integer",
            "title": "Attached Object Id",
            "description": "ID of the Object the Memo is attached to"
          },
          "attached_object_type": {
            "$ref": "#/components/schemas/AttachedObjectType",
            "description": "Type of the Object the ID refers to"
          }
        },
        "type": "object",
        "required": [
          "title",
          "content",
          "content_json",
          "id",
          "starred",
          "user_id",
          "project_id",
          "created",
          "updated",
          "attached_object_id",
          "attached_object_type"
        ],
        "title": "MemoRead"
      },
      "MemoUpdate": {
        "properties": {
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title",
            "description": "Title of the Memo"
          },
          "content": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Content",
            "description": "Textual content of the Memo"
          },
          "content_json": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Content Json",
            "description": "JSON content of the Memo"
          },
          "starred": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Starred",
            "description": "Starred flag of the Memo"
          }
        },
        "type": "object",
        "title": "MemoUpdate"
      },
      "MetaType": { "type": "string", "enum": ["STRING", "NUMBER", "DATE", "BOOLEAN", "LIST"], "title": "MetaType" },
      "MetadataExtractionLLMJobResult": {
        "properties": {
          "llm_job_type": { "type": "string", "const": "METADATA_EXTRACTION", "title": "Llm Job Type" },
          "results": {
            "items": { "$ref": "#/components/schemas/MetadataExtractionResult" },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": ["llm_job_type", "results"],
        "title": "MetadataExtractionLLMJobResult"
      },
      "MetadataExtractionParams": {
        "properties": {
          "llm_job_type": { "type": "string", "const": "METADATA_EXTRACTION", "title": "Llm Job Type" },
          "sdoc_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sdoc Ids",
            "description": "IDs of the source documents to analyse"
          },
          "project_metadata_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Project Metadata Ids",
            "description": "IDs of the project metadata to use for the metadata extraction"
          }
        },
        "type": "object",
        "required": ["llm_job_type", "sdoc_ids", "project_metadata_ids"],
        "title": "MetadataExtractionParams"
      },
      "MetadataExtractionResult": {
        "properties": {
          "status": { "$ref": "#/components/schemas/BackgroundJobStatus", "description": "Status of the Result" },
          "status_message": {
            "type": "string",
            "title": "Status Message",
            "description": "Status message of the result"
          },
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "ID of the source document" },
          "current_metadata": {
            "items": { "$ref": "#/components/schemas/SourceDocumentMetadataReadResolved" },
            "type": "array",
            "title": "Current Metadata",
            "description": "Current metadata"
          },
          "suggested_metadata": {
            "items": { "$ref": "#/components/schemas/SourceDocumentMetadataReadResolved" },
            "type": "array",
            "title": "Suggested Metadata",
            "description": "Suggested metadata"
          }
        },
        "type": "object",
        "required": ["status", "status_message", "sdoc_id", "current_metadata", "suggested_metadata"],
        "title": "MetadataExtractionResult"
      },
      "ModelTrainingParams": {
        "properties": {
          "llm_approach_type": { "type": "string", "const": "MODEL_TRAINING", "title": "Llm Approach Type" },
          "training_parameters": {
            "$ref": "#/components/schemas/TrainingParameters",
            "description": "The training parameters to use for the job"
          }
        },
        "type": "object",
        "required": ["llm_approach_type", "training_parameters"],
        "title": "ModelTrainingParams"
      },
      "NumberOperator": {
        "type": "string",
        "enum": ["NUMBER_EQUALS", "NUMBER_NOT_EQUALS", "NUMBER_GT", "NUMBER_LT", "NUMBER_GTE", "NUMBER_LTE"],
        "title": "NumberOperator"
      },
      "PaginatedElasticSearchDocumentHits": {
        "properties": {
          "hits": {
            "items": { "$ref": "#/components/schemas/ElasticSearchDocumentHit" },
            "type": "array",
            "title": "Hits",
            "description": "The IDs, scores and (optional) highlights of Document search results on the requested page."
          },
          "total_results": {
            "type": "integer",
            "title": "Total Results",
            "description": "The total number of hits. Used for pagination."
          }
        },
        "type": "object",
        "required": ["hits", "total_results"],
        "title": "PaginatedElasticSearchDocumentHits"
      },
      "PreProProjectStatus": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project ID this PreProProjectStatus refers to."
          },
          "active_prepro_job_ids": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Active Prepro Job Ids",
            "description": "List of active PreprocessingJob UUIDs"
          },
          "num_active_prepro_job_payloads": {
            "type": "integer",
            "title": "Num Active Prepro Job Payloads",
            "description": "Number of active PreprocessingJobPayloads"
          },
          "erroneous_prepro_job_payload_ids": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Erroneous Prepro Job Payload Ids",
            "description": "List of erroneous or aborted PreprocessingJobPayload UUIDs"
          },
          "num_sdocs_finished": {
            "type": "integer",
            "title": "Num Sdocs Finished",
            "description": "Number of SourceDocuments preprocessing has finished."
          },
          "num_sdocs_total": {
            "type": "integer",
            "title": "Num Sdocs Total",
            "description": "Number of total SourceDocuments."
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "num_active_prepro_job_payloads",
          "erroneous_prepro_job_payload_ids",
          "num_sdocs_finished",
          "num_sdocs_total"
        ],
        "title": "PreProProjectStatus"
      },
      "PreprocessingJobPayloadRead": {
        "properties": {
          "id": { "type": "string", "title": "Id", "description": "ID of the PreprocessingJobPayload" },
          "prepro_job_id": {
            "type": "string",
            "title": "Prepro Job Id",
            "description": "UUID of the PreprocessingJob this payload belongs to."
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "ID of the Project of the PreprocessingJobPayload"
          },
          "source_document_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Source Document Id",
            "description": "ID of the SourceDocument that was created from the payload."
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundJobStatus",
            "description": "The current status of the payload.",
            "default": "Waiting"
          },
          "filename": {
            "type": "string",
            "title": "Filename",
            "description": "The filename of the document to be preprocessed."
          },
          "mime_type": { "type": "string", "title": "Mime Type", "description": "The MIME type of the payload file." },
          "doc_type": { "$ref": "#/components/schemas/DocType", "description": "The DocType of the payload file." },
          "current_pipeline_step": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Current Pipeline Step",
            "description": "The current step in the preprocessing pipeline."
          },
          "error_message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Error Message",
            "description": "The error message if the payload failed."
          }
        },
        "type": "object",
        "required": ["id", "prepro_job_id", "project_id", "filename", "mime_type", "doc_type"],
        "title": "PreprocessingJobPayloadRead"
      },
      "PreprocessingJobRead": {
        "properties": {
          "id": { "type": "string", "title": "Id", "description": "UUID of the PreprocessingJob" },
          "status": {
            "$ref": "#/components/schemas/BackgroundJobStatus",
            "description": "Status of the PreprocessingJob",
            "default": "Waiting"
          },
          "project_id": { "type": "integer", "title": "Project Id", "description": "The ID of the Project." },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the PreprocessingJob"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the PreprocessingJob"
          },
          "payloads": {
            "items": { "$ref": "#/components/schemas/PreprocessingJobPayloadRead" },
            "type": "array",
            "title": "Payloads",
            "description": "Payloads of the PreprocessingJobs, i.e., documents to be preprocessed and imported to the project within this PreprocessingJob"
          }
        },
        "type": "object",
        "required": ["id", "project_id", "created", "updated", "payloads"],
        "title": "PreprocessingJobRead"
      },
      "ProjectAddUser": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email", "description": "E-Mail of the User" }
        },
        "type": "object",
        "required": ["email"],
        "title": "ProjectAddUser"
      },
      "ProjectCreate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Project" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Project" }
        },
        "type": "object",
        "required": ["title", "description"],
        "title": "ProjectCreate"
      },
      "ProjectMetadataCreate": {
        "properties": {
          "key": { "type": "string", "title": "Key", "description": "Key of the ProjectMetadata" },
          "metatype": { "$ref": "#/components/schemas/MetaType", "description": "Type of the ProjectMetadata" },
          "read_only": {
            "type": "boolean",
            "title": "Read Only",
            "description": "Flag that tells if the ProjectMetadata cannot be changed. Used for system generated metadata! Use False for user metadata.",
            "default": false
          },
          "doctype": {
            "$ref": "#/components/schemas/DocType",
            "description": "DOCTYPE of the SourceDocument this metadata refers to"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the ProjectMetadata"
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the ProjectMetadata belongs to"
          }
        },
        "type": "object",
        "required": ["key", "metatype", "doctype", "description", "project_id"],
        "title": "ProjectMetadataCreate"
      },
      "ProjectMetadataRead": {
        "properties": {
          "key": { "type": "string", "title": "Key", "description": "Key of the ProjectMetadata" },
          "metatype": { "$ref": "#/components/schemas/MetaType", "description": "Type of the ProjectMetadata" },
          "read_only": {
            "type": "boolean",
            "title": "Read Only",
            "description": "Flag that tells if the ProjectMetadata cannot be changed. Used for system generated metadata! Use False for user metadata.",
            "default": false
          },
          "doctype": {
            "$ref": "#/components/schemas/DocType",
            "description": "DOCTYPE of the SourceDocument this metadata refers to"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the ProjectMetadata"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the ProjectMetadata" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the ProjectMetadata belongs to"
          }
        },
        "type": "object",
        "required": ["key", "metatype", "doctype", "description", "id", "project_id"],
        "title": "ProjectMetadataRead"
      },
      "ProjectMetadataUpdate": {
        "properties": {
          "key": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Key",
            "description": "Key of the ProjectMetadata"
          },
          "metatype": {
            "anyOf": [{ "$ref": "#/components/schemas/MetaType" }, { "type": "null" }],
            "description": "Type of the ProjectMetadata"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the ProjectMetadata"
          }
        },
        "type": "object",
        "title": "ProjectMetadataUpdate"
      },
      "ProjectRead": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Project" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Project" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the Project" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the Project"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Project"
          }
        },
        "type": "object",
        "required": ["title", "description", "id", "created", "updated"],
        "title": "ProjectRead"
      },
      "ProjectUpdate": {
        "properties": {
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title",
            "description": "Title of the Project"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Description of the Project"
          }
        },
        "type": "object",
        "title": "ProjectUpdate"
      },
      "PublicUserRead": {
        "properties": {
          "id": { "type": "integer", "title": "Id", "description": "ID of the User" },
          "first_name": { "type": "string", "title": "First Name", "description": "First name of the User" },
          "last_name": { "type": "string", "title": "Last Name", "description": "Last name of the User" }
        },
        "type": "object",
        "required": ["id", "first_name", "last_name"],
        "title": "PublicUserRead",
        "description": "A user object with information that everybody may see."
      },
      "QuotationAttributionParams": {
        "properties": {
          "ml_job_type": { "type": "string", "const": "QUOTATION_ATTRIBUTION", "title": "Ml Job Type" },
          "recompute": {
            "type": "boolean",
            "title": "Recompute",
            "description": "Whether to recompute already processed documents",
            "default": false
          }
        },
        "type": "object",
        "required": ["ml_job_type"],
        "title": "QuotationAttributionParams"
      },
      "SDocStatus": { "type": "string", "enum": ["unfinished_or_erroneous", "finished"], "title": "SDocStatus" },
      "SampledSdocsResults": {
        "properties": {
          "tags": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Tags",
            "description": "The tags aggregated by."
          },
          "sdocs": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sdocs",
            "description": "The grouped SourceDocument IDs."
          },
          "sample_fixed": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sample Fixed",
            "description": "The fixed sample of SourceDocument IDs."
          },
          "sample_relative": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sample Relative",
            "description": "The relative sample of SourceDocument IDs."
          }
        },
        "type": "object",
        "required": ["tags", "sdocs", "sample_fixed", "sample_relative"],
        "title": "SampledSdocsResults"
      },
      "SdocColumns": {
        "type": "string",
        "enum": [
          "SD_SOURCE_DOCUMENT_TYPE",
          "SD_SOURCE_DOCUMENT_FILENAME",
          "SD_DOCUMENT_TAG_ID_LIST",
          "SD_CODE_ID_LIST",
          "SD_USER_ID_LIST",
          "SD_SPAN_ANNOTATIONS"
        ],
        "title": "SdocColumns"
      },
      "SdocSentencePair": {
        "properties": {
          "sdoc_id": { "type": "integer", "title": "Sdoc Id" },
          "sentence": { "type": "integer", "title": "Sentence" }
        },
        "type": "object",
        "required": ["sdoc_id", "sentence"],
        "title": "SdocSentencePair"
      },
      "SentAnnoColumns": {
        "type": "string",
        "enum": [
          "SentAnno_CODE_ID",
          "SentAnno_USER_ID",
          "SentAnno_MEMO_CONTENT",
          "SentAnno_SOURCE_SOURCE_DOCUMENT_FILENAME",
          "SentAnno_DOCUMENT_DOCUMENT_TAG_ID_LIST"
        ],
        "title": "SentAnnoColumns"
      },
      "SentenceAnnotationCreate": {
        "properties": {
          "sentence_id_start": {
            "type": "integer",
            "title": "Sentence Id Start",
            "description": "Start sentence ID of the SentenceAnnotation"
          },
          "sentence_id_end": {
            "type": "integer",
            "title": "Sentence Id End",
            "description": "End sentence ID of the SentenceAnnotation"
          },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SentenceAnnotation refers to" },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "SourceDocument the SentenceAnnotation refers to"
          }
        },
        "type": "object",
        "required": ["sentence_id_start", "sentence_id_end", "code_id", "sdoc_id"],
        "title": "SentenceAnnotationCreate"
      },
      "SentenceAnnotationLLMJobResult": {
        "properties": {
          "llm_job_type": { "type": "string", "const": "SENTENCE_ANNOTATION", "title": "Llm Job Type" },
          "results": {
            "items": { "$ref": "#/components/schemas/SentenceAnnotationResult" },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": ["llm_job_type", "results"],
        "title": "SentenceAnnotationLLMJobResult"
      },
      "SentenceAnnotationParams": {
        "properties": {
          "llm_job_type": { "type": "string", "const": "SENTENCE_ANNOTATION", "title": "Llm Job Type" },
          "sdoc_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sdoc Ids",
            "description": "IDs of the source documents to analyse"
          },
          "code_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Code Ids",
            "description": "IDs of the codes to use for the sentence annotation"
          }
        },
        "type": "object",
        "required": ["llm_job_type", "sdoc_ids", "code_ids"],
        "title": "SentenceAnnotationParams"
      },
      "SentenceAnnotationRead": {
        "properties": {
          "sentence_id_start": {
            "type": "integer",
            "title": "Sentence Id Start",
            "description": "Start sentence ID of the SentenceAnnotation"
          },
          "sentence_id_end": {
            "type": "integer",
            "title": "Sentence Id End",
            "description": "End sentence ID of the SentenceAnnotation"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SentenceAnnotation" },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SentenceAnnotation refers to" },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "User that created the SentenceAnnotation"
          },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "SourceDocument the SentenceAnnotation refers to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the SentenceAnnotation"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the SentenceAnnotation"
          }
        },
        "type": "object",
        "required": [
          "sentence_id_start",
          "sentence_id_end",
          "id",
          "code_id",
          "user_id",
          "sdoc_id",
          "created",
          "updated"
        ],
        "title": "SentenceAnnotationRead"
      },
      "SentenceAnnotationResult": {
        "properties": {
          "status": { "$ref": "#/components/schemas/BackgroundJobStatus", "description": "Status of the Result" },
          "status_message": {
            "type": "string",
            "title": "Status Message",
            "description": "Status message of the result"
          },
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "ID of the source document" },
          "suggested_annotations": {
            "items": { "$ref": "#/components/schemas/SentenceAnnotationRead" },
            "type": "array",
            "title": "Suggested Annotations",
            "description": "Suggested annotations"
          }
        },
        "type": "object",
        "required": ["status", "status_message", "sdoc_id", "suggested_annotations"],
        "title": "SentenceAnnotationResult"
      },
      "SentenceAnnotationRow": {
        "properties": {
          "id": { "type": "integer", "title": "Id", "description": "ID of the SentenceAnnotation" },
          "text": { "type": "string", "title": "Text", "description": "The Text the SentenceAnnotation spans." },
          "code": { "$ref": "#/components/schemas/CodeRead", "description": "Code the SentenceAnnotation refers to" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the SentenceAnnotation belongs to" },
          "sdoc": {
            "$ref": "#/components/schemas/SourceDocumentRead",
            "description": "SourceDocument the SentenceAnnotation refers to"
          },
          "tag_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Tag Ids",
            "description": "The DocumentTagIDs of the SourceDocument."
          },
          "memo": {
            "anyOf": [{ "$ref": "#/components/schemas/MemoRead" }, { "type": "null" }],
            "description": "The Memo of the Annotation."
          }
        },
        "type": "object",
        "required": ["id", "text", "code", "user_id", "sdoc", "tag_ids", "memo"],
        "title": "SentenceAnnotationRow"
      },
      "SentenceAnnotationSearchResult": {
        "properties": {
          "total_results": {
            "type": "integer",
            "title": "Total Results",
            "description": "The total number of sentence_annotation_ids. Used for pagination."
          },
          "data": {
            "items": { "$ref": "#/components/schemas/SentenceAnnotationRow" },
            "type": "array",
            "title": "Data",
            "description": "The Annotations."
          }
        },
        "type": "object",
        "required": ["total_results", "data"],
        "title": "SentenceAnnotationSearchResult"
      },
      "SentenceAnnotationUpdate": {
        "properties": {
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SentenceAnnotation refers to" }
        },
        "type": "object",
        "required": ["code_id"],
        "title": "SentenceAnnotationUpdate"
      },
      "SentenceAnnotationUpdateBulk": {
        "properties": {
          "sent_annotation_id": {
            "type": "integer",
            "title": "Sent Annotation Id",
            "description": "ID of the SentenceAnnotation"
          },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SentenceAnnotation refers to" }
        },
        "type": "object",
        "required": ["sent_annotation_id", "code_id"],
        "title": "SentenceAnnotationUpdateBulk"
      },
      "SentenceAnnotatorResult": {
        "properties": {
          "sentence_annotations": {
            "additionalProperties": {
              "items": { "$ref": "#/components/schemas/SentenceAnnotationRead" },
              "type": "array"
            },
            "type": "object",
            "title": "Sentence Annotations",
            "description": "A mapping of sentence IDs to their annotations"
          }
        },
        "type": "object",
        "required": ["sentence_annotations"],
        "title": "SentenceAnnotatorResult"
      },
      "SimSearchImageHit": {
        "properties": {
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "The ID of the SourceDocument similar to the query."
          },
          "score": { "type": "number", "title": "Score", "description": "The similarity score." }
        },
        "type": "object",
        "required": ["sdoc_id", "score"],
        "title": "SimSearchImageHit"
      },
      "SimSearchSentenceHit": {
        "properties": {
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "The ID of the SourceDocument similar to the query."
          },
          "score": { "type": "number", "title": "Score", "description": "The similarity score." },
          "sentence_id": {
            "type": "integer",
            "title": "Sentence Id",
            "description": "The sentence id with respect to the SourceDocument"
          }
        },
        "type": "object",
        "required": ["sdoc_id", "score", "sentence_id"],
        "title": "SimSearchSentenceHit"
      },
      "SingleDocAllUserAnnotationsExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "type": "string",
            "const": "SINGLE_DOC_ALL_USER_ANNOTATIONS",
            "title": "Export Job Type"
          },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "The ID of the SDocument to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "export_job_type", "sdoc_id"],
        "title": "SingleDocAllUserAnnotationsExportJobParams"
      },
      "SingleDocSingleUserAnnotationsExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "type": "string",
            "const": "SINGLE_DOC_SINGLE_USER_ANNOTATIONS",
            "title": "Export Job Type"
          },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "The ID of the SDocument to get the data from."
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "export_job_type", "sdoc_id", "user_id"],
        "title": "SingleDocSingleUserAnnotationsExportJobParams"
      },
      "SingleProjectAllCodesExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": { "type": "string", "const": "SINGLE_PROJECT_ALL_CODES", "title": "Export Job Type" }
        },
        "type": "object",
        "required": ["project_id", "export_job_type"],
        "title": "SingleProjectAllCodesExportJobParams"
      },
      "SingleProjectAllDataExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": { "type": "string", "const": "SINGLE_PROJECT_ALL_DATA", "title": "Export Job Type" }
        },
        "type": "object",
        "required": ["project_id", "export_job_type"],
        "title": "SingleProjectAllDataExportJobParams"
      },
      "SingleProjectAllTagsExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": { "type": "string", "const": "SINGLE_PROJECT_ALL_TAGS", "title": "Export Job Type" }
        },
        "type": "object",
        "required": ["project_id", "export_job_type"],
        "title": "SingleProjectAllTagsExportJobParams"
      },
      "SingleProjectAllUserExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": { "type": "string", "const": "SINGLE_PROJECT_ALL_USER", "title": "Export Job Type" }
        },
        "type": "object",
        "required": ["project_id", "export_job_type"],
        "title": "SingleProjectAllUserExportJobParams"
      },
      "SingleProjectSelectedSdocsParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": { "type": "string", "const": "SINGLE_PROJECT_SELECTED_SDOCS", "title": "Export Job Type" },
          "sdoc_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sdoc Ids",
            "description": "IDs of the source documents to export"
          }
        },
        "type": "object",
        "required": ["project_id", "export_job_type", "sdoc_ids"],
        "title": "SingleProjectSelectedSdocsParams"
      },
      "SingleProjectSelectedSentenceAnnotationsParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "type": "string",
            "const": "SINGLE_PROJECT_SELECTED_SENTENCE_ANNOTATIONS",
            "title": "Export Job Type"
          },
          "sentence_annotation_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sentence Annotation Ids",
            "description": "IDs of the sentence annotations to export"
          }
        },
        "type": "object",
        "required": ["project_id", "export_job_type", "sentence_annotation_ids"],
        "title": "SingleProjectSelectedSentenceAnnotationsParams"
      },
      "SingleProjectSelectedSpanAnnotationsParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": {
            "type": "string",
            "const": "SINGLE_PROJECT_SELECTED_SPAN_ANNOTATIONS",
            "title": "Export Job Type"
          },
          "span_annotation_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Span Annotation Ids",
            "description": "IDs of the span annotations to export"
          }
        },
        "type": "object",
        "required": ["project_id", "export_job_type", "span_annotation_ids"],
        "title": "SingleProjectSelectedSpanAnnotationsParams"
      },
      "SingleUserAllDataExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": { "type": "string", "const": "SINGLE_USER_ALL_DATA", "title": "Export Job Type" },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "export_job_type", "user_id"],
        "title": "SingleUserAllDataExportJobParams"
      },
      "SingleUserAllMemosExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": { "type": "string", "const": "SINGLE_USER_ALL_MEMOS", "title": "Export Job Type" },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "export_job_type", "user_id"],
        "title": "SingleUserAllMemosExportJobParams"
      },
      "SingleUserLogbookExportJobParams": {
        "properties": {
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "The ID of the Project to export from"
          },
          "export_job_type": { "type": "string", "const": "SINGLE_USER_LOGBOOK", "title": "Export Job Type" },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "The ID of the User to get the data from."
          }
        },
        "type": "object",
        "required": ["project_id", "export_job_type", "user_id"],
        "title": "SingleUserLogbookExportJobParams"
      },
      "SortDirection": { "type": "string", "enum": ["asc", "desc"], "title": "SortDirection" },
      "Sort_BBoxColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/BBoxColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "direction": { "$ref": "#/components/schemas/SortDirection" }
        },
        "type": "object",
        "required": ["column", "direction"],
        "title": "Sort[BBoxColumns]"
      },
      "Sort_MemoColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/MemoColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "direction": { "$ref": "#/components/schemas/SortDirection" }
        },
        "type": "object",
        "required": ["column", "direction"],
        "title": "Sort[MemoColumns]"
      },
      "Sort_SdocColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SdocColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "direction": { "$ref": "#/components/schemas/SortDirection" }
        },
        "type": "object",
        "required": ["column", "direction"],
        "title": "Sort[SdocColumns]"
      },
      "Sort_SentAnnoColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SentAnnoColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "direction": { "$ref": "#/components/schemas/SortDirection" }
        },
        "type": "object",
        "required": ["column", "direction"],
        "title": "Sort[SentAnnoColumns]"
      },
      "Sort_SpanColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/SpanColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "direction": { "$ref": "#/components/schemas/SortDirection" }
        },
        "type": "object",
        "required": ["column", "direction"],
        "title": "Sort[SpanColumns]"
      },
      "Sort_WordFrequencyColumns_": {
        "properties": {
          "column": {
            "anyOf": [{ "$ref": "#/components/schemas/WordFrequencyColumns" }, { "type": "integer" }],
            "title": "Column"
          },
          "direction": { "$ref": "#/components/schemas/SortDirection" }
        },
        "type": "object",
        "required": ["column", "direction"],
        "title": "Sort[WordFrequencyColumns]"
      },
      "SourceDocumentDataRead": {
        "properties": {
          "id": { "type": "integer", "title": "Id", "description": "ID of the SourceDocument" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "ID of the Project the SourceDocument belongs to"
          },
          "repo_url": {
            "type": "string",
            "title": "Repo Url",
            "description": "Relative path to the SourceDocument in the repository"
          },
          "html": { "type": "string", "title": "Html", "description": "Processed HTML of the SourceDocument" },
          "tokens": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Tokens",
            "description": "List of tokens in the SourceDocument"
          },
          "token_character_offsets": {
            "items": {
              "prefixItems": [{ "type": "integer" }, { "type": "integer" }],
              "type": "array",
              "maxItems": 2,
              "minItems": 2
            },
            "type": "array",
            "title": "Token Character Offsets",
            "description": "List of character offsets of each token"
          },
          "sentences": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Sentences",
            "description": "List of sentences in the SourceDocument"
          },
          "word_level_transcriptions": {
            "anyOf": [
              { "items": { "$ref": "#/components/schemas/WordLevelTranscription" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Word Level Transcriptions",
            "description": "word level transcriptions, with tokens, start times and end times"
          }
        },
        "type": "object",
        "required": [
          "id",
          "project_id",
          "repo_url",
          "html",
          "tokens",
          "token_character_offsets",
          "sentences",
          "word_level_transcriptions"
        ],
        "title": "SourceDocumentDataRead"
      },
      "SourceDocumentDocumentTagLinks": {
        "properties": {
          "source_document_id": {
            "type": "integer",
            "title": "Source Document Id",
            "description": "ID of SourceDocument"
          },
          "document_tag_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Document Tag Ids",
            "description": "List of IDs of DocumentTags"
          }
        },
        "type": "object",
        "required": ["source_document_id", "document_tag_ids"],
        "title": "SourceDocumentDocumentTagLinks"
      },
      "SourceDocumentDocumentTagMultiLink": {
        "properties": {
          "source_document_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Source Document Ids",
            "description": "List of IDs of SourceDocuments"
          },
          "document_tag_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Document Tag Ids",
            "description": "List of IDs of DocumentTags"
          }
        },
        "type": "object",
        "required": ["source_document_ids", "document_tag_ids"],
        "title": "SourceDocumentDocumentTagMultiLink"
      },
      "SourceDocumentMetadataBulkUpdate": {
        "properties": {
          "int_value": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Int Value",
            "description": "Int Value of the SourceDocumentMetadata"
          },
          "str_value": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Str Value",
            "description": "String Value of the SourceDocumentMetadata"
          },
          "boolean_value": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Boolean Value",
            "description": "Boolean Value of the SourceDocumentMetadata"
          },
          "date_value": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Date Value",
            "description": "Date Value of the SourceDocumentMetadata"
          },
          "list_value": {
            "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
            "title": "List Value",
            "description": "List Value of the SourceDocumentMetadata"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SourceDocumentMetadata" }
        },
        "type": "object",
        "required": ["int_value", "str_value", "boolean_value", "date_value", "list_value", "id"],
        "title": "SourceDocumentMetadataBulkUpdate"
      },
      "SourceDocumentMetadataCreate": {
        "properties": {
          "int_value": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Int Value",
            "description": "Int Value of the SourceDocumentMetadata"
          },
          "str_value": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Str Value",
            "description": "String Value of the SourceDocumentMetadata"
          },
          "boolean_value": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Boolean Value",
            "description": "Boolean Value of the SourceDocumentMetadata"
          },
          "date_value": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Date Value",
            "description": "Date Value of the SourceDocumentMetadata"
          },
          "list_value": {
            "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
            "title": "List Value",
            "description": "List Value of the SourceDocumentMetadata"
          },
          "source_document_id": {
            "type": "integer",
            "title": "Source Document Id",
            "description": "SourceDocument the SourceDocumentMetadata belongs to"
          },
          "project_metadata_id": {
            "type": "integer",
            "title": "Project Metadata Id",
            "description": "ID of the ProjectMetadata"
          }
        },
        "type": "object",
        "required": [
          "int_value",
          "str_value",
          "boolean_value",
          "date_value",
          "list_value",
          "source_document_id",
          "project_metadata_id"
        ],
        "title": "SourceDocumentMetadataCreate"
      },
      "SourceDocumentMetadataRead": {
        "properties": {
          "int_value": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Int Value",
            "description": "Int Value of the SourceDocumentMetadata"
          },
          "str_value": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Str Value",
            "description": "String Value of the SourceDocumentMetadata"
          },
          "boolean_value": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Boolean Value",
            "description": "Boolean Value of the SourceDocumentMetadata"
          },
          "date_value": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Date Value",
            "description": "Date Value of the SourceDocumentMetadata"
          },
          "list_value": {
            "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
            "title": "List Value",
            "description": "List Value of the SourceDocumentMetadata"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SourceDocumentMetadata" },
          "project_metadata_id": {
            "type": "integer",
            "title": "Project Metadata Id",
            "description": "ID of the ProjectMetadata"
          },
          "source_document_id": {
            "type": "integer",
            "title": "Source Document Id",
            "description": "SourceDocument the SourceDocumentMetadata belongs to"
          }
        },
        "type": "object",
        "required": [
          "int_value",
          "str_value",
          "boolean_value",
          "date_value",
          "list_value",
          "id",
          "project_metadata_id",
          "source_document_id"
        ],
        "title": "SourceDocumentMetadataRead"
      },
      "SourceDocumentMetadataReadResolved": {
        "properties": {
          "int_value": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Int Value",
            "description": "Int Value of the SourceDocumentMetadata"
          },
          "str_value": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Str Value",
            "description": "String Value of the SourceDocumentMetadata"
          },
          "boolean_value": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Boolean Value",
            "description": "Boolean Value of the SourceDocumentMetadata"
          },
          "date_value": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Date Value",
            "description": "Date Value of the SourceDocumentMetadata"
          },
          "list_value": {
            "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
            "title": "List Value",
            "description": "List Value of the SourceDocumentMetadata"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SourceDocumentMetadata" },
          "source_document_id": {
            "type": "integer",
            "title": "Source Document Id",
            "description": "SourceDocument the SourceDocumentMetadata belongs to"
          },
          "project_metadata": {
            "$ref": "#/components/schemas/ProjectMetadataRead",
            "description": "ProjectMetadata of the SourceDocumentMetadata"
          }
        },
        "type": "object",
        "required": [
          "int_value",
          "str_value",
          "boolean_value",
          "date_value",
          "list_value",
          "id",
          "source_document_id",
          "project_metadata"
        ],
        "title": "SourceDocumentMetadataReadResolved"
      },
      "SourceDocumentMetadataUpdate": {
        "properties": {
          "int_value": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Int Value",
            "description": "Int Value of the SourceDocumentMetadata"
          },
          "str_value": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Str Value",
            "description": "String Value of the SourceDocumentMetadata"
          },
          "boolean_value": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Boolean Value",
            "description": "Boolean Value of the SourceDocumentMetadata"
          },
          "date_value": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Date Value",
            "description": "Date Value of the SourceDocumentMetadata"
          },
          "list_value": {
            "anyOf": [{ "items": { "type": "string" }, "type": "array" }, { "type": "null" }],
            "title": "List Value",
            "description": "List Value of the SourceDocumentMetadata"
          }
        },
        "type": "object",
        "required": ["int_value", "str_value", "boolean_value", "date_value", "list_value"],
        "title": "SourceDocumentMetadataUpdate"
      },
      "SourceDocumentRead": {
        "properties": {
          "filename": {
            "type": "string",
            "maxLength": 230,
            "title": "Filename",
            "description": "Filename of the SourceDocument"
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "User-defined name of the document"
          },
          "doctype": { "$ref": "#/components/schemas/DocType", "description": "DOCTYPE of the SourceDocument" },
          "status": { "$ref": "#/components/schemas/SDocStatus", "description": "Status of the SourceDocument" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the SourceDocument belongs to"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SourceDocument" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "The created timestamp of the SourceDocument"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Memo"
          }
        },
        "type": "object",
        "required": ["filename", "doctype", "status", "project_id", "id", "created", "updated"],
        "title": "SourceDocumentRead"
      },
      "SourceDocumentUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User-defined name of the document (default is the filename)"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "SourceDocumentUpdate"
      },
      "SpanAnnotationCreate": {
        "properties": {
          "begin": { "type": "integer", "title": "Begin", "description": "Begin of the SpanAnnotation in characters" },
          "end": { "type": "integer", "title": "End", "description": "End of the SpanAnnotation in characters" },
          "begin_token": {
            "type": "integer",
            "title": "Begin Token",
            "description": "Begin of the SpanAnnotation in tokens"
          },
          "end_token": {
            "type": "integer",
            "title": "End Token",
            "description": "End of the SpanAnnotation in tokens"
          },
          "span_text": {
            "type": "string",
            "title": "Span Text",
            "description": "The SpanText the SpanAnnotation spans."
          },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SpanAnnotation refers to" },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "SourceDocument the SpanAnnotation refers to"
          }
        },
        "type": "object",
        "required": ["begin", "end", "begin_token", "end_token", "span_text", "code_id", "sdoc_id"],
        "title": "SpanAnnotationCreate"
      },
      "SpanAnnotationDeleted": {
        "properties": {
          "begin": { "type": "integer", "title": "Begin", "description": "Begin of the SpanAnnotation in characters" },
          "end": { "type": "integer", "title": "End", "description": "End of the SpanAnnotation in characters" },
          "begin_token": {
            "type": "integer",
            "title": "Begin Token",
            "description": "Begin of the SpanAnnotation in tokens"
          },
          "end_token": {
            "type": "integer",
            "title": "End Token",
            "description": "End of the SpanAnnotation in tokens"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SpanAnnotation" },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SpanAnnotation refers to" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the SpanAnnotation belongs to" },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "SourceDocument the SpanAnnotation refers to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the SpanAnnotation"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the SpanAnnotation"
          }
        },
        "type": "object",
        "required": [
          "begin",
          "end",
          "begin_token",
          "end_token",
          "id",
          "code_id",
          "user_id",
          "sdoc_id",
          "created",
          "updated"
        ],
        "title": "SpanAnnotationDeleted"
      },
      "SpanAnnotationRead": {
        "properties": {
          "begin": { "type": "integer", "title": "Begin", "description": "Begin of the SpanAnnotation in characters" },
          "end": { "type": "integer", "title": "End", "description": "End of the SpanAnnotation in characters" },
          "begin_token": {
            "type": "integer",
            "title": "Begin Token",
            "description": "Begin of the SpanAnnotation in tokens"
          },
          "end_token": {
            "type": "integer",
            "title": "End Token",
            "description": "End of the SpanAnnotation in tokens"
          },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SpanAnnotation" },
          "text": { "type": "string", "title": "Text", "description": "The SpanText the SpanAnnotation spans." },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SpanAnnotation refers to" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the SpanAnnotation belongs to" },
          "sdoc_id": {
            "type": "integer",
            "title": "Sdoc Id",
            "description": "SourceDocument the SpanAnnotation refers to"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the SpanAnnotation"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the SpanAnnotation"
          },
          "group_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Group Ids",
            "description": "The group ids this span annotations belongs to"
          }
        },
        "type": "object",
        "required": [
          "begin",
          "end",
          "begin_token",
          "end_token",
          "id",
          "text",
          "code_id",
          "user_id",
          "sdoc_id",
          "created",
          "updated",
          "group_ids"
        ],
        "title": "SpanAnnotationRead"
      },
      "SpanAnnotationRow": {
        "properties": {
          "id": { "type": "integer", "title": "Id", "description": "ID of the SpanAnnotation" },
          "span_text": {
            "type": "string",
            "title": "Span Text",
            "description": "The SpanText the SpanAnnotation spans."
          },
          "code": { "$ref": "#/components/schemas/CodeRead", "description": "Code the SpanAnnotation refers to" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the SpanAnnotation belongs to" },
          "sdoc": {
            "$ref": "#/components/schemas/SourceDocumentRead",
            "description": "SourceDocument the SpanAnnotation refers to"
          },
          "tag_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Tag Ids",
            "description": "The DocumentTagIDs of the SourceDocument."
          },
          "memo": {
            "anyOf": [{ "$ref": "#/components/schemas/MemoRead" }, { "type": "null" }],
            "description": "The Memo of the Annotation."
          }
        },
        "type": "object",
        "required": ["id", "span_text", "code", "user_id", "sdoc", "tag_ids", "memo"],
        "title": "SpanAnnotationRow"
      },
      "SpanAnnotationSearchResult": {
        "properties": {
          "total_results": {
            "type": "integer",
            "title": "Total Results",
            "description": "The total number of span_annotation_ids. Used for pagination."
          },
          "data": {
            "items": { "$ref": "#/components/schemas/SpanAnnotationRow" },
            "type": "array",
            "title": "Data",
            "description": "The Annotations."
          }
        },
        "type": "object",
        "required": ["total_results", "data"],
        "title": "SpanAnnotationSearchResult"
      },
      "SpanAnnotationUpdate": {
        "properties": {
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SpanAnnotation refers to" }
        },
        "type": "object",
        "required": ["code_id"],
        "title": "SpanAnnotationUpdate"
      },
      "SpanAnnotationUpdateBulk": {
        "properties": {
          "span_annotation_id": {
            "type": "integer",
            "title": "Span Annotation Id",
            "description": "ID of the SpanAnnotation"
          },
          "code_id": { "type": "integer", "title": "Code Id", "description": "Code the SpanAnnotation refers to" }
        },
        "type": "object",
        "required": ["span_annotation_id", "code_id"],
        "title": "SpanAnnotationUpdateBulk"
      },
      "SpanColumns": {
        "type": "string",
        "enum": [
          "SP_SPAN_TEXT",
          "SP_CODE_ID",
          "SP_USER_ID",
          "SP_MEMO_CONTENT",
          "SP_SOURCE_SOURCE_DOCUMENT_FILENAME",
          "SP_DOCUMENT_DOCUMENT_TAG_ID_LIST"
        ],
        "title": "SpanColumns"
      },
      "SpanEntityStat": {
        "properties": {
          "code_id": {
            "type": "integer",
            "title": "Code Id",
            "description": "The ID of the Code related to the SpanAnnotation"
          },
          "span_text": {
            "type": "string",
            "title": "Span Text",
            "description": "The SpanText the SpanAnnotation spans"
          },
          "filtered_count": {
            "type": "integer",
            "title": "Filtered Count",
            "description": "Number of occurrences of the SpanEntity in a collection of SourceDocuments."
          },
          "global_count": {
            "type": "integer",
            "title": "Global Count",
            "description": "Number of occurrences of the SpanEntity in a collection of SourceDocuments."
          }
        },
        "type": "object",
        "required": ["code_id", "span_text", "filtered_count", "global_count"],
        "title": "SpanEntityStat"
      },
      "SpanGroupCreate": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the SpanGroup" },
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "SourceDocument the SpanGroup refers to" }
        },
        "type": "object",
        "required": ["name", "sdoc_id"],
        "title": "SpanGroupCreate"
      },
      "SpanGroupRead": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the SpanGroup" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SpanGroup" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User that created the SpanGroup" },
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "SourceDocument the SpanGroup refers to" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the SpanGroup"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the SpanGroup"
          }
        },
        "type": "object",
        "required": ["name", "id", "user_id", "sdoc_id", "created", "updated"],
        "title": "SpanGroupRead"
      },
      "SpanGroupUpdate": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "Name of the SpanGroup"
          }
        },
        "type": "object",
        "title": "SpanGroupUpdate"
      },
      "SpanGroupWithAnnotationsRead": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the SpanGroup" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the SpanGroup" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User that created the SpanGroup" },
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "SourceDocument the SpanGroup refers to" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the SpanGroup"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the SpanGroup"
          },
          "span_annotations": {
            "items": { "$ref": "#/components/schemas/SpanAnnotationRead" },
            "type": "array",
            "title": "Span Annotations",
            "description": "Annotations of the SpanGroup"
          }
        },
        "type": "object",
        "required": ["name", "id", "user_id", "sdoc_id", "created", "updated", "span_annotations"],
        "title": "SpanGroupWithAnnotationsRead"
      },
      "StringOperator": {
        "type": "string",
        "enum": ["STRING_CONTAINS", "STRING_EQUALS", "STRING_NOT_EQUALS", "STRING_STARTS_WITH", "STRING_ENDS_WITH"],
        "title": "StringOperator"
      },
      "TagStat": {
        "properties": {
          "tag": { "$ref": "#/components/schemas/DocumentTagRead", "description": "The counted document tag." },
          "filtered_count": {
            "type": "integer",
            "title": "Filtered Count",
            "description": "Number of occurrences of the document tag in the filtered documents"
          },
          "global_count": {
            "type": "integer",
            "title": "Global Count",
            "description": "Number of occurrences of the document tag in all documents"
          }
        },
        "type": "object",
        "required": ["tag", "filtered_count", "global_count"],
        "title": "TagStat"
      },
      "TaskType": {
        "type": "string",
        "enum": ["DOCUMENT_TAGGING", "METADATA_EXTRACTION", "ANNOTATION", "SENTENCE_ANNOTATION"],
        "title": "TaskType"
      },
      "TimelineAnalysisColumns": {
        "type": "string",
        "enum": [
          "TA_SOURCE_DOCUMENT_FILENAME",
          "TA_DOCUMENT_TAG_ID_LIST",
          "TA_CODE_ID_LIST",
          "TA_USER_ID_LIST",
          "TA_SPAN_ANNOTATIONS"
        ],
        "title": "TimelineAnalysisColumns"
      },
      "TimelineAnalysisConcept-Input": {
        "properties": {
          "id": { "type": "string", "title": "Id", "description": "ID of the Concept" },
          "name": { "type": "string", "title": "Name", "description": "Name of the Concept" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Concept" },
          "color": { "type": "string", "title": "Color", "description": "Color of the Concept" },
          "visible": { "type": "boolean", "title": "Visible", "description": "Visibility of the Concept" },
          "filter": {
            "$ref": "#/components/schemas/Filter_TimelineAnalysisColumns_-Input",
            "description": "The filter of the Concept"
          }
        },
        "type": "object",
        "required": ["id", "name", "description", "color", "visible", "filter"],
        "title": "TimelineAnalysisConcept"
      },
      "TimelineAnalysisConcept-Output": {
        "properties": {
          "id": { "type": "string", "title": "Id", "description": "ID of the Concept" },
          "name": { "type": "string", "title": "Name", "description": "Name of the Concept" },
          "description": { "type": "string", "title": "Description", "description": "Description of the Concept" },
          "color": { "type": "string", "title": "Color", "description": "Color of the Concept" },
          "visible": { "type": "boolean", "title": "Visible", "description": "Visibility of the Concept" },
          "filter": {
            "$ref": "#/components/schemas/Filter_TimelineAnalysisColumns_-Output",
            "description": "The filter of the Concept"
          }
        },
        "type": "object",
        "required": ["id", "name", "description", "color", "visible", "filter"],
        "title": "TimelineAnalysisConcept"
      },
      "TimelineAnalysisCreate": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the TimelineAnalysis" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the TimelineAnalysis belongs to"
          }
        },
        "type": "object",
        "required": ["name", "project_id"],
        "title": "TimelineAnalysisCreate"
      },
      "TimelineAnalysisRead": {
        "properties": {
          "name": { "type": "string", "title": "Name", "description": "Name of the TimelineAnalysis" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the TimelineAnalysis" },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the TimelineAnalysis belongs to" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the TimelineAnalysis belongs to"
          },
          "settings": {
            "$ref": "#/components/schemas/TimelineAnalysisSettings",
            "description": "Timeline Analysis Settings of the TimelineAnalysis."
          },
          "concepts": {
            "items": { "$ref": "#/components/schemas/TimelineAnalysisConcept-Output" },
            "type": "array",
            "title": "Concepts",
            "description": "List of Concepts that are part of the TimelineAnalysis"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the TimelineAnalysis"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the TimelineAnalysis"
          }
        },
        "type": "object",
        "required": ["name", "id", "user_id", "project_id", "settings", "concepts", "created", "updated"],
        "title": "TimelineAnalysisRead"
      },
      "TimelineAnalysisResult": {
        "properties": {
          "date": { "type": "string", "title": "Date", "description": "The date." },
          "sdoc_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Sdoc Ids",
            "description": "The SourceDoument IDs."
          }
        },
        "type": "object",
        "required": ["date", "sdoc_ids"],
        "title": "TimelineAnalysisResult"
      },
      "TimelineAnalysisResultType": { "type": "string", "enum": ["document"], "title": "TimelineAnalysisResultType" },
      "TimelineAnalysisSettings": {
        "properties": {
          "group_by": { "$ref": "#/components/schemas/DateGroupBy", "description": "Group by date", "default": "YEAR" },
          "date_metadata_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Date Metadata Id",
            "description": "ID of the Project Date Metadata that is used for the TimelineAnalysis"
          },
          "result_type": {
            "$ref": "#/components/schemas/TimelineAnalysisResultType",
            "description": "ResultType of the TimelineAnalysis",
            "default": "document"
          }
        },
        "type": "object",
        "title": "TimelineAnalysisSettings"
      },
      "TimelineAnalysisUpdate": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name",
            "description": "Name of the TimelineAnalysis"
          },
          "settings": {
            "anyOf": [{ "$ref": "#/components/schemas/TimelineAnalysisSettings" }, { "type": "null" }],
            "description": "Settings of the TimelineAnalysis."
          },
          "concepts": {
            "anyOf": [
              { "items": { "$ref": "#/components/schemas/TimelineAnalysisConcept-Input" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Concepts",
            "description": "List of Concepts that are part of the TimelineAnalysis"
          }
        },
        "type": "object",
        "title": "TimelineAnalysisUpdate"
      },
      "TrainerJobParameters": {
        "properties": {
          "project_id": { "type": "integer", "title": "Project Id", "description": "The ID of the Project." },
          "train_model_name": {
            "type": "string",
            "title": "Train Model Name",
            "description": "The name of the model."
          },
          "train_dataloader_name": {
            "type": "string",
            "title": "Train Dataloader Name",
            "description": "The name of the training dataloader."
          },
          "epochs": { "type": "integer", "title": "Epochs", "description": "The epochs to train." }
        },
        "type": "object",
        "required": ["project_id", "train_model_name", "train_dataloader_name", "epochs"],
        "title": "TrainerJobParameters"
      },
      "TrainerJobRead": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BackgroundJobStatus",
            "description": "Status of the TrainerJob",
            "default": "Waiting"
          },
          "id": { "type": "string", "title": "Id", "description": "ID of the TrainerJob" },
          "parameters": {
            "$ref": "#/components/schemas/TrainerJobParameters",
            "description": "The parameters of the TrainerJob that defines how to train!"
          },
          "saved_model_path": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Saved Model Path",
            "description": "The path to the saved model."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the TrainerJob"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the TrainerJob"
          }
        },
        "type": "object",
        "required": ["id", "parameters", "created", "updated"],
        "title": "TrainerJobRead"
      },
      "TrainingParameters": {
        "properties": {
          "max_epochs": {
            "type": "integer",
            "title": "Max Epochs",
            "description": "The maximum number of epochs to train the model"
          },
          "batch_size": {
            "type": "integer",
            "title": "Batch Size",
            "description": "The batch size to use for training"
          },
          "learning_rate": {
            "type": "number",
            "title": "Learning Rate",
            "description": "The learning rate to use for training"
          }
        },
        "type": "object",
        "required": ["max_epochs", "batch_size", "learning_rate"],
        "title": "TrainingParameters"
      },
      "UserAuthorizationHeaderData": {
        "properties": {
          "access_token": { "type": "string", "title": "Access Token", "description": "Value of the JWT" },
          "access_token_expires": { "type": "string", "format": "date-time", "title": "Access Token Expires" },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "For obtaining a new access token"
          },
          "refresh_token_expires": { "type": "string", "format": "date-time", "title": "Refresh Token Expires" },
          "token_type": { "type": "string", "title": "Token Type", "description": "Type of the Token" }
        },
        "type": "object",
        "required": ["access_token", "access_token_expires", "refresh_token", "refresh_token_expires", "token_type"],
        "title": "UserAuthorizationHeaderData"
      },
      "UserCreate": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email", "description": "E-Mail of the User" },
          "first_name": { "type": "string", "title": "First Name", "description": "First name of the User" },
          "last_name": { "type": "string", "title": "Last Name", "description": "Last name of the User" },
          "password": { "type": "string", "title": "Password", "description": "Hashed password of the User" }
        },
        "type": "object",
        "required": ["email", "first_name", "last_name", "password"],
        "title": "UserCreate"
      },
      "UserRead": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email", "description": "E-Mail of the User" },
          "first_name": { "type": "string", "title": "First Name", "description": "First name of the User" },
          "last_name": { "type": "string", "title": "Last Name", "description": "Last name of the User" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the User" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the User"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the User"
          }
        },
        "type": "object",
        "required": ["email", "first_name", "last_name", "id", "created", "updated"],
        "title": "UserRead"
      },
      "UserUpdate": {
        "properties": {
          "email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email",
            "description": "E-Mail of the User"
          },
          "first_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Name",
            "description": "First name of the User"
          },
          "last_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Name",
            "description": "Last name of the User"
          },
          "password": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Password",
            "description": "Hashed password of the User"
          }
        },
        "type": "object",
        "title": "UserUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "WhiteboardCreate": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Whiteboard" },
          "project_id": { "type": "integer", "title": "Project Id", "description": "Project the Whiteboard belongs to" }
        },
        "type": "object",
        "required": ["title", "project_id"],
        "title": "WhiteboardCreate"
      },
      "WhiteboardRead": {
        "properties": {
          "title": { "type": "string", "title": "Title", "description": "Title of the Whiteboard" },
          "id": { "type": "integer", "title": "Id", "description": "ID of the Whiteboard" },
          "project_id": {
            "type": "integer",
            "title": "Project Id",
            "description": "Project the Whiteboard belongs to"
          },
          "user_id": { "type": "integer", "title": "User Id", "description": "User the Whiteboard belongs to" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Created timestamp of the Whiteboard"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "title": "Updated",
            "description": "Updated timestamp of the Whiteboard"
          },
          "content": { "type": "string", "title": "Content", "description": "Content of the Whiteboard" }
        },
        "type": "object",
        "required": ["title", "id", "project_id", "user_id", "created", "updated", "content"],
        "title": "WhiteboardRead"
      },
      "WhiteboardUpdate": {
        "properties": {
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title",
            "description": "Title of the Whiteboard"
          },
          "content": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Content",
            "description": "Content of the Whiteboard"
          }
        },
        "type": "object",
        "title": "WhiteboardUpdate"
      },
      "WordFrequencyColumns": {
        "type": "string",
        "enum": [
          "WF_WORD",
          "WF_WORD_FREQUENCY",
          "WF_WORD_PERCENT",
          "WF_SOURCE_DOCUMENT_FREQUENCY",
          "WF_SOURCE_DOCUMENT_PERCENT",
          "WF_SOURCE_DOCUMENT_FILENAME",
          "WF_DOCUMENT_TAG_ID_LIST",
          "WF_CODE_ID_LIST",
          "WF_USER_ID_LIST",
          "WF_SPAN_ANNOTATIONS"
        ],
        "title": "WordFrequencyColumns"
      },
      "WordFrequencyRead": {
        "properties": {
          "sdoc_id": { "type": "integer", "title": "Sdoc Id", "description": "ID of the SourceDocument" },
          "word": { "type": "string", "title": "Word", "description": "Word" },
          "count": { "type": "integer", "title": "Count", "description": "Count of the word in the SourceDocument" }
        },
        "type": "object",
        "required": ["sdoc_id", "word", "count"],
        "title": "WordFrequencyRead"
      },
      "WordFrequencyResult": {
        "properties": {
          "total_results": {
            "type": "integer",
            "title": "Total Results",
            "description": "The total number of word_frequencies. Used for pagination."
          },
          "sdocs_total": {
            "type": "integer",
            "title": "Sdocs Total",
            "description": "The total number of SourceDocuments."
          },
          "words_total": { "type": "integer", "title": "Words Total", "description": "The total number of words." },
          "word_frequencies": {
            "items": { "$ref": "#/components/schemas/WordFrequencyStat" },
            "type": "array",
            "title": "Word Frequencies",
            "description": "The WordFrequencies."
          }
        },
        "type": "object",
        "required": ["total_results", "sdocs_total", "words_total", "word_frequencies"],
        "title": "WordFrequencyResult"
      },
      "WordFrequencyStat": {
        "properties": {
          "word": { "type": "string", "title": "Word", "description": "The word." },
          "word_percent": { "type": "number", "title": "Word Percent", "description": "The percentage of the word." },
          "count": { "type": "integer", "title": "Count", "description": "The SourceDoument IDs." },
          "sdocs": { "type": "integer", "title": "Sdocs", "description": "The number of SourceDocuments." },
          "sdocs_percent": {
            "type": "number",
            "title": "Sdocs Percent",
            "description": "The percentage of SourceDocuments."
          }
        },
        "type": "object",
        "required": ["word", "word_percent", "count", "sdocs", "sdocs_percent"],
        "title": "WordFrequencyStat"
      },
      "WordLevelTranscription": {
        "properties": {
          "text": { "type": "string", "title": "Text" },
          "start_ms": { "type": "integer", "title": "Start Ms" },
          "end_ms": { "type": "integer", "title": "End Ms" }
        },
        "type": "object",
        "required": ["text", "start_ms", "end_ms"],
        "title": "WordLevelTranscription"
      },
      "ZeroShotParams": {
        "properties": {
          "llm_approach_type": { "type": "string", "const": "LLM_ZERO_SHOT", "title": "Llm Approach Type" },
          "prompts": {
            "items": { "$ref": "#/components/schemas/LLMPromptTemplates" },
            "type": "array",
            "title": "Prompts",
            "description": "The prompt templates to use for the job"
          }
        },
        "type": "object",
        "required": ["llm_approach_type", "prompts"],
        "title": "ZeroShotParams"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": { "password": { "scopes": {}, "tokenUrl": "/authentication/login" } }
      }
    }
  }
}
