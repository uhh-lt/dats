import BarChartIcon from "@mui/icons-material/BarChart";
import PieChartIcon from "@mui/icons-material/PieChart";
import ReplyIcon from "@mui/icons-material/Reply";
import { Box, Button, Card, CardContent, CardMedia, IconButton, Stack, Tooltip, Typography } from "@mui/material";
import { useState } from "react";
import { Link as RouterLink, useParams } from "react-router-dom";
import TopicModellingHooks from "../../api/TopicModellingHooks.ts";
import ExportChartButton from "../../components/ExportChartButton.tsx";
import ContentContainerLayout from "../../layouts/ContentLayouts/ContentContainerLayout.tsx";
import BackgroundJobStatusBadge from "./BackgroundJobStatusBadge.tsx";
import ColorScalePicker from "./ColorScalePicker.tsx";
import { D3ColorScale } from "./D3ColorScale.ts";
import TMJobProgressCard from "./TMJobProgressCard.tsx";
import TopicDistributionPlot from "./TopicDistributionPlot.tsx";
import TopicList from "./TopicList.tsx";
import TopicSimilarityPlot from "./TopicSimilarityPlot.tsx";

function MapDashboard() {
  const urlParams = useParams() as { projectId: string; aspectId: string };
  const projectId = parseInt(urlParams.projectId);
  const aspectId = parseInt(urlParams.aspectId);

  // global server state
  const aspect = TopicModellingHooks.useGetAspect(aspectId);
  const tmJob = TopicModellingHooks.usePollTMJob(aspect.data?.most_recent_job_id, undefined);

  // show pie chart or bar chart
  const [showPieChart, setShowPieChart] = useState<boolean>(false);
  const handleToggleShowPieChart = () => {
    setShowPieChart((prev) => !prev);
  };

  // color palette
  const [colors, setColors] = useState<D3ColorScale>(D3ColorScale.blues);

  return (
    <ContentContainerLayout>
      {aspect.data ? (
        <Stack spacing={4}>
          <Stack spacing={2} direction={"row"} alignItems="flex-start" justifyContent="space-between">
            <Box maxWidth="66%">
              <Stack direction={"row"} spacing={2} alignItems="center">
                <Typography variant="h4" color="primary.dark">
                  {aspect.data.name}
                </Typography>
                <BackgroundJobStatusBadge status={tmJob.data?.status} />
              </Stack>
              <Typography pt={1} color="textSecondary">
                This map is generated by computing document represenations with the following instruction:{" "}
                <i>{aspect.data.doc_embedding_prompt}</i>.{" "}
                {aspect.data.doc_modification_prompt ? (
                  <>
                    All the documents were modified with the following instruction:{" "}
                    <i>{aspect.data.doc_modification_prompt}</i>.
                  </>
                ) : (
                  "The documents were not modified. Their content was used as is."
                )}
              </Typography>
            </Box>
            <Button
              variant="contained"
              color="primary"
              endIcon={<ReplyIcon sx={{ transform: "rotate(90deg)" }} />}
              component={RouterLink}
              to={`../atlas/map/${aspectId}`}
            >
              Open Map
            </Button>
          </Stack>

          <Stack spacing={4} direction={"row"}>
            <Box width="360px" flexShrink={0}>
              <Stack height={40} alignItems="center" direction="row">
                <Typography variant="button">Map Preview</Typography>
              </Stack>
              <Card variant="outlined" sx={{ bgcolor: "grey.300" }}>
                <CardMedia
                  sx={{ height: 360, width: 360, objectFit: "cover" }}
                  component="img"
                  image={`/content/projects/${projectId}/plots/aspect_${aspectId}_map_thumbnail.png`}
                  title="Atlas Map Preview"
                />
                <CardContent sx={{ padding: 0.5, pb: "4px !important" }}>
                  <Typography variant="body2" sx={{ color: "text.secondary", textAlign: "center" }}>
                    This map is cool!
                  </Typography>
                </CardContent>
              </Card>
            </Box>
            <Box flexGrow={1} flexBasis="0%">
              <Stack direction="row" alignItems="center">
                <Typography variant="button">Topic Distribution</Typography>
                <Tooltip title={showPieChart ? "View as Bar Chart" : "View as Pie Chart"}>
                  <IconButton onClick={handleToggleShowPieChart}>
                    {showPieChart ? <BarChartIcon /> : <PieChartIcon />}
                  </IconButton>
                </Tooltip>
                <ExportChartButton
                  chartName={"topic-frequency-" + (showPieChart ? "pie-chart-" : "bar-chart-") + aspectId}
                  chartIdentifier={`topic-frequency-chart-${aspectId}`}
                />
              </Stack>
              <TopicDistributionPlot aspectId={aspectId} height={360} showPieChart={showPieChart} />
            </Box>
            <Box flexGrow={1} flexBasis="0%">
              <Stack height={40} alignItems="center" direction="row">
                <Typography variant="button">Topic Similarities</Typography>
                <ColorScalePicker onColorChange={setColors} />
              </Stack>
              <TopicSimilarityPlot aspectId={aspectId} height={360} colorName={colors} />
            </Box>
          </Stack>

          <Stack spacing={4} direction={"row"}>
            <Box width="360px" flexShrink={0}>
              <Stack height={40} alignItems="center" direction="row">
                <Typography variant="button">Topics</Typography>
              </Stack>
              <TopicList aspectId={aspectId} height={390} />
            </Box>
          </Stack>

          {tmJob.data && (
            <Box>
              <Typography variant="button">Most recent job</Typography>
              <TMJobProgressCard tmJob={tmJob.data} />
            </Box>
          )}
        </Stack>
      ) : (
        <>LOADING!</>
      )}
    </ContentContainerLayout>
  );
}

export default MapDashboard;
