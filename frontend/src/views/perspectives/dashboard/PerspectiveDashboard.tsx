import BarChartIcon from "@mui/icons-material/BarChart";
import PieChartIcon from "@mui/icons-material/PieChart";
import ReplyIcon from "@mui/icons-material/Reply";
import { Box, Button, IconButton, Stack, Tooltip, Typography } from "@mui/material";
import { useState } from "react";
import { Link as RouterLink, useParams } from "react-router-dom";
import PerspectivesHooks from "../../../api/PerspectivesHooks.ts";
import JobStatusBadge from "../../../components/BackgroundTasks/JobStatusBadge.tsx";
import ExportChartButton from "../../../components/ExportChartButton.tsx";
import ContentContainerLayout from "../../../layouts/ContentLayouts/ContentContainerLayout.tsx";
import { useAppDispatch } from "../../../plugins/ReduxHooks.ts";
import { D3ColorScale } from "../../../utils/D3ColorScale.ts";
import ClusterJobProgressCard from "../components/ClusterJobProgressCard.tsx";
import DocAspectTable from "../components/DocAspectTable.tsx";
import ClusterDetailDialog from "../dialog/ClusterDetailDialog.tsx";
import { PerspectivesActions } from "../perspectivesSlice.ts";
import { useInitPerspectivesFilterSlice } from "../useInitPerspectivesFilterSlice.ts";
import ClusterDistributionPlot from "./ClusterDistributionPlot.tsx";
import ClusterList from "./ClusterList.tsx";
import ClusterSimilarityPlot from "./ClusterSimilarityPlot.tsx";
import ColorScalePicker from "./ColorScalePicker.tsx";
import DocumentClusterScatterPlot from "./DocumentClusterScatterPlot.tsx";

function PerspectiveDashboard() {
  const urlParams = useParams() as { projectId: string; aspectId: string };
  const projectId = parseInt(urlParams.projectId);
  const aspectId = parseInt(urlParams.aspectId);

  // initialize the filtering
  useInitPerspectivesFilterSlice({ projectId });

  // dispatch changeMap Event!
  const dispatch = useAppDispatch();
  dispatch(PerspectivesActions.onOpenMap({ projectId, aspectId: aspectId }));

  // global server state
  const aspect = PerspectivesHooks.useGetAspect(aspectId);
  const perspectivesJob = PerspectivesHooks.usePollPerspectivesJob(aspect.data?.most_recent_job_id, undefined);

  // show pie chart or bar chart
  const [showPieChart, setShowPieChart] = useState<boolean>(false);
  const handleToggleShowPieChart = () => {
    setShowPieChart((prev) => !prev);
  };

  // color palette
  const [colors, setColors] = useState<D3ColorScale>(D3ColorScale.blues);

  return (
    <ContentContainerLayout>
      {aspect.data && (
        <Stack spacing={4}>
          <Stack spacing={2} direction={"row"} alignItems="flex-start" justifyContent="space-between">
            <Box maxWidth="66%">
              <Stack direction={"row"} spacing={2} alignItems="center">
                <Typography variant="h4" color="primary.dark">
                  {aspect.data.name}
                </Typography>
                <JobStatusBadge status={perspectivesJob.data?.status} />
              </Stack>
              <Typography pt={1} color="textSecondary">
                This map is generated by computing document represenations with the following instruction:{" "}
                <i>{aspect.data.doc_embedding_prompt}</i>.{" "}
                {aspect.data.doc_modification_prompt ? (
                  <>
                    All the documents were modified with the following instruction:{" "}
                    <i>{aspect.data.doc_modification_prompt}</i>.
                  </>
                ) : (
                  "The documents were not modified. Their content was used as is."
                )}
              </Typography>
            </Box>
            <Button
              variant="contained"
              color="primary"
              endIcon={<ReplyIcon sx={{ transform: "rotate(90deg)" }} />}
              component={RouterLink}
              to={`../perspectives/map/${aspectId}`}
            >
              Open Map
            </Button>
          </Stack>

          <Stack spacing={4} direction={"row"}>
            <Box width="360px" flexShrink={0}>
              <Stack height={40} alignItems="center" direction="row">
                <Typography variant="button">Map Preview</Typography>
              </Stack>
              <DocumentClusterScatterPlot aspectId={aspectId} height={359} />
            </Box>
            <Box flexGrow={1} flexBasis="0%" sx={{ maxWidth: "100%", overflow: "hidden" }}>
              <Stack height={40} alignItems="center" direction="row">
                <Typography variant="button">Documents Preview</Typography>
              </Stack>
              <DocAspectTable aspectId={aspectId} height={390} />
            </Box>
          </Stack>

          <Stack spacing={4} direction={"row"}>
            <Box width="360px" flexShrink={0}>
              <Stack height={40} alignItems="center" direction="row">
                <Typography variant="button">Clusters</Typography>
              </Stack>
              <ClusterList aspectId={aspectId} height={390} />
            </Box>
            <Box flexGrow={1} flexBasis="0%">
              <Stack direction="row" alignItems="center">
                <Typography variant="button">Cluster Distribution</Typography>
                <Tooltip title={showPieChart ? "View as Bar Chart" : "View as Pie Chart"}>
                  <IconButton onClick={handleToggleShowPieChart}>
                    {showPieChart ? <BarChartIcon /> : <PieChartIcon />}
                  </IconButton>
                </Tooltip>
                <ExportChartButton
                  chartName={"cluster-frequency-" + (showPieChart ? "pie-chart-" : "bar-chart-") + aspectId}
                  chartIdentifier={`cluster-frequency-chart-${aspectId}`}
                />
              </Stack>
              <ClusterDistributionPlot aspectId={aspectId} height={360} showPieChart={showPieChart} />
            </Box>
            <Box flexGrow={1} flexBasis="0%">
              <Stack height={40} alignItems="center" direction="row">
                <Typography variant="button">Cluster Similarities</Typography>
                <ColorScalePicker onColorChange={setColors} />
              </Stack>
              <ClusterSimilarityPlot aspectId={aspectId} height={360} colorName={colors} />
            </Box>
          </Stack>

          {perspectivesJob.data && (
            <Box>
              <Stack height={40} alignItems="center" direction="row">
                <Typography variant="button">Most recent job</Typography>
              </Stack>
              <ClusterJobProgressCard perspectivesJob={perspectivesJob.data} />
            </Box>
          )}

          <ClusterDetailDialog aspectId={aspectId} />
        </Stack>
      )}
    </ContentContainerLayout>
  );
}

export default PerspectiveDashboard;
