x-dats-common: &dats-common
  image: uhhlt/dats_backend:${DATS_BACKEND_DOCKER_VERSION:?dats-backend-docker-version-required!}
  build:
    context: ../backend
    dockerfile: Dockerfile
  user: ${DOCKER_UID?docker-uid-required!}:${DOCKER_GID?docker-gid-required!}
  environment: &dats-common-env
    DATS_BACKEND_MODE: production
    JWT_SECRET: ${JWT_SECRET:?jwt-secret-required!}
    SESSION_SECRET: ${SESSION_SECRET:?session-secret-required!}
    UUID_NAMESPACE: ${UUID_NAMESPACE:?uuid-namespace-required!}
    SYSTEM_USER_EMAIL: ${SYSTEM_USER_EMAIL}
    SYSTEM_USER_PASSWORD: ${SYSTEM_USER_PASSWORD}
    POSTGRES_DB: ${POSTGRES_DB?postgres-db-required!}
    POSTGRES_USER: ${POSTGRES_USER?postgres-user-required!}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?postgres-password-required!}
    REDIS_PASSWORD: ${REDIS_PASSWORD?redis-password-required!}
    VLLM_LLM_HOST: ${VLLM_LLM_HOST?vllm-llm-host-required!}
    VLLM_VLM_HOST: ${VLLM_VLM_HOST?vllm-vlm-host-required!}
    VLLM_EMB_HOST: ${VLLM_EMB_HOST?vllm-emb-host-required!}
    VLLM_LLM_PORT: ${VLLM_LLM_PORT?vllm-llm-port-required!}
    VLLM_VLM_PORT: ${VLLM_VLM_PORT?vllm-vlm-port-required!}
    VLLM_EMB_PORT: ${VLLM_EMB_PORT?vllm-emb-port-required!}
    VLLM_LLM_MODEL: ${VLLM_LLM_MODEL?vllm-llm-model-required!}
    VLLM_VLM_MODEL: ${VLLM_VLM_MODEL?vllm-vlm-model-required!}
    VLLM_EMB_MODEL: ${VLLM_EMB_MODEL?vllm-emb-model-required!}
    RAY_HOST: ${RAY_HOST?ray-host-required!}
    RAY_PORT: ${RAY_PORT?ray-port-required!}
    OIDC_ENABLED: ${OIDC_ENABLED?oidc-enabled-required!}
    OIDC_PROVIDER_NAME: ${OIDC_PROVIDER_NAME?oidc-provider-name-required!}
    OIDC_CLIENT_ID: ${OIDC_CLIENT_ID?oidc-client-id-required!}
    OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET?oidc-client-secret-required!}
    OIDC_SERVER_METADATA_URL: ${OIDC_SERVER_METADATA_URL?oidc-server-metadata-url-required!}
    IS_STABLE: ${IS_STABLE?is-stable-required!}
    NUMBA_CACHE_DIR: /cache/numba_cache
    MPLCONFIGDIR: /cache/matplotlib
  depends_on: &dats-common-depends-on
    postgres:
      condition: service_healthy
      restart: true
    redis:
      condition: service_healthy
      restart: true
    weaviate:
      condition: service_healthy
      restart: true
    elasticsearch:
      condition: service_healthy
      restart: true
  networks:
    - dats_network
    - ray_network
    - vllm_network

services:
  postgres:
    image: postgres:15-alpine
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:?postgres-user-required!}"]
      interval: 10s
      retries: 5
      start_period: 5s
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?postgres-user-required!}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?postgres-password-required!}
      POSTGRES_DB: ${POSTGRES_DB:?postgres-db-required!}
    command: ["postgres", "-c", "max_connections=${POSTGRES_MAX_CONNECTIONS:?postgres-max-connections-required!}"]
    restart: always
    networks:
      - dats_network

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:?redis-password-required!}
    command: redis-server --requirepass "${REDIS_PASSWORD:?redis-password-required!}" --save 60 1
    restart: always
    networks:
      - dats_network

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - "8080"
      - --scheme
      - http
    image: semitechnologies/weaviate:1.30.4
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/v1/.well-known/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "../backups/weaviate:/mount/backups"
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      DEFAULT_VECTORIZER_MODULE: "none"
      CLUSTER_HOSTNAME: "node1"
      LOG_LEVEL: "info"
      ENABLE_MODULES: "backup-filesystem"
      BACKUP_FILESYSTEM_PATH: "/mount/backups"
    networks:
      - dats_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    user: ${DOCKER_UID?docker-uid-required!}:${DOCKER_GID?docker-gid-required!}
    group_add:
      - "0"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      # see https://www.elastic.co/gDOCKER_uide/en/elasticsearch/reference/current/modules-network.html
      # use 127.0.0.1 to access the ES node from OUTSIDE of the docker network (e.g. when ssh tunneling to ltdocker)
      # network.publish_host=127.0.0.1
      # http.publish_port=${ELASTICSEARCH_EXPOSED_PORT:-9200}
      - xpack.security.enabled=false # no auth
      - discovery.type=single-node # single node cluster
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./configs/es/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ../backups/elasticsearch:/mount/backups
    networks:
      - dats_network

  rq-worker:
    <<: *dats-common
    healthcheck:
      test: "/dats_code/.venv/bin/python /dats_code/src/worker.py healthcheck"
      interval: 30s
      timeout: 10s
      retries: 5
    command: /dats_code/src/rq_worker_entrypoint.sh
    environment:
      <<: *dats-common-env
      RQ_WORKERS_CPU: ${RQ_WORKERS_CPU?rq-workers-cpu-required!}
      RQ_WORKERS_GPU: ${RQ_WORKERS_GPU?rq-workers-gpu-required!}
      LOG_LEVEL: ${RQ_LOG_LEVEL?rq-log-level-required!}
    volumes:
      - ./backend_repo:/tmp/dats
      - ./rq_cache:/cache
    profiles:
      - rq

  rq-dashboard:
    image: cjlapao/rq-dashboard:0.8.4
    environment:
      RQ_DASHBOARD_REDIS_URL: redis://:${REDIS_PASSWORD:?redis-password-required!}@redis:6379/10
      RQ_DASHBOARD_USERNAME: ${RQ_DASHBOARD_USERNAME?rq-dashboard-username-required!}
      RQ_DASHBOARD_PASSWORD: ${RQ_DASHBOARD_PASSWORD?rq-dashboard-password-required!}
    depends_on:
      rq-worker:
        condition: service_healthy
        restart: true
    ports:
      - "${RQ_DASHBOARD_EXPOSED?rq-dashboard-exposed-required!}:9181"
    networks:
      - dats_network
    profiles:
      - rq

  dats-backend-api:
    <<: *dats-common
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5500 || exit 1"]
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 5
    command: /dats_code/src/backend_api_entrypoint.sh
    environment:
      <<: *dats-common-env
      API_WORKERS: ${API_WORKERS?api-workers-required!}
      LOG_LEVEL: ${API_LOG_LEVEL?api-log-level-required!}
    volumes:
      - ./backend_repo:/tmp/dats
      - ./api_cache:/cache
    depends_on:
      <<: *dats-common-depends-on
      rq-worker:
        condition: service_healthy
        restart: true
    ports:
      - "${API_EXPOSED?api-exposed-required!}:5500"
    profiles:
      - backend

  dats-frontend:
    image: uhhlt/dats_frontend:${DATS_FRONTEND_DOCKER_VERSION?dats-frontend-docker-version-required!}
    build:
      context: ../frontend
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./configs/frontend/logo2.png:/usr/share/nginx/html/logo2.png
      - ./configs/frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./backend_repo:/usr/share/nginx/content:ro
    depends_on:
      dats-backend-api:
        condition: service_healthy
        restart: true
    ports:
      - "${FRONTEND_EXPOSED?frontend-exposed-required!}:3000"
    networks:
      - dats_network
    profiles:
      - frontend

networks:
  dats_network:
  ray_network:
    name: ray_network
    external: true
  vllm_network:
    name: vllm_network
    external: true
